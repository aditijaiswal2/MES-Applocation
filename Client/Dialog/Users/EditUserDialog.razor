@using MES.Client.Utitlity
@using MES.Shared.Entities
@using MES.Shared.Models
@using System.ComponentModel.DataAnnotations;
@using Newtonsoft.Json
@using System.Text
@using MES.Shared.DTOs

@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject IDialogCompletionService CompletionService
 @inject IHttpClientFactory _httpClient

<div>
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Class="mr-3 mb-n1" />
                Update User
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField MaxLength="250" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))"
                          Label="User Name" @bind-Value="@appUsers.UserName" Variant="Variant.Outlined" Class="mb-4" ReadOnly />
            <MudTextField MaxLength="250" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))"
                          Label="Name " @bind-Value="@appUsers.Name" Variant="Variant.Outlined" Class="mb-4" />
            <MudTextField MaxLength="250" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))"
                          Label="User Code" @bind-Value="@appUsers.UserCode" Variant="Variant.Outlined" Class="mb-4" />
            <MudTextField MaxLength="250" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))"
                          Label="Email " @bind-Value="@appUsers.Email" Variant="Variant.Outlined" Class="mb-4" ReadOnly />
            <MudTextField MaxLength="250" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))"
                          Label="Assigned Page Privileges " @bind-Value="@appUsers.PageNames" Variant="Variant.Outlined" Class="mb-4" ReadOnly />
            <div class="mb-4">
                <MudSelect T="string" Variant="Variant.Outlined" @bind-Value="@appUsers.PageNames" Label="Update Page Privileges" MultiSelection="true">

                    @foreach (var pr in pages)
                    {

                        <MudSelectItem Value="@pr">@pr</MudSelectItem>
                    }
                </MudSelect>
            </div>



            <div class="mb-4">
                @if (appUsers?.PageNames != null && appUsers.PageNames.Contains("Rotors Grinding"))
                {
                    <MudSelect Variant="Variant.Outlined" Label="Update Work Center" @bind-Value="appUsers.SelectedWorkCenter">
                        @if (MESWorkcenters != null)
                        {
                            @foreach (var location in MESWorkcenters.OrderBy(l => l.Workcenters))
                            {
                                <MudSelectItem Value="@location.Workcenters">@location.Workcenters</MudSelectItem>
                            }
                        }
                    </MudSelect>

                }

                @*   <MudSelect Variant="Variant.Outlined" Label="Select Work Center" @bind-Value="user.SelectedWorkCenter">
                    @foreach (var pr in WC)
                    {
                        <MudSelectItem Value="@pr">@pr</MudSelectItem>
                    }
                </MudSelect> *@
            </div>

            <div class="mb-4">
                @if (appUsers?.PageNames != null && appUsers.PageNames.Contains("Rotors Sales"))
                {
                    <MudCheckBox T="bool"
                                 Color="Color.Primary"
                                 Checked="@appUsers.IsSalesUser"
                                 CheckedChanged="OnSalesUserCheckedChanged"
                                 Label="Email Notification" />
                }
            </div>
        </DialogContent>
        <DialogActions>
            <MudButton Class="mr-4 mb-2" Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" OnClick="Save">Save</MudButton>
            <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
        </DialogActions>
    </MudDialog>

</div>

@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Parameter] public AppUser appUsers { get; set; } = new AppUser();
    [Parameter] public string SelectedRole { get; set; }
    [Parameter] public IEnumerable<AppRole> AppRoles { get; set; }

    private IEnumerable<AppRole> appRoles = new List<AppRole>();
    public UserAddDto user = new UserAddDto();
    private List<MESWorkcenters>? MESWorkcenters { get; set; } = new List<MESWorkcenters>();
    public Dictionary<string, string> pagePrevlgs = new Dictionary<string, string>
     {
           { "Receiving", "/rec" },
           {"Active Summary Report", "/asr"},
          { "Rotors Incoming Inspection", "/rii" },
          { "Rotors Sales", "/svc" },
          { "Rotors Production Scheduling", "/rps" },
          { "Rotors Grinding", "/rg" },
          { "Rotors Final Inspection", "/rfi" },
          // { "Rotors Waiting For Sales Clearance", "/rwsc" },
          { "Manage User", "/adduser" },
         {"Manage Workcenters","/wc"},
          {"Manage Rotors", "/rs"},
      
         {"Damage During Grinding","/ddgr"},
          {"Shipping","/shippingvc"}


     };
    //  private string[] WC =
    //     {
    // "All","C1","C2","C3","C4","H1","H2","Saacke","JTEKT OD","Drake","Global","N/A",
    //  };

    private IEnumerable<string> MaxCharacters(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 250 <= ch?.Length)
            yield return "Max 250 characters";
    }
    private string[] pages =
       {
     "Receiving","Active Summary Report","Rotors Incoming Inspection","Rotors Sales","Rotors Production Scheduling","Rotors Grinding","Damage During Grinding","Rotors Final Inspection","Manage User","Manage Workcenters","Manage Rotors","Shipping"
    };


    protected override async Task OnInitializedAsync()
    // protected override void OnInitialized()
    {
        user.Role = SelectedRole;

        // get Work Centers
        HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
        var workcenterResponse = await HttpClient.GetAsync(ApiConstants.GetMESWorkcenters);

        if (workcenterResponse.IsSuccessStatusCode)
        {
            var locationResult = await workcenterResponse.Content.ReadFromJsonAsync<List<MESWorkcenters>>();

            if (locationResult != null)
            {
                MESWorkcenters = locationResult.OrderByDescending(l => l.Id).ToList();
                MESWorkcenters.Insert(0, new MESWorkcenters { Id = -1, Workcenters = "All" });
                MESWorkcenters.Insert(0, new MESWorkcenters { Id = -2, Workcenters = "NA" });
            }
        }
    }

    private void OnSalesUserCheckedChanged(bool isChecked)
    {
        appUsers.IsSalesUser = isChecked;

        // Optional: Do other things based on the checkbox state
        if (isChecked)
        {
            // Snackbar.Add("Sales user enabled.", Severity.Info);
        }
        else
        {
            Snackbar.Add("Sales user disabled.", Severity.Info);
        }
    }


    private async Task Save()
    {
        try
        {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

            // If "Rotors Grinding" is not selected, clear SelectedWorkCenter
            if (appUsers.PageNames == null || !appUsers.PageNames.Contains("Rotors Grinding"))
            {
                appUsers.SelectedWorkCenter = null;
            }

            // If "Rotors Sales" is not selected, set IsSalesUser to null
            if (appUsers.PageNames == null || !appUsers.PageNames.Contains("Rotors Sales"))
            {
                appUsers.IsSalesUser = false;
            }

            appUsers.Routes = string.Join(", ", appUsers.PageNames.Split(',').Select(page => pagePrevlgs[page.Trim()]));

            var userUpdateDto = new UserAddDto
                {
                    username = appUsers.UserName,
                    Name = appUsers.Name,
                    Usercode = appUsers.UserCode,
                    Email = appUsers.Email,
                    Role = "User",
                    IsSalesUser = appUsers.IsSalesUser,
                    PageNames = appUsers.PageNames,
                    SelectedWorkCenter = appUsers.SelectedWorkCenter,
                    Routes = appUsers.Routes

                };

            var jsonPart = JsonConvert.SerializeObject(userUpdateDto);
            var content = new StringContent(jsonPart, Encoding.UTF8, "application/json");

            //var response = await HttpClient.PutAsync("https://localhost:7006/api/Users/Ur", content);
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var response = await HttpClient.PutAsync(ApiConstants.SaveUser, content);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("User edited successfully.", Severity.Success);
                MudDialog?.Close(DialogResult.Ok(true));
                CompletionService.IsCompleted = true;
            }
            else
            {
                Snackbar.Add($"Failed to edit User. Status code: {response.StatusCode}", Severity.Error);
                CompletionService.IsCompleted = false;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error occurred: {ex.Message}", Severity.Warning);
        }
    }

    private void Cancel()
    {
        MudDialog?.Cancel();
    }
}