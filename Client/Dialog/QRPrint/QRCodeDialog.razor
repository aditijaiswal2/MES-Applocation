﻿@using System.ComponentModel.DataAnnotations;
@using MES.Shared.DTOs
@using Newtonsoft.Json
@using System.Text

@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<MudDialog>
    <TitleContent>
        <div style="display: flex; justify-content: center; gap: 10px; align-items: center;">
            <MudButton OnClick="PrintQRCode" Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Material.Outlined.Print">Print</MudButton>
            <MudButton OnClick="Cancel" Color="Color.Error" Size="Size.Small" StartIcon="@Icons.Material.Outlined.Cancel">Cancel</MudButton>
        </div>
    </TitleContent>

    <DialogContent>
        <div style="width: 2in; padding: 0.05in 0.25in 0.1in 0.25in; box-sizing: border-box; display: flex; flex-direction: column; align-items: center; justify-content: center;">
            @if (LocQR != null)
            {
                <p style="text-align:center; font-size: 14px; margin-bottom: 7px; margin-top: 0px; white-space: nowrap;">
                    @(LocQR.Date.HasValue ? LocQR.Date.Value.ToString("M/d/yyyy hh:mm:ss tt") : "")
                </p>
                <p style="text-align:center; font-size: 14px; margin-bottom: 7px; margin-top: 0px;">@LocQR.SelectedOption</p>

                <!-- QR Image -->
                <img src="@($"data:image/png;base64,{Convert.ToBase64String(LocQR.QRData)}")" alt="QR Code" style="width: 1.5in; height: 1.5in;" />

                <p style="text-align:center; font-size: 14px; margin-top: 7px; margin-bottom: 0px;">@LocQR.Customer</p>
            }
        </div>
    </DialogContent>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Parameter] public QrDTO LocQR { get; set; }

    private async Task Cancel()
    {
        MudDialog?.Cancel();
        StateHasChanged();
    }

    private async Task PrintQRCode()
    {
        try
        {
            if (LocQR != null)
            {

                var imageData = $"data:image/png;base64,{Convert.ToBase64String(LocQR.QRData)}";
                var partOrLoc = LocQR.SelectedOption;
                var customer = LocQR.Customer;
                var date = LocQR.Date;

                await JSRuntime.InvokeVoidAsync("printImage", imageData, partOrLoc, customer, date);

            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error printing QR code: {ex.Message}", Severity.Error);
        }
    }
}