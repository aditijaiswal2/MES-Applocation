@using MES.Shared.Models.Rotors


@using MES.Client.Utitlity
@using MES.Shared.DTOs
@using MES.Shared.Models
@using MES.Shared.Models.Rotors
@using System.Text
@using static MES.Client.Pages.LoginVC
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IHttpClientFactory _httpClient
@inject IDialogCompletionService CompletionService
@inject IJSRuntime JS;


<div>
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Details" Class="mr-2 mb-n1" />
                Grinding Report
            </MudText>
        </TitleContent>
        <DialogContent>

            @if (rotorGrindingData != null)
            {
                <MudGrid>

                    <MudItem md="12" sm="12" xs="12" class="center">
                        <MudButton Variant="Variant.Filled"
                                   Size="Size.Small"
                                   Color="Color.Primary"
                                   OnClick="ViewAttachedFile">
                            View Production Order
                        </MudButton>
                    </MudItem>

                    <MudItem xs="6">
                        <MudTextField Label="Rotor Dia.Left" @bind-Value="rotorGrindingData.RotorsDiaLeft" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField Label="Rotor Dia.Right" @bind-Value="rotorGrindingData.RotorsDiaRight" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField Label="Tooth Face Left" @bind-Value="rotorGrindingData.ToothFaceLeft" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField Label="Tooth Face Right" @bind-Value="rotorGrindingData.ToothFaceRight" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                    </MudItem>

                    <MudItem xs="6">
                        <MudTextField Label="T.I.R - Centers Left" @bind-Value="rotorGrindingData.CentersLeft" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                    </MudItem>

                    <MudItem xs="6">
                        <MudTextField Label="T.I.R - Centers Right" @bind-Value="rotorGrindingData.CentersRight" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                    </MudItem>

                    <MudItem xs="6">
                        <MudTextField Label="Relief Land" @bind-Value="rotorGrindingData.ReliefLand" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                    </MudItem>

                    <MudItem xs="6">
                        <MudTextField Label="Visual Checks" @bind-Value="rotorGrindingData.VisualChecks" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                    </MudItem>

                    <MudItem xs="6">
                        <MudTextField Label="Grinding Start Date" @bind-Value="rotorGrindingData.GrindingStartDate" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                    </MudItem>

                    <MudItem xs="6">
                        <MudTextField Label="Inspected By" @bind-Value="rotorGrindingData.InspectedBy" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                    </MudItem>

                    <MudItem xs="6">
                        <MudTextField Label="Notes" @bind-Value="rotorGrindingData.Notes" FullWidth="true" Variant="Variant.Outlined" ReadOnly />

                    </MudItem>

                    <MudItem xs="6">
                        <MudTextField Label="Delay Reason Tracking" @bind-Value="rotorGrindingData.DelayReasonTracking" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                    </MudItem>               

                    

                </MudGrid>


            }

        </DialogContent>
    </MudDialog>
</div>

<style>
    .center {
        display: flex;
        justify-content: center;
        align-items: center;
        top: 10px;
    }

</style>



@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Parameter] public RotorShipping rotorShipping { get; set; }
    private RotorGrindingData? rotorGrindingData;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");

            var swResponse = await HttpClient.GetAsync($"{ApiConstants.GetGrindingDatabySerialNo}/{rotorShipping.SerialNumber}");

            if (swResponse.IsSuccessStatusCode)
            {
                var swDataJson = await swResponse.Content.ReadAsStringAsync();

                if (!string.IsNullOrWhiteSpace(swDataJson))
                {
                    var SWDataList = JsonSerializer.Deserialize<List<RotorGrindingData>>(swDataJson,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                    rotorGrindingData = SWDataList?.FirstOrDefault();

                }
            }
            else
            {
                Console.WriteLine($"API call failed: {swResponse.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching sales clearance data: {ex.Message}");
        }
    }


    private async Task ViewAttachedFile()
    {
        if (string.IsNullOrEmpty(rotorShipping?.SerialNumber))
        {
            Snackbar.Add("Serial number is missing!", Severity.Warning);
            return;
        }

        try
        {
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var response = await HttpClient.GetAsync($"{ApiConstants.GetSalesAttachedFileBySerialNumber}/{rotorShipping.SerialNumber}");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<SalesAttachedFileDto>();
                var fileData = result?.File?.FirstOrDefault();

                if (fileData != null && fileData.Data != null)
                {
                    // Call JavaScript to open the PDF in a new tab
                    await JS.InvokeVoidAsync("openPdfFromByteArray", Convert.ToBase64String(fileData.Data));
                }
                else
                {
                    Snackbar.Add("Production Order file not available for this rotor/feed role.", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Production Order file not available for this rotor/feed role.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }


}
