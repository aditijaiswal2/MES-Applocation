@using MES.Client.Utitlity
@using MES.Shared.DTOs
@using MES.Shared.Models
@using MES.Shared.Models.Rotors
@using System.Text
@using static MES.Client.Pages.LoginVC
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IHttpClientFactory _httpClient
@inject IDialogCompletionService CompletionService
@inject IJSRuntime JS;

<div>
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Details" Class="mr-2 mb-n1" />
                Generate Process Dimensions Report
            </MudText>
        </TitleContent>
        <DialogContent>

            @if (selectedData != null)
            {
                <MudGrid>

                    <MudItem md="12" sm="12" xs="12" class="center">
                        <MudButton Variant="Variant.Filled"
                                   Size="Size.Small"
                                   Color="Color.Primary"
                                   OnClick="ViewAttachedFile">
                            View Production Order
                        </MudButton>
                    </MudItem>



                    <MudItem md="12" sm="12" xs="12">
                        <MudDatePicker PickerVariant="PickerVariant.Dialog"
                                       @bind-Date="StartDate"
                                       Variant="Variant.Outlined"
                                       Label="Select Start Date"
                                       MinDate="@StartMinDate" />
                    </MudItem>

                    <MudItem class="center" md="12" sm="12" xs="12">
                        @if (StartDate != null)
                        {
                            <MudButton Class="mr-2" Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" OnClick="Save">START</MudButton>
                        }

                    </MudItem>

                    <MudItem xs="6">
                        <MudTextField Label="Rotor Dia.Left" @bind-Value="@GetRotorProcess.RotorsDiaLeft" Variant="Variant.Outlined" />
                    </MudItem>

                    <MudItem xs="6">
                        <MudTextField Label="Rotor Dia.Right" @bind-Value="@GetRotorProcess.RotorsDiaRight" Variant="Variant.Outlined" />
                    </MudItem>

                    <MudItem xs="6">
                        <MudTextField Label="Tooth Face Left" @bind-Value="@GetRotorProcess.ToothFaceLeft" Variant="Variant.Outlined" />
                    </MudItem>

                    <MudItem xs="6">
                        <MudTextField Label="Tooth Face Right" @bind-Value="@GetRotorProcess.ToothFaceRight" Variant="Variant.Outlined" />
                    </MudItem>

                    <MudItem xs="6">
                        <MudTextField Label="T.I.R - Centers Left" @bind-Value="@GetRotorProcess.CentersLeft" Variant="Variant.Outlined" />
                    </MudItem>

                    <MudItem xs="6">
                        <MudTextField Label="T.I.R - Centers Right" @bind-Value="@GetRotorProcess.CentersRight" Variant="Variant.Outlined" />
                    </MudItem>

                    <MudItem md="4" sm="12" xs="12">
                        <MudSelect Variant="Variant.Outlined" @bind-Value="@GetRotorProcess.ReliefLand" AnchorOrigin="Origin.BottomCenter" Label="Relief Land" OpenIcon="@Icons.Material.Filled.ArrowDropDown" AdornmentColor="Color.Primary">
                            @foreach (var cup in ReliefLandStatus)
                            {
                                <MudSelectItem Value="@cup">@cup</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    @*  <MudItem xs="4">
                        <MudTextField Label="Relief Land" @bind-Value="@GetRotorProcess.ReliefLand" Variant="Variant.Outlined" />
                    </MudItem> *@

                    <MudItem md="4" sm="12" xs="12">
                        <MudSelect Variant="Variant.Outlined" @bind-Value="@GetRotorProcess.VisualChecks" AnchorOrigin="Origin.BottomCenter" Label="Visual Checks" OpenIcon="@Icons.Material.Filled.ArrowDropDown" AdornmentColor="Color.Primary">
                            @foreach (var cup in ReliefLandStatus)
                            {
                                <MudSelectItem Value="@cup">@cup</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    @*  <MudItem xs="4">
                        <MudTextField Label="Visual Checks" @bind-Value="@GetRotorProcess.VisualChecks" Variant="Variant.Outlined" />
                    </MudItem> *@

                    <MudItem xs="4">
                        <MudTextField Label="Inspected By" @bind-Value="@GetRotorProcess.InspectedBy" Variant="Variant.Outlined" />
                    </MudItem>

                    @* <MudItem md="6" sm="12" xs="12">
                        <MudDatePicker PickerVariant="PickerVariant.Dialog"
                        @bind-Date="Date"
                        Variant="Variant.Outlined"
                        Label="Date"
                        MinDate="@MinDate" />
                    </MudItem>
 *@
                    <MudItem md="6" sm="12" xs="12">
                        <MudTextField Label="Notes" @bind-Value="@GetRotorProcess.Notes" Variant="Variant.Outlined" />
                    </MudItem>

                    <MudItem md="6" sm="12" xs="12">
                        <MudSelect Variant="Variant.Outlined" @bind-Value="@DelayReasonTracking" AnchorOrigin="Origin.BottomCenter" Label="Delay Reason Tracking" OpenIcon="@Icons.Material.Filled.ArrowDropDown" AdornmentColor="Color.Primary">
                            @foreach (var cup in DelayReasonTrackingStatus)
                            {
                                <MudSelectItem Value="@cup">@cup</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    @*   <MudItem md="6" sm="12" xs="12">
                        <MudTextField Label="Delay Reason Tracking" @bind-Value="@DelayReasonTracking" Variant="Variant.Outlined" />
                    </MudItem> *@

                    <MudItem md="12" sm="12" xs="12">
                        <MudTextField Label="Comments" @bind-Value="@GetRotorProcess.AdditionalSalesComments" Variant="Variant.Outlined" />
                    </MudItem>

                    <div style="margin-top:-4px;margin-bottom:1.5rem;margin-left:-12px">
                        <MudCheckBox @bind-Value="@IsMoveoutsideoperation" Color="Color.Success">Move to outside operation</MudCheckBox>
                    </div>

                    <div style="margin-top:-4px;margin-bottom:1.5rem;margin-right:-12px">
                        <MudCheckBox @bind-Value="@IsSecondaryWorkCenters" Color="Color.Success">
                            Secondary WorkCenters
                        </MudCheckBox>
                    </div>

                    @if (IsSecondaryWorkCenters)
                    {
                        <MudItem md="12" sm="12" xs="12">
                            <MudSelect Variant="Variant.Outlined"
                                       @bind-Value="SelectedSecondaryWorkCenters"
                                       AnchorOrigin="Origin.BottomCenter"
                                       Label="Work Centers"
                                       OpenIcon="@Icons.Material.Filled.LocationCity"
                                       AdornmentColor="Color.Primary">
                                @if (MESWorkcenters != null)
                                {
                                    @foreach (var location in MESWorkcenters.OrderBy(l => l.Workcenters))
                                    {
                                        <MudSelectItem Value="@location.Workcenters">@location.Workcenters</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                        </MudItem>
                    }


                </MudGrid>
                <br />

                <MudItem Class="d-flex justify-end" md="12" sm="12" xs="12">
                    @* @if (StartDate != null)
                    {
                        <MudButton Class="mr-2" Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" OnClick="Save">SAVE</MudButton>
                    } *@

                    <MudButton Class="mr-2" Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" OnClick="SaveData">SAVE</MudButton>
                    <MudButton Class="mr-2" Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" OnClick="Submit">SUBMIT</MudButton>
                    <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Error" OnClick="ClearAll">Clear</MudButton>
                </MudItem>



            }


        </DialogContent>
    </MudDialog>
</div>

<style>
    .center {
        display: flex;
        justify-content: center;
        align-items: center;
        top: 10px;
    }

</style>




@code {


    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Parameter] public RotorProductionData selectedData { get; set; }
    [Parameter] public string currentWorkCenter { get; set; }
    private RotorGrindingData GetRotorProcess { get; set; } = new RotorGrindingData();
    // private DateTime? Date = DateTime.Today;
    // private DateTime MinDate = DateTime.Today;
    private string? DelayReasonTracking { get; set; }
    private DateTime? StartDate = DateTime.Today;
    private DateTime StartMinDate = DateTime.Today;
    public bool IsMoveoutsideoperation { get; set; } = false;
    private List<RotorGrindingSavedData> rotorGrindingSavedDatas = new();
    private List<RotorGrindingData> RotorgrindingDatas = new();
    public bool IsSecondaryWorkCenters { get; set; } = false;
    private string? SelectedSecondaryWorkCenters { get; set; }
    private List<MESWorkcenters>? MESWorkcenters { get; set; } = new List<MESWorkcenters>();
    private List<string> ReliefLandStatus = new List<string>();
    private List<string> DelayReasonTrackingStatus = new List<string>();
    private List<SaveEnterdRotorGrindingDetails> SaveEnterdRotorGrindingDetails = new();

    protected override async Task OnInitializedAsync()
    {
        ReliefLandStatus.Add("Okay");
        ReliefLandStatus.Add("N/A");

        DelayReasonTrackingStatus.Add("No operator");
        DelayReasonTrackingStatus.Add("Inspection");
        DelayReasonTrackingStatus.Add("Machine failure/Unscheduled Maintenance");
        DelayReasonTrackingStatus.Add("Training meetings");
        DelayReasonTrackingStatus.Add("Programming issues");
        DelayReasonTrackingStatus.Add("Set-Up / Changeover");
        DelayReasonTrackingStatus.Add("Outside Operations");
        DelayReasonTrackingStatus.Add("Process Quality Issues");

        // MinDate = DateTime.Today;
        StartMinDate = DateTime.Today;

        // get Work Centers
        HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
        var workcenterResponse = await HttpClient.GetAsync(ApiConstants.GetMESWorkcenters);

        if (workcenterResponse.IsSuccessStatusCode)
        {
            var locationResult = await workcenterResponse.Content.ReadFromJsonAsync<List<MESWorkcenters>>();

            if (locationResult != null)
            {
                MESWorkcenters = locationResult.OrderByDescending(l => l.Id).ToList();
            }
        }

        // get alredy saved grinding data    
            
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
        var Response = await HttpClient.GetAsync($"{ApiConstants.GetSaveEnterdRotorGrindingDetailsbyserialnumber}/{selectedData.SerialNumber}");           
        if (Response.IsSuccessStatusCode)
        {
            var data = await Response.Content.ReadAsStringAsync();
            var recentData = JsonSerializer.Deserialize<SaveEnterdRotorGrindingDetails>(data,
                new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            SaveEnterdRotorGrindingDetails = recentData != null ? new List<SaveEnterdRotorGrindingDetails> { recentData } : new List<SaveEnterdRotorGrindingDetails>();
        }
        else
        {
            SaveEnterdRotorGrindingDetails = new List<SaveEnterdRotorGrindingDetails>();
        }

        // Assign values based on retrieved data
        if (SaveEnterdRotorGrindingDetails.Any())
        {
            var latest = SaveEnterdRotorGrindingDetails.First();
            GetRotorProcess.RotorsDiaLeft = latest.RotorsDiaLeft ?? string.Empty;
            GetRotorProcess.RotorsDiaRight = latest.RotorsDiaRight ?? string.Empty;
            GetRotorProcess.ReliefLand = latest.ReliefLand ?? string.Empty;
            GetRotorProcess.ToothFaceLeft = latest.ToothFaceLeft ?? string.Empty;
            GetRotorProcess.ToothFaceRight = latest.ToothFaceRight ?? string.Empty;
            GetRotorProcess.CentersLeft = latest.CentersLeft ?? string.Empty;
            GetRotorProcess.CentersRight = latest.CentersRight ?? string.Empty;
            GetRotorProcess.VisualChecks= latest.VisualChecks ?? string.Empty;
            GetRotorProcess.InspectedBy = latest.InspectedBy ?? string.Empty;
            GetRotorProcess.Notes = latest.Notes ?? string.Empty;
            DelayReasonTracking = latest.DelayReasonTracking ?? string.Empty;
            GetRotorProcess.AdditionalSalesComments = latest.AdditionalSalesComments ?? string.Empty;
          


        }
        else
        {            
            GetRotorProcess.RotorsDiaLeft = string.Empty;
            GetRotorProcess.RotorsDiaRight = string.Empty;
            GetRotorProcess.ReliefLand = string.Empty;
            GetRotorProcess.ToothFaceLeft = string.Empty;
            GetRotorProcess.ToothFaceRight = string.Empty;
            GetRotorProcess.CentersLeft = string.Empty;
            GetRotorProcess.CentersRight = string.Empty;
            GetRotorProcess.VisualChecks = string.Empty;
            GetRotorProcess.InspectedBy = string.Empty;
            GetRotorProcess.Notes = string.Empty;
            DelayReasonTracking = string.Empty;
            GetRotorProcess.AdditionalSalesComments = string.Empty;
        }     
           
           
        
       
    }

    private bool IsAllFieldsFilled()
    {
        return StartDate != null
            && !string.IsNullOrWhiteSpace(GetRotorProcess.RotorsDiaLeft)
            && !string.IsNullOrWhiteSpace(GetRotorProcess.RotorsDiaRight)
            && !string.IsNullOrWhiteSpace(GetRotorProcess.ReliefLand)
            && !string.IsNullOrWhiteSpace(GetRotorProcess.ToothFaceLeft)
            && !string.IsNullOrWhiteSpace(GetRotorProcess.ToothFaceRight)
            && !string.IsNullOrWhiteSpace(GetRotorProcess.CentersLeft)
            && !string.IsNullOrWhiteSpace(GetRotorProcess.CentersRight)
            && !string.IsNullOrWhiteSpace(GetRotorProcess.VisualChecks)
            && !string.IsNullOrWhiteSpace(GetRotorProcess.InspectedBy)
            && !string.IsNullOrWhiteSpace(GetRotorProcess.Notes);
        // && !string.IsNullOrWhiteSpace(DelayReasonTracking);
    }

    private async Task submitIsMoveoutsideoperation()
    {
        var userData = await localStorage.GetItemAsync<UserPagesAndRouter>("UserData");
        string useradd = userData?.UserName ?? "User";
        if (userData != null)
        {
            useradd = userData.UserName;
        }
        var submissionData = new GrindingInspectionSubmission
            {
                SelectedProductionInspection = selectedData,
                RotorsDiaLeft = string.IsNullOrWhiteSpace(GetRotorProcess.RotorsDiaLeft) ? "N/A" : GetRotorProcess.RotorsDiaLeft,
                RotorsDiaRight = string.IsNullOrWhiteSpace(GetRotorProcess.RotorsDiaRight) ? "N/A" : GetRotorProcess.RotorsDiaRight,
                ReliefLand = string.IsNullOrWhiteSpace(GetRotorProcess.ReliefLand) ? "N/A" : GetRotorProcess.ReliefLand,
                ToothFaceLeft = string.IsNullOrWhiteSpace(GetRotorProcess.ToothFaceLeft) ? "N/A" : GetRotorProcess.ToothFaceLeft,
                ToothFaceRight = string.IsNullOrWhiteSpace(GetRotorProcess.ToothFaceRight) ? "N/A" : GetRotorProcess.ToothFaceRight,
                CentersLeft = string.IsNullOrWhiteSpace(GetRotorProcess.CentersLeft) ? "N/A" : GetRotorProcess.CentersLeft,
                CentersRight = string.IsNullOrWhiteSpace(GetRotorProcess.CentersRight) ? "N/A" : GetRotorProcess.CentersRight,
                VisualChecks = string.IsNullOrWhiteSpace(GetRotorProcess.VisualChecks) ? "N/A" : GetRotorProcess.VisualChecks,
                InspectedBy = string.IsNullOrWhiteSpace(GetRotorProcess.InspectedBy) ? "N/A" : GetRotorProcess.InspectedBy,
                Notes = string.IsNullOrWhiteSpace(GetRotorProcess.Notes) ? "N/A" : GetRotorProcess.Notes,
                GrindingStartDate = StartDate,
                DelayReasonTracking = string.IsNullOrWhiteSpace(DelayReasonTracking) ? "N/A" : DelayReasonTracking,
                AdditionalSalesComments = string.IsNullOrWhiteSpace(GetRotorProcess.AdditionalSalesComments) ? "N/A" : GetRotorProcess.AdditionalSalesComments,
                GrindingdataSavedBy = useradd,
                GrindingdataSavedByDate = DateTime.Now.ToString(),
                IsMoveoutsideoperation = IsMoveoutsideoperation


            };

        try
        {
            var jsonPart = Newtonsoft.Json.JsonConvert.SerializeObject(submissionData);
            var content = new StringContent(jsonPart, Encoding.UTF8, "application/json");
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var response = await HttpClient.PostAsync(ApiConstants.AddMovedOOPRotorGrindingData, content);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Rotor Moved to Outside Operation successfully!", Severity.Success);
                ClearAll();
                StateHasChanged();
                CompletionService.IsCompleted = true;
                MudDialog?.Close();

            }
            else
            {
                Snackbar.Add($"Failed to submit the data,Try again ! Status code: {response.StatusCode}", Severity.Error);

            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error submitting data: {ex.Message}", Severity.Error);
        }
    }

    private async Task submitSecondaryWorkCenters()
    {
        if (SelectedSecondaryWorkCenters == null)
        {
            Snackbar.Add("Please select secondary workcenters.", Severity.Error);
            return;
        }
        var userData = await localStorage.GetItemAsync<UserPagesAndRouter>("UserData");
        string useradd = userData?.UserName ?? "User";
        if (userData != null)
        {
            useradd = userData.UserName;
        }
        var SWsubmissionData = new SecondaryWorkCentersSubmission
            {
                SelectedProductionInspection = selectedData,
                RotorsDiaLeft = string.IsNullOrWhiteSpace(GetRotorProcess.RotorsDiaLeft) ? "N/A" : GetRotorProcess.RotorsDiaLeft,
                RotorsDiaRight = string.IsNullOrWhiteSpace(GetRotorProcess.RotorsDiaRight) ? "N/A" : GetRotorProcess.RotorsDiaRight,
                ReliefLand = string.IsNullOrWhiteSpace(GetRotorProcess.ReliefLand) ? "N/A" : GetRotorProcess.ReliefLand,
                ToothFaceLeft = string.IsNullOrWhiteSpace(GetRotorProcess.ToothFaceLeft) ? "N/A" : GetRotorProcess.ToothFaceLeft,
                ToothFaceRight = string.IsNullOrWhiteSpace(GetRotorProcess.ToothFaceRight) ? "N/A" : GetRotorProcess.ToothFaceRight,
                CentersLeft = string.IsNullOrWhiteSpace(GetRotorProcess.CentersLeft) ? "N/A" : GetRotorProcess.CentersLeft,
                CentersRight = string.IsNullOrWhiteSpace(GetRotorProcess.CentersRight) ? "N/A" : GetRotorProcess.CentersRight,
                VisualChecks = string.IsNullOrWhiteSpace(GetRotorProcess.VisualChecks) ? "N/A" : GetRotorProcess.VisualChecks,
                InspectedBy = string.IsNullOrWhiteSpace(GetRotorProcess.InspectedBy) ? "N/A" : GetRotorProcess.InspectedBy,
                Notes = string.IsNullOrWhiteSpace(GetRotorProcess.Notes) ? "N/A" : GetRotorProcess.Notes,
                GrindingStartDate = StartDate,
                DelayReasonTracking = string.IsNullOrWhiteSpace(DelayReasonTracking) ? "N/A" : DelayReasonTracking,
                AdditionalSalesComments = string.IsNullOrWhiteSpace(GetRotorProcess.AdditionalSalesComments) ? "N/A" : GetRotorProcess.AdditionalSalesComments,
                GrindingdataSavedBy = useradd,
                GrindingdataSavedByDate = DateTime.Now.ToString(),
                IsMoveoutsideoperation = IsMoveoutsideoperation,
                IsSecondaryWorkCenters = IsSecondaryWorkCenters,
                SecondaryWorkCenters = SelectedSecondaryWorkCenters,

            };

        try
        {
            var jsonPart = Newtonsoft.Json.JsonConvert.SerializeObject(SWsubmissionData);
            var content = new StringContent(jsonPart, Encoding.UTF8, "application/json");
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var response = await HttpClient.PostAsync(ApiConstants.AddSWSubmitedData, content);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Rotor Secondary WorkCenters Submit successfully!", Severity.Success);
                ClearAll();
                StateHasChanged();
                CompletionService.IsCompleted = true;
                MudDialog?.Close();

            }
            else
            {
                Snackbar.Add($"Failed to submit the data,Try again ! Status code: {response.StatusCode}", Severity.Error);

            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error submitting data: {ex.Message}", Severity.Error);
        }
    }

    private async Task Submit()
    {
        if (StartDate == null)
        {
            Snackbar.Add("Please Select Start Date", Severity.Warning);
            return;
        }

        // CHECK FOR THIS SERIAL NUMBER IS STARTED OR NOT

        HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
        var Response = await HttpClient.GetAsync($"{ApiConstants.GetRotorGrindingSavedDatabyserialnumber}/{selectedData.SerialNumber}");

        if (Response.IsSuccessStatusCode)
        {
            var savedDataJson = await Response.Content.ReadAsStringAsync();
            if (!string.IsNullOrEmpty(savedDataJson))
            {
                var rotorData = JsonSerializer.Deserialize<List<RotorGrindingSavedData>>(savedDataJson,
                   new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorGrindingSavedData>();

                if (rotorData.Count == 0 || string.IsNullOrEmpty(rotorData.First().SerialNumber))
                {
                    Snackbar.Add("Before submitting, you need to start the rotor.", Severity.Error);
                    return;
                }

            }
            else
            {
                Snackbar.Add("Before submitting, you need to start the rotor.", Severity.Error);
                return;
            }


        }
        else
        {
            Snackbar.Add("Before submitting, you need to start the rotor.", Severity.Error);
            return;
        }

        if (IsMoveoutsideoperation)
        {
            await submitIsMoveoutsideoperation();
            return;
        }

        if (IsSecondaryWorkCenters)
        {
            await submitSecondaryWorkCenters();
            return;
        }

        var userData = await localStorage.GetItemAsync<UserPagesAndRouter>("UserData");
        string useradd = userData?.UserName ?? "User";
        if (userData != null)
        {
            useradd = userData.UserName;
        }



        var submissionData = new GrindingInspectionSubmission
            {
                SelectedProductionInspection = selectedData,
                RotorsDiaLeft = string.IsNullOrWhiteSpace(GetRotorProcess.RotorsDiaLeft) ? "N/A" : GetRotorProcess.RotorsDiaLeft,
                RotorsDiaRight = string.IsNullOrWhiteSpace(GetRotorProcess.RotorsDiaRight) ? "N/A" : GetRotorProcess.RotorsDiaRight,
                ReliefLand = string.IsNullOrWhiteSpace(GetRotorProcess.ReliefLand) ? "N/A" : GetRotorProcess.ReliefLand,
                ToothFaceLeft = string.IsNullOrWhiteSpace(GetRotorProcess.ToothFaceLeft) ? "N/A" : GetRotorProcess.ToothFaceLeft,
                ToothFaceRight = string.IsNullOrWhiteSpace(GetRotorProcess.ToothFaceRight) ? "N/A" : GetRotorProcess.ToothFaceRight,
                CentersLeft = string.IsNullOrWhiteSpace(GetRotorProcess.CentersLeft) ? "N/A" : GetRotorProcess.CentersLeft,
                CentersRight = string.IsNullOrWhiteSpace(GetRotorProcess.CentersRight) ? "N/A" : GetRotorProcess.CentersRight,
                VisualChecks = string.IsNullOrWhiteSpace(GetRotorProcess.VisualChecks) ? "N/A" : GetRotorProcess.VisualChecks,
                InspectedBy = string.IsNullOrWhiteSpace(GetRotorProcess.InspectedBy) ? "N/A" : GetRotorProcess.InspectedBy,
                Notes = string.IsNullOrWhiteSpace(GetRotorProcess.Notes) ? "N/A" : GetRotorProcess.Notes,
                GrindingStartDate = StartDate,
                DelayReasonTracking = string.IsNullOrWhiteSpace(DelayReasonTracking) ? "N/A" : DelayReasonTracking,
                AdditionalSalesComments = string.IsNullOrWhiteSpace(GetRotorProcess.AdditionalSalesComments) ? "N/A" : GetRotorProcess.AdditionalSalesComments,
                GrindingdataSavedBy = useradd,
                GrindingdataSavedByDate = DateTime.Now.ToString(),
                IsMoveoutsideoperation = IsMoveoutsideoperation


            };

        try
        {
            var jsonPart = Newtonsoft.Json.JsonConvert.SerializeObject(submissionData);
            var content = new StringContent(jsonPart, Encoding.UTF8, "application/json");
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var response = await HttpClient.PostAsync(ApiConstants.AddRotorGrindingData, content);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Grinding Data submitted successfully!", Severity.Success);
                ClearAll();
                StateHasChanged();
                CompletionService.IsCompleted = true;
                MudDialog?.Close();

            }
            else
            {
                Snackbar.Add($"Failed to submit the data,Try again ! Status code: {response.StatusCode}", Severity.Error);

            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error submitting data: {ex.Message}", Severity.Error);
        }
    }


    private async Task Save()
    {
        if (StartDate == null)
        {
            Snackbar.Add("Please Select the Start Date", Severity.Warning);
            return;
        }

        if (StartDate != DateTime.Today)
        {
            Snackbar.Add("If you want to start the rotor, then select today's date. otherwise, the rotor will not start.", Severity.Warning);
            return;
        }


        // get the alredy select the stsart date data

        HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
        var Response = await HttpClient.GetAsync($"{ApiConstants.GetRotorGrindingSavedDatabyserialnumber}/{selectedData.SerialNumber}");

        if (Response.IsSuccessStatusCode)
        {
            var productionDataJson = await Response.Content.ReadAsStringAsync();

            if (!string.IsNullOrEmpty(productionDataJson))
            {
                Snackbar.Add("This Rotor Alredy Started", Severity.Error);
                return;
            }
        }

        // get all saved rotor grinding data
        HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
        var rotorgrindingsavedDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllSavedGrindingData);

        if (rotorgrindingsavedDatasResponse.IsSuccessStatusCode)
        {
            var productionDataJson = await rotorgrindingsavedDatasResponse.Content.ReadAsStringAsync();

            if (!string.IsNullOrEmpty(productionDataJson))
            {
                rotorGrindingSavedDatas = JsonSerializer.Deserialize<List<RotorGrindingSavedData>>(productionDataJson,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorGrindingSavedData>();

                RotorgrindingDatas = new List<RotorGrindingData>();
                // Get all existing Rotor grinding Data
                HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
                var rotorgrindingDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllGrindingData);

                if (rotorgrindingDatasResponse.IsSuccessStatusCode)
                {
                    var DataJson = await rotorgrindingDatasResponse.Content.ReadAsStringAsync();

                    if (!string.IsNullOrEmpty(DataJson))
                    {
                        RotorgrindingDatas = JsonSerializer.Deserialize<List<RotorGrindingData>>(DataJson,
                            new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorGrindingData>();

                    }
                }

                // Step 1: Get all existing serial numbers
                var existingSerialNumbers = new HashSet<string>(
                    RotorgrindingDatas
                        .Where(x => !string.IsNullOrWhiteSpace(x.SerialNumber))
                        .Select(x => x.SerialNumber)
                );

                // Step 2: Get saved grinding data whose SerialNumbers are NOT in existing grinding data
                var savedWithDifferentSerials = rotorGrindingSavedDatas
                    .Where(x => !string.IsNullOrWhiteSpace(x.SerialNumber) && !existingSerialNumbers.Contains(x.SerialNumber))
                    .ToList();

                // Step 3: Compare work centers
                var selectedWorkCenter = selectedData?.Workcenters?.Trim().ToLowerInvariant();

                bool isWorkCenterConflict = savedWithDifferentSerials
                    .Any(x => x.Workcenters?.Trim().ToLowerInvariant() == selectedWorkCenter);

                // Step 4: Show message if conflict
                if (isWorkCenterConflict)
                {
                    Snackbar.Add("One of the rotors is already started for this workcenter. Please complete it before starting a new rotor.", Severity.Error);
                    return;
                }


                // // Step 1: Get serials from both lists
                // var allGrindingSerials = new HashSet<string>(RotorgrindingDatas.Select(x => x.SerialNumber));
                // var savedSerials = rotorGrindingSavedDatas.Select(x => x.SerialNumber);

                // // Step 2: Find if any saved serial is missing in grinding data
                // bool anySavedNotInGrinding = savedSerials.Any(serial => !allGrindingSerials.Contains(serial));

                // // Step 3: If yes, show the message
                // if (anySavedNotInGrinding)
                // {
                //     Snackbar.Add("One of the rotors is already started. Please complete it before starting a new rotor.", Severity.Error);
                //     return;
                // }


            }

        }



        var userData = await localStorage.GetItemAsync<UserPagesAndRouter>("UserData");
        string useradd = userData?.UserName ?? "User";
        if (userData != null)
        {
            useradd = userData.UserName;
        }

        var submissionData = new GrindingInspectionSubmission
            {

                SelectedProductionInspection = selectedData,
                RotorsDiaLeft = string.IsNullOrWhiteSpace(GetRotorProcess.RotorsDiaLeft) ? "N/A" : GetRotorProcess.RotorsDiaLeft,
                RotorsDiaRight = string.IsNullOrWhiteSpace(GetRotorProcess.RotorsDiaRight) ? "N/A" : GetRotorProcess.RotorsDiaRight,
                ReliefLand = string.IsNullOrWhiteSpace(GetRotorProcess.ReliefLand) ? "N/A" : GetRotorProcess.ReliefLand,
                ToothFaceLeft = string.IsNullOrWhiteSpace(GetRotorProcess.ToothFaceLeft) ? "N/A" : GetRotorProcess.ToothFaceLeft,
                ToothFaceRight = string.IsNullOrWhiteSpace(GetRotorProcess.ToothFaceRight) ? "N/A" : GetRotorProcess.ToothFaceRight,
                CentersLeft = string.IsNullOrWhiteSpace(GetRotorProcess.CentersLeft) ? "N/A" : GetRotorProcess.CentersLeft,
                CentersRight = string.IsNullOrWhiteSpace(GetRotorProcess.CentersRight) ? "N/A" : GetRotorProcess.CentersRight,
                VisualChecks = string.IsNullOrWhiteSpace(GetRotorProcess.VisualChecks) ? "N/A" : GetRotorProcess.VisualChecks,
                InspectedBy = string.IsNullOrWhiteSpace(GetRotorProcess.InspectedBy) ? "N/A" : GetRotorProcess.InspectedBy,
                Notes = string.IsNullOrWhiteSpace(GetRotorProcess.Notes) ? "N/A" : GetRotorProcess.Notes,
                GrindingStartDate = StartDate,
                DelayReasonTracking = string.IsNullOrWhiteSpace(DelayReasonTracking) ? "N/A" : DelayReasonTracking,
                AdditionalSalesComments = string.IsNullOrWhiteSpace(GetRotorProcess.AdditionalSalesComments) ? "N/A" : GetRotorProcess.AdditionalSalesComments,
                GrindingdataSavedBy = useradd,
                GrindingdataSavedByDate = DateTime.Now.ToString(),
                IsMoveoutsideoperation = IsMoveoutsideoperation

            };

        try
        {
            var jsonPart = Newtonsoft.Json.JsonConvert.SerializeObject(submissionData);
            var content = new StringContent(jsonPart, Encoding.UTF8, "application/json");
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var response = await HttpClient.PostAsync(ApiConstants.AddRotorGrindingSavedData, content);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Rotor Started", Severity.Success);
                ClearAll();
                StateHasChanged();
                CompletionService.IsCompleted = true;
                MudDialog?.Close();

            }
            else
            {
                Snackbar.Add($"Failed to save the data,Try again ! Status code: {response.StatusCode}", Severity.Error);

            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error save data: {ex.Message}", Severity.Error);
        }
    }

    private async Task ViewAttachedFile()
    {
        if (string.IsNullOrEmpty(selectedData?.SerialNumber))
        {
            Snackbar.Add("Serial number is missing!", Severity.Warning);
            return;
        }

        try
        {
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var response = await HttpClient.GetAsync($"{ApiConstants.GetSalesAttachedFileBySerialNumber}/{selectedData.SerialNumber}");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<SalesAttachedFileDto>();
                var fileData = result?.File?.FirstOrDefault();

                if (fileData != null && fileData.Data != null)
                {
                    // Call JavaScript to open the PDF in a new tab
                    await JS.InvokeVoidAsync("openPdfFromByteArray", Convert.ToBase64String(fileData.Data));
                }
                else
                {
                    Snackbar.Add("Production Order file not available for this rotor/feed role.", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Production Order file not available for this rotor/feed role.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task SaveData()
    {
        var userData = await localStorage.GetItemAsync<UserPagesAndRouter>("UserData");
        string useradd = userData?.UserName ?? "User";
        if (userData != null)
        {
            useradd = userData.UserName;
        }
        var submissionData = new GrindingsaveddataSubmission
            {

                SelectedProductionInspection = selectedData,
                RotorsDiaLeft = string.IsNullOrWhiteSpace(GetRotorProcess.RotorsDiaLeft) ? "N/A" : GetRotorProcess.RotorsDiaLeft,
                RotorsDiaRight = string.IsNullOrWhiteSpace(GetRotorProcess.RotorsDiaRight) ? "N/A" : GetRotorProcess.RotorsDiaRight,
                ReliefLand = string.IsNullOrWhiteSpace(GetRotorProcess.ReliefLand) ? "N/A" : GetRotorProcess.ReliefLand,
                ToothFaceLeft = string.IsNullOrWhiteSpace(GetRotorProcess.ToothFaceLeft) ? "N/A" : GetRotorProcess.ToothFaceLeft,
                ToothFaceRight = string.IsNullOrWhiteSpace(GetRotorProcess.ToothFaceRight) ? "N/A" : GetRotorProcess.ToothFaceRight,
                CentersLeft = string.IsNullOrWhiteSpace(GetRotorProcess.CentersLeft) ? "N/A" : GetRotorProcess.CentersLeft,
                CentersRight = string.IsNullOrWhiteSpace(GetRotorProcess.CentersRight) ? "N/A" : GetRotorProcess.CentersRight,
                VisualChecks = string.IsNullOrWhiteSpace(GetRotorProcess.VisualChecks) ? "N/A" : GetRotorProcess.VisualChecks,
                InspectedBy = string.IsNullOrWhiteSpace(GetRotorProcess.InspectedBy) ? "N/A" : GetRotorProcess.InspectedBy,
                Notes = string.IsNullOrWhiteSpace(GetRotorProcess.Notes) ? "N/A" : GetRotorProcess.Notes,
                GrindingStartDate = StartDate,
                DelayReasonTracking = string.IsNullOrWhiteSpace(DelayReasonTracking) ? "N/A" : DelayReasonTracking,
                AdditionalSalesComments = string.IsNullOrWhiteSpace(GetRotorProcess.AdditionalSalesComments) ? "N/A" : GetRotorProcess.AdditionalSalesComments,
                GrindingdataSavedBy = useradd,
                GrindingdataSavedByDate = DateTime.Now.ToString(),
               

            };
        try
        {
            var jsonPart = Newtonsoft.Json.JsonConvert.SerializeObject(submissionData);
            var content = new StringContent(jsonPart, Encoding.UTF8, "application/json");
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var response = await HttpClient.PostAsync(ApiConstants.AddSaveEnterdRotorGrindingDetails, content);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Rotor Grinding Data  Saved successfully!", Severity.Success);
                ClearAll();
                StateHasChanged();                
                MudDialog?.Close();
            }
            else
            {
                Snackbar.Add($"Failed to save the Grinding data,Try again ! Status code: {response.StatusCode}", Severity.Error);

            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error save Grinding data: {ex.Message}", Severity.Error);
        }
    }


    private async Task ClearAll()
    {
        GetRotorProcess = new RotorGrindingData();
        // Date = DateTime.Today;
        DelayReasonTracking = null;
        StartDate = DateTime.Today;
        StateHasChanged();
    }


    public class GrindingInspectionSubmission
    {
        public RotorProductionData SelectedProductionInspection { get; set; }
        public string RotorsDiaLeft { get; set; }
        public string RotorsDiaRight { get; set; }
        public string ReliefLand { get; set; }
        public string ToothFaceLeft { get; set; }
        public string ToothFaceRight { get; set; }
        public string CentersLeft { get; set; }
        public string CentersRight { get; set; }
        public string VisualChecks { get; set; }
        public string InspectedBy { get; set; }
        public DateTime? GrindingStartDate { get; set; }
        public string Notes { get; set; }
        public string DelayReasonTracking { get; set; }
        public string AdditionalSalesComments { get; set; }
        public string GrindingdataSavedBy { get; set; }
        public string GrindingdataSavedByDate { get; set; }
        public bool IsMoveoutsideoperation { get; set; }
    }


    public class GrindingsaveddataSubmission
    {
        public RotorProductionData SelectedProductionInspection { get; set; }
        public string RotorsDiaLeft { get; set; }
        public string RotorsDiaRight { get; set; }
        public string ReliefLand { get; set; }
        public string ToothFaceLeft { get; set; }
        public string ToothFaceRight { get; set; }
        public string CentersLeft { get; set; }
        public string CentersRight { get; set; }
        public string VisualChecks { get; set; }
        public string InspectedBy { get; set; }
        public DateTime? GrindingStartDate { get; set; }
        public string Notes { get; set; }
        public string DelayReasonTracking { get; set; }
        public string AdditionalSalesComments { get; set; }
        public string GrindingdataSavedBy { get; set; }
        public string GrindingdataSavedByDate { get; set; }
       
    }


    public class SecondaryWorkCentersSubmission
    {
        public RotorProductionData SelectedProductionInspection { get; set; }
        public string RotorsDiaLeft { get; set; }
        public string RotorsDiaRight { get; set; }
        public string ReliefLand { get; set; }
        public string ToothFaceLeft { get; set; }
        public string ToothFaceRight { get; set; }
        public string CentersLeft { get; set; }
        public string CentersRight { get; set; }
        public string VisualChecks { get; set; }
        public string InspectedBy { get; set; }
        public DateTime? GrindingStartDate { get; set; }
        public string Notes { get; set; }
        public string DelayReasonTracking { get; set; }
        public string AdditionalSalesComments { get; set; }
        public string GrindingdataSavedBy { get; set; }
        public string GrindingdataSavedByDate { get; set; }
        public bool IsMoveoutsideoperation { get; set; }
        public bool IsSecondaryWorkCenters { get; set; }
        public string SecondaryWorkCenters { get; set; }
    }
}
