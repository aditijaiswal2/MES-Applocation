@using MES.Client.Utitlity
@using MES.Shared.DTOs
@using MES.Shared.Models
@using MES.Shared.Models.Rotors
@using System.Text
@using static MES.Client.Pages.LoginVC

@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IHttpClientFactory _httpClient
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JS;

<script>
    <script src="js/camera.js" >
</script>

<div>
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Details" Class="mr-2 mb-n1" />
                New Rotor Details
            </MudText>
        </TitleContent>
        <DialogContent>

            <MudGrid>

                <MudItem md="4" sm="12" xs="12">
                    <MudTextField Label="Sales Order" @bind-Value="@SalesOrderNumber" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem md="4" sm="12" xs="12">
                    <MudTextField Label="Work Order" @bind-Value="@WorkOrder" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem md="4" sm="12" xs="12">
                    <MudTextField Label="Mat#" @bind-Value="@MatNumber" Variant="Variant.Outlined" />
                </MudItem>

                <MudItem md="6" sm="12" xs="12">
                    <MudTextField Label="Customer Name" @bind-Value="CustomerName" FullWidth="true" Variant="Variant.Outlined" />
                </MudItem>



                <MudItem md="6" sm="12" xs="12">
                    <MudSelect Variant="Variant.Outlined" @bind-Value="SelectedWorkCenters"
                               AnchorOrigin="Origin.BottomCenter" Label="Work centers"
                               OpenIcon="@Icons.Material.Filled.LocationCity" AdornmentColor="Color.Primary">
                        @if (MESWorkcenters != null)
                        {
                            @foreach (var location in MESWorkcenters.OrderBy(l => l.Workcenters))
                            {
                                <MudSelectItem Value="@location.Workcenters">@location.Workcenters</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>

                <MudItem md="6" sm="12" xs="12">
                    <MudDatePicker PickerVariant="PickerVariant.Dialog" @bind-Date="fromDate"
                                   Variant="Variant.Outlined"
                                   Label="Target Date Entry"
                                   MinDate="DateTime.Today" />
                </MudItem>

                <MudItem md="3" sm="12" xs="12">
                    <MudNumericField @bind-Value="Hours"
                                     Label="Hours"
                                     Min="0"
                                     Max="150"
                                     Required="true"
                                     Immediate="true"
                                     Variant="Variant.Outlined"
                                     ErrorText="Enter a value between 0 and 150" />
                </MudItem>

                <MudItem md="3" sm="12" xs="12">
                    <MudNumericField @bind-Value="Minutes"
                                     Label="Minutes"
                                     Min="1"
                                     Max="59"
                                     Required="true"
                                     Immediate="true"
                                     Variant="Variant.Outlined"
                                     ErrorText="Enter a value between 1 and 59" />
                </MudItem>


                <MudItem md="12" sm="12" xs="12">
                    <MudSelect Variant="Variant.Outlined" @bind-Value="SelectedPriority" AnchorOrigin="Origin.BottomCenter" Label="Customer Priority" OpenIcon="@Icons.Material.Filled.PriorityHigh" AdornmentColor="Color.Primary">
                        @foreach (var cup in CustomerPriorityStatus)
                        {
                            <MudSelectItem Value="@cup">@cup</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

            </MudGrid>
            <br />
            <MudItem Class="d-flex justify-end " md="12" sm="12" xs="12">
                <MudButton Class="mr-2"
                           Variant="Variant.Filled"
                           Size="Size.Small"
                           Color="@((isFileAttached ? Color.Success : Color.Primary))"
                           Disabled="@(isFileAttached)"
                           OnClick="AttacheFile">
                    @(isFileAttached ? "Done" : "Attach File")
                </MudButton>

                <MudButton Class="mr-2" Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" OnClick="Submit">SUBMIT</MudButton>
                <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Error" OnClick="ClearAll">Clear</MudButton>

            </MudItem>

            <div id="pdfInputContainer">
                <InputFile OnChange="HandlePdfFileSelected" accept=".pdf" style="display:none" />
            </div>




        </DialogContent>
    </MudDialog>
</div>

@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    private string? CustomerName { get; set; }
    private List<MESWorkcenters>? MESWorkcenters { get; set; } = new List<MESWorkcenters>();
    private string? SelectedWorkCenters { get; set; }
    private string? SalesOrderNumber { get; set; }
    private string? WorkOrder { get; set; }
    private string? MatNumber { get; set; }
    private DateTime? fromDate = DateTime.Today;
    private string? PlannedHours { get; set; }
    private string? SelectedPriority { get; set; }
    private List<string> CustomerPriorityStatus = new List<string>();
    private ElementReference pdfFileInput;
    private bool isFileAttached = false;
    private SalesAttachedFileDto uploadedFileDto;
    private byte[] uploadedFileBytes;
    private IBrowserFile selectedPdfFile;
    private string fileName;
    private int Hours { get; set; }
    private int Minutes { get; set; }
    private string? plannedHours { get; set; }


    protected override async Task OnInitializedAsync()
    {
        CustomerPriorityStatus.Add("High");
        CustomerPriorityStatus.Add("Low");
        CustomerPriorityStatus.Add("");

        HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
        var workcenterResponse = await HttpClient.GetAsync(ApiConstants.GetMESWorkcenters);

        if (workcenterResponse.IsSuccessStatusCode)
        {
            var locationResult = await workcenterResponse.Content.ReadFromJsonAsync<List<MESWorkcenters>>();

            if (locationResult != null)
            {
                MESWorkcenters = locationResult.OrderByDescending(l => l.Id).ToList();
            }
        }


    }

    private async Task Submit()
    {
        if (string.IsNullOrWhiteSpace(CustomerName) || string.IsNullOrWhiteSpace(WorkOrder) || string.IsNullOrWhiteSpace(SelectedWorkCenters))
        {
            Snackbar.Add("Please fill all required fields", Severity.Warning);
            return;
        }
        plannedHours = $"{Hours:D2}:{Minutes:D2}";

        if (plannedHours == "00:00")
        {
            Snackbar.Add("Planned hours is required.", Severity.Error);
            return;
        }


        var userData = await localStorage.GetItemAsync<UserPagesAndRouter>("UserData");
        string useradd = userData?.UserName ?? "User";
        if (userData != null)
        {
            useradd = userData.UserName;
        }

        HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
        var latestSerialResponse = await HttpClient.GetAsync(ApiConstants.GetLatestSerialNumber);
        string newSerialNumber = "MESN00001";

        if (latestSerialResponse.IsSuccessStatusCode)
        {
            var latestSerial = await latestSerialResponse.Content.ReadAsStringAsync();
            if (!string.IsNullOrEmpty(latestSerial))
            {
                // Extract the number part
                if (int.TryParse(latestSerial.Substring(4), out int latestNumber))
                {
                    int nextNumber = latestNumber + 1;
                    newSerialNumber = $"MESN{nextNumber:D5}"; // format with leading zeros
                }
            }
        }


        var newRotor = new NewRotorData
            {
                SerialNumber = newSerialNumber,
                Module = "Rotor",
                SalesOrderNumber = SalesOrderNumber,
                WorkOrder = WorkOrder,
                MaterialNumber = MatNumber,
                RotorsNumber = "NEW",
                ComponentType = "Rotor",
                CustomerImportance = string.IsNullOrWhiteSpace(SelectedPriority) ? "N/A" : SelectedPriority,
                TargetDate = fromDate,
                PlannedHours = plannedHours,
                CustomerName = CustomerName,
                Workcenters = SelectedWorkCenters,
                IsDeleted = false,
                NewRotorDataSSubmitBy = useradd,
                NewRotorDataSubmitDate = DateTime.Now

            };

        try
        {
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var response = await HttpClient.PostAsJsonAsync(ApiConstants.AddNewRotorData, newRotor);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("New rotor data saved successfully!", Severity.Success);
                ClearAll();
                StateHasChanged();
                MudDialog?.Close();
            }
            else
            {
                Snackbar.Add("Failed to save new rotor data.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task AttacheFile()
    {
        await JS.InvokeVoidAsync("triggerFileInputClick");
    }

    private async Task HandlePdfFileSelected(InputFileChangeEventArgs e)
    {
        uploadedFileDto = null;
        uploadedFileBytes = null;
        selectedPdfFile = null;
        fileName = string.Empty;

        selectedPdfFile = e.File;

        if (selectedPdfFile != null && selectedPdfFile.ContentType == "application/pdf")
        {
            try
            {
                HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
                var latestSerialResponse = await HttpClient.GetAsync(ApiConstants.GetLatestSerialNumber);
                string newSerialNumber = "MESN00001";

                if (latestSerialResponse.IsSuccessStatusCode)
                {
                    var latestSerial = await latestSerialResponse.Content.ReadAsStringAsync();
                    if (!string.IsNullOrEmpty(latestSerial))
                    {
                        // Extract the number part
                        if (int.TryParse(latestSerial.Substring(4), out int latestNumber))
                        {
                            int nextNumber = latestNumber + 1;
                            newSerialNumber = $"MESN{nextNumber:D5}"; // format with leading zeros
                        }
                    }
                }

                using var stream = selectedPdfFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                uploadedFileBytes = ms.ToArray();
                fileName = selectedPdfFile.Name;

                uploadedFileDto = new SalesAttachedFileDto
                    {
                        SerialNumber = newSerialNumber,
                        File = new List<FiledataDto>
                {
                    new FiledataDto
                    {
                        Data = uploadedFileBytes,
                        SalesAttachedFileId = 0
                    }
                }
                    };

                var jsonData = Newtonsoft.Json.JsonConvert.SerializeObject(uploadedFileDto);

                var content = new StringContent(jsonData, Encoding.UTF8, "application/json");
                HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
                var response = await HttpClient.PostAsync(ApiConstants.AddSalesAttachedFile, content);

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Production Order File uploaded successfully.", Severity.Success);
                    isFileAttached = true;
                    StateHasChanged();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    Snackbar.Add($"Upload failed: {error}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Only PDF files are allowed.", Severity.Error);
        }

        StateHasChanged();
    }

    private async Task ClearAll()
    {
        CustomerName = string.Empty;
        SelectedWorkCenters = string.Empty;
        WorkOrder = string.Empty;
        SalesOrderNumber = null;
        MatNumber = null;
        SelectedPriority = string.Empty;
        uploadedFileDto = null;
        uploadedFileBytes = null;
        selectedPdfFile = null;
        fileName = string.Empty;
        isFileAttached = false;
        fromDate = DateTime.Now;
        PlannedHours = null;
        SelectedWorkCenters = null;
        plannedHours = null;
        Hours = 0;
        Minutes = 0;
        Hours = 0;
        Minutes = 0;
        plannedHours = $"{Hours:D2}:{Minutes:D2}"; // This will now be "00:00"



        StateHasChanged();
    }

}
