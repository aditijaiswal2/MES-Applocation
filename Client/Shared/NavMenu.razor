@using MES.Client.Pages.Account
@using MES.Shared.Entities;
@using static MES.Client.Pages.LoginVC;

@inject NavigationManager NavManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@inherits BaseAuthentication

<MudNavMenu Class="mud-width-full custom-navmenu">

    <MudText Typo="Typo.body2" Class="custom-navlink">Kent Manufacturing Execution System</MudText>
    <MudDivider Class="my-2" />

    @if (UserData == null)
    {
        <p>Loading...</p>  <!-- Prevents UI from rendering before data loads -->
    }
    else if (BaseAuthentication.IsAuthenticated == false)
    {
        <MudNavLink Href="/aep"></MudNavLink>
    }
    else if (UserData != null)
    {
        foreach (var route in UserData.Router)
        {
            if (route != "/rii" && route != "/adduser" && route != "/wc" && route != "/rsales" && route != "/rps" && route != "/rg" && route != "/rfi" && route != "/rwsc" && route != "/ddgr")

            @* if (route != "/uvc" && route != "/lvc" && route != "/pivc") *@
            {
                var icon = GetIconForRoute(route);
                var displayName = GetDisplayNameForRoute(route);

                <MudNavLink Href="@route" Icon="@icon" IconColor="Color.Primary" Class="custom-navlink">@displayName</MudNavLink>

            }
        }


        if (UserData.Router.Contains("/rii") || UserData.Router.Contains("/rsales") || UserData.Router.Contains("/rps") || UserData.Router.Contains("/rg") || UserData.Router.Contains("/ddgr") || UserData.Router.Contains("/rfi") || UserData.Router.Contains("/rwsc"))
        @* if (UserData.Router.Contains("/uvc") || UserData.Router.Contains("/lvc") || UserData.Router.Contains("/pivc")) *@
        {
            <MudNavGroup Title="Rotor/Feed Rolls Service" Icon="@Icons.Material.Filled.Feed" IconColor="Color.Primary" Expanded="false" Class="custom-navlink">
                @if (UserData.Router.Contains("/rii"))
                {
                    @* <MudNavLink Href="/roter" Icon="@Icons.Material.Filled.Feed" IconColor="Color.Primary" Class="custom-navlink">Rotor/Feed Rolls Service</MudNavLink> *@
                    <MudNavLink Href="/rii" Icon="@Icons.Material.Filled.BrandingWatermark" IconColor="Color.Primary" Class="custom-navlink">Incoming Inspection</MudNavLink>
                }
                @if (UserData.Router.Contains("/rsales"))
                {
                    <MudNavLink Href="/rsales" Icon="@Icons.Material.Filled.Dashboard" IconColor="Color.Primary" Class="custom-navlink">Sales</MudNavLink>
                }  @if (UserData.Router.Contains("/rps"))
                {
                    <MudNavLink Href="/rps" Icon="@Icons.Material.Filled.ProductionQuantityLimits" IconColor="Color.Primary" Class="custom-navlink">Production Scheduling</MudNavLink>
                }
                @if (UserData.Router.Contains("/rg"))
                {
                    <MudNavLink Href="/rg" Icon="@Icons.Material.Filled.GridOn" IconColor="Color.Primary" Class="custom-navlink">Grinding</MudNavLink>
                }
                @if (UserData.Router.Contains("/ddgr"))
                {
                    <MudNavLink Href="/ddgr" Icon="@Icons.Material.Filled.AutoAwesomeMosaic" IconColor="Color.Primary" Class="custom-navlink">Damage During Grinding</MudNavLink>
                }
               
                @if (UserData.Router.Contains("/rfi"))
                {
                    <MudNavLink Href="/rfi" Icon="@Icons.Material.Filled.Dehaze" IconColor="Color.Primary" Class="custom-navlink">Final Inspection</MudNavLink>
                }
                @if (UserData.Router.Contains("/rwsc"))
                {
                    <MudNavLink Href="/rwsc" Icon="@Icons.Material.Filled.ClearAll" IconColor="Color.Primary" Class="custom-navlink">Waiting For Sales Clearance</MudNavLink>
                }
            </MudNavGroup>
        }


        if (UserData.Router.Contains("/adduser") || UserData.Router.Contains("/wc"))
        {

            <MudNavGroup Title="Settings" Icon="@Icons.Material.Filled.Settings" IconColor="Color.Primary" Expanded="false" Class="custom-navlink">

                @if (UserData.Router.Contains("/adduser"))
                {
                    <MudNavLink Href="/adduser" Icon="@Icons.Material.Filled.People" IconColor="Color.Primary" Class="custom-navlink">Manage Users</MudNavLink>
                }

                @if (UserData.Router.Contains("/wc"))
                {
                    <MudNavLink Href="/wc" Icon="@Icons.Material.Filled.BusinessCenter" IconColor="Color.Primary" Class="custom-navlink">Manage Workcenters</MudNavLink>
                }
            </MudNavGroup>
        }
    }
</MudNavMenu>

<style>
    .custom-navmenu {
        overflow-y: auto;
        padding-top: 0rem;
    }

    .custom-navlink {
        font-size: 1rem; /* Default font size */
        --mud-icon-size: 24px; /* Default icon size */
    }

</style>

@code {
    public UserPagesAndRouter? UserData { get; set; }

    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        UserData = await localStorage.GetItemAsync<UserPagesAndRouter>("UserData");

        if (UserData != null)
        {
            BaseAuthentication.IsAuthenticated = true;
        }

        isLoading = false;
        StateHasChanged();
    }

    private string GetIconForRoute(string route)
    {
        switch (route)
        {

            case "/rec":
                return Icons.Material.Outlined.AssignmentReturned;
            case "/wc":
                return Icons.Material.Filled.BusinessCenter;
            case "/rii":
                return Icons.Material.Filled.BrandingWatermark;
            case "/rsales":
                return Icons.Material.Filled.Dashboard;
            case "/rps":
                return Icons.Material.Filled.ProductionQuantityLimits;

            case "/rg":
                return Icons.Material.Filled.GridOn;
            case "/ddgr":
                return Icons.Material.Filled.AutoAwesomeMosaic;
            case "/rfi":
                return Icons.Material.Filled.Dehaze;
            case "/rwsc":
                return Icons.Material.Filled.ClearAll;
         
           
            default:
                return "";
        }
    }

    private string GetDisplayNameForRoute(string route)
    {
        switch (route)
        {

            case "/rec":
                return "Receiving";

            case "/wc":
                return "Manage Workcenters";

            case "/rii":
                return "Rotors Incoming Inspection";

            case "/rsales":
                return "Rotors Sales";

            case "/rps":
                return "Rotors Production Scheduling";

            case "/rg":
                return "Rotors Grinding";

            case "/ddgr":
                return "Damage During Grinding";

            case "/rfi":
                return "Rotors Final Inspection";

            case "/rwsc":
                return "Rotors Waiting For Sales Clearance";

            default:
                return "";
        }
    }
}



