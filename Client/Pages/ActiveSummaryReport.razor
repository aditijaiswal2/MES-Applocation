@page "/asr"
@using MES.Shared.Models
@using MES.Client.Utitlity
@using MES.Shared.Models.Rotors
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject IJSRuntime jsRuntime

<MudContainer Fixed="true">
    <MudGrid Class="d-flex">
        <MudItem md="12" sm="12" xs="12">
            <div style="margin-top:20px">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.DownloadForOffline" Size="Size.Small" Color="Color.Primary" OnClick="@Downloadreport">Download Report</MudButton>
            </div>
        </MudItem>
        <MudItem md="12" sm="12" xs="12">
            <div style="max-height: 500px; max-width:100%; overflow-y: scroll; padding-bottom:30px;">
                <div class="table-container">
                    <MudTable Items="@combinedData" Class="table table-bordered table-striped">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6"></MudText>
                            <MudSpacer />
                            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.End"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" @onkeydown="HandleKeyDown"></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh Style="text-align:center">Report Number</MudTh>
                            <MudTh Style="text-align:center">Customer</MudTh>
                            <MudTh Style="text-align:center">Rotors/Feed rolls Number</MudTh>
                            <MudTh Style="text-align:center">Type</MudTh>
                            <MudTh Style="text-align:center">Rotors Categorize</MudTh>
                            <MudTh Style="text-align:center">Current Location</MudTh>
                            <MudTh Style="text-align:center">Received Date</MudTh>
                            <MudTh Style="text-align:center">Days in Plant</MudTh>
                        </HeaderContent>

                        <RowTemplate>
                            <MudTd Style="text-align:center">@context.SerialNumber</MudTd>
                            <MudTd Style="text-align:center">@context.Customer</MudTd>
                            <MudTd Style="text-align:center">@context.RotorNumber</MudTd>
                            <MudTd Style="text-align:center">@context.Type</MudTd>
                            <MudTd Style="text-align:center">@context.Categorize</MudTd>
                            <MudTd Style="text-align:center">@context.CurrentLocation</MudTd>
                            <MudTd Style="text-align:center">@context.Date</MudTd>
                            <MudTd Style="text-align:center">@((DateTime.Now - context.Date).Days)</MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { int.MaxValue, 100, 50, 10, 5}" />
                        </PagerContent>
                    </MudTable>
                </div>
            </div>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<ReceivingInspectionViewModel> combinedData = new();
    private IEnumerable<Receiving> iTSLocations = new List<Receiving>();
    private IEnumerable<IncomingInspection> inspection = new List<IncomingInspection>();
    private IEnumerable<NewRotorData> NewRotor = new List<NewRotorData>();
    private IEnumerable<RotorSalesClearance> SalesClearances = new List<RotorSalesClearance>();
    private IEnumerable<RotorDamageGrindingDataFromGrinding> GrindingDataFromGrinding = new List<RotorDamageGrindingDataFromGrinding>();
    private IEnumerable<RotorDamageGrindingSaveData> GrindingSaveData = new List<RotorDamageGrindingSaveData>();
    private IEnumerable<RotorDamageGrindingSubmitedData> GrindingSubmitedData = new List<RotorDamageGrindingSubmitedData>();
    private IEnumerable<RotorGrindingData> RotorGrindingData = new List<RotorGrindingData>();
    private IEnumerable<RotorGrindingSavedData> RotorGrindingSavedData = new List<RotorGrindingSavedData>();
    private IEnumerable<RotorIncominInspectionSavedData> RotorIncominInspectionSavedData = new List<RotorIncominInspectionSavedData>();
    private IEnumerable<RotorProductionSavedData> RotorProductionSavedData = new List<RotorProductionSavedData>();
    private IEnumerable<RotorProductionData> RotorProductionData = new List<RotorProductionData>();
    private IEnumerable<RotorSalesData> RotorSalesData = new List<RotorSalesData>();
    private IEnumerable<RotorsFinalInspection> RotorsFinalInspection = new List<RotorsFinalInspection>();
    private IEnumerable<RotorShipping> RotorShipping = new List<RotorShipping>();

    private string searchString1 = "";


    protected override async Task OnInitializedAsync()
    {
        await LoadLocations();
    }

    private async Task LoadLocations()
    {
        Snackbar.Clear();

        try
        {

            var receivingResponse = await HttpClient.GetAsync(ApiConstants.GetReceiving);
            var inspectionResponse = await HttpClient.GetAsync(ApiConstants.GetRotorIncoming); // add this

            if (receivingResponse.IsSuccessStatusCode && inspectionResponse.IsSuccessStatusCode)
            {


                var receivingJson = await receivingResponse.Content.ReadAsStringAsync();
                var inspectionJson = await inspectionResponse.Content.ReadAsStringAsync();

                var receivingList = System.Text.Json.JsonSerializer.Deserialize<List<Receiving>>(receivingJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                var inspectionList = System.Text.Json.JsonSerializer.Deserialize<List<IncomingInspection>>(inspectionJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });



                if (receivingList != null && inspectionList != null)
                {

                    var combinedData = await Task.WhenAll(receivingList.Select(async receiving =>
       {
           var matchingInspection = inspectionList.FirstOrDefault(i => i.SerialNumber == receiving.SerialNumber);
           var serial = receiving.SerialNumber;
           var currentLocation = await GetCurrentLocation(serial);

           return new ReceivingInspectionViewModel
               {
                   SerialNumber = receiving.SerialNumber,
                   Customer = matchingInspection?.Customer,
                   RotorNumber = matchingInspection?.RotorsNumber,
                   Type = matchingInspection?.RotorCategorization,
                   Categorize = matchingInspection?.ComponentType,
                   CurrentLocation = currentLocation,
                   Date = receiving.Date,
               // InspectionStatus = matchingInspection?.Status,
               // InspectorName = matchingInspection?.InspectorName
               };
       }));
                    this.combinedData = combinedData.ToList();

                    // If needed as List<ReceivingInspectionViewModel>
                    //  var combinedList = combinedData.ToList();

                }
            }
            else
            {
                Snackbar.Add("Failed to load data.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task<string> GetCurrentLocation(string? serial)
    {
        var receivingTask = HttpClient.GetAsync(ApiConstants.GetReceiving);
        var inspectionTask = HttpClient.GetAsync(ApiConstants.GetRotorIncoming);
        var shippingTask = HttpClient.GetAsync(ApiConstants.GetAllShippedData);
        var finalInspectionTask = HttpClient.GetAsync(ApiConstants.GetAllFinalInspectionData);
        var salesDataTask = HttpClient.GetAsync(ApiConstants.GetAllSalesData);
        var salesClearanceTask = HttpClient.GetAsync(ApiConstants.GetAllSalesClearanceData);
        var productionSavedTask = HttpClient.GetAsync(ApiConstants.GetAllProductionData);
        var grindingSavedTask = HttpClient.GetAsync(ApiConstants.GetAllGrindingData);
        var productionDataTask = HttpClient.GetAsync(ApiConstants.GetAllProductionSavesData);
        var damageGrindingTask = HttpClient.GetAsync(ApiConstants.GetAllMovedOOPGrindingData);
        var damageGrindingSaveTask = HttpClient.GetAsync(ApiConstants.GetAllSaveGrindingData);

        await Task.WhenAll(
            receivingTask, inspectionTask, shippingTask, finalInspectionTask, salesDataTask,
            salesClearanceTask, productionSavedTask, grindingSavedTask, productionDataTask,
            damageGrindingTask, damageGrindingSaveTask
        );

        // Helper function to safely read JSON and deserialize to list
        async Task<List<T>> ReadListAsync<T>(Task<HttpResponseMessage> task)
        {
            try
            {
                var response = await task;
                if (response.IsSuccessStatusCode)
                {
                    var json = await response.Content.ReadAsStringAsync();
                    return JsonSerializer.Deserialize<List<T>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<T>();
                }
            }
            catch { }
            return new List<T>();
        }

        // Deserialize all lists safely
        var receivingList = await ReadListAsync<Receiving>(receivingTask);
        var inspectionList = await ReadListAsync<IncomingInspection>(inspectionTask);
        var rotorShippingList = await ReadListAsync<RotorShipping>(shippingTask);
        var finalInspectionList = await ReadListAsync<RotorsFinalInspection>(finalInspectionTask);
        var salesDataList = await ReadListAsync<RotorSalesData>(salesDataTask);
        var salesClearanceList = await ReadListAsync<RotorSalesClearance>(salesClearanceTask);
        var productionSavedList = await ReadListAsync<RotorProductionData>(productionSavedTask);
        var grindingSavedList = await ReadListAsync<RotorGrindingSavedData>(grindingSavedTask);
        var productionDataList = await ReadListAsync<RotorProductionSavedData>(productionDataTask);
        var damageGrindingList = await ReadListAsync<RotorDamageGrindingDataFromGrinding>(damageGrindingTask);
        var damageGrindingSaveList = await ReadListAsync<RotorDamageGrindingSaveData>(damageGrindingSaveTask);

        serial = serial?.Trim().ToUpper();

        if (rotorShippingList.Any(x => x.SerialNumber?.Trim().ToUpper() == serial)) return "Shipped";
        if (salesClearanceList.Any(x => x.SerialNumber?.Trim().ToUpper() == serial)) return "Shipping";
        if (finalInspectionList.Any(x => x.SerialNumber?.Trim().ToUpper() == serial)) return "Ready To Close";

        var latestDamageEntry = damageGrindingSaveList
            .Where(x => x.SerialNumber?.Trim().ToUpper() == serial)
            .OrderByDescending(x => x.DamageGrindingSavedDate)
            .FirstOrDefault();

        if (latestDamageEntry != null)
        {
            var status = latestDamageEntry.AdvancedSharpingStatus?.Trim();
            if (string.Equals(status, "Welding", StringComparison.OrdinalIgnoreCase)) return "Damage Grinding - Welding";
            if (string.Equals(status, "Chroming", StringComparison.OrdinalIgnoreCase)) return "Damage Grinding - Chroming";
            if (string.Equals(status, "Other Operations", StringComparison.OrdinalIgnoreCase)) return "Damage Grinding - Other Operations";
        }

        if (grindingSavedList.Any(x => x.SerialNumber?.Trim().ToUpper() == serial)) return "Final Inspection";
        if (damageGrindingList.Any(x => x.SerialNumber?.Trim().ToUpper() == serial)) return "Damage Grinding";
        if (productionSavedList.Any(x => x.SerialNumber?.Trim().ToUpper() == serial)) return "Grinding";

        var latestProdEntry = productionDataList
            .Where(x => x.SerialNumber?.Trim().ToUpper() == serial)
            .OrderByDescending(x => x.ProductionSavedDate)
            .FirstOrDefault();

        if (latestProdEntry != null)
        {
            var status = latestProdEntry.AdvancedSharpingStatus?.Trim();
            if (string.Equals(status, "Welding", StringComparison.OrdinalIgnoreCase)) return "Production - Welding";
            if (string.Equals(status, "Chroming", StringComparison.OrdinalIgnoreCase)) return "Production - Chroming";
            if (string.Equals(status, "Other Operations", StringComparison.OrdinalIgnoreCase)) return "Production - Other Operations";
        }

        if (salesDataList.Any(x => x.SerialNumber?.Trim().ToUpper() == serial)) return "Production";
        if (inspectionList.Any(x => x.SerialNumber?.Trim().ToUpper() == serial)) return "Sales";
        if (receivingList.Any(x => x.SerialNumber?.Trim().ToUpper() == serial)) return "Incoming Inspection";

        return "Unknown";
    }



    async Task Downloadreport()
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync(ApiConstants.GetReportinexcel, combinedData);

            if (response.IsSuccessStatusCode)
            {
                var fileBytes = await response.Content.ReadAsByteArrayAsync();
                var fileName = "Active_Summary_Report.xlsx";

                var base64 = Convert.ToBase64String(fileBytes);
                var mime = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";

                await jsRuntime.InvokeVoidAsync("downloadFile", fileName, base64, mime);
            }
            else
            {
                Snackbar.Add("Failed to download report.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }


    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadLocations();
        }
    }

    public class ReceivingInspectionViewModel
    {
        public string? SerialNumber { get; set; }
        public string? Customer { get; set; }
        public string? RotorNumber { get; set; }
        public string? Type { get; set; }
        public string? Categorize { get; set; }
        public string? CurrentLocation { get; set; }
        public DateTime Date { get; set; }
        public int DaysInPlant => (DateTime.Now - Date).Days;

        // Extra fields from IncomingInspection
        public string? InspectionStatus { get; set; }
        public string? InspectorName { get; set; }
    }


}
