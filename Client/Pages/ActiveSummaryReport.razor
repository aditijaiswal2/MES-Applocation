@page "/asr"
@using MES.Shared.Models
@using MES.Client.Utitlity
@using MES.Shared.Models.Rotors
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject IJSRuntime jsRuntime

<MudContainer Fixed="true">
    <MudGrid Class="d-flex">
        <MudItem md="12" sm="12" xs="12">
            <div style="margin-top:20px">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.DownloadForOffline" Size="Size.Small" Color="Color.Primary" OnClick="@DownloadReport">
                    Download Report
                </MudButton>
            </div>
        </MudItem>
        <MudItem md="12" sm="12" xs="12">
            <div style="max-height: 500px; max-width:100%; padding-bottom:30px;">
                <div class="table-container">
                    <MudTable Items="@combinedData.Where(x =>
    !string.Equals(x.CurrentLocation, "Shipped", StringComparison.OrdinalIgnoreCase) && !string.Equals(x.Type, "Scrap", StringComparison.OrdinalIgnoreCase))"
                              FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ? "400px" : "")"
                              Class="table table-bordered table-striped"
                              Filter="new Func<ReceivingInspectionViewModel, bool>(FilterFunc1)">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6"></MudText>
                            <MudSpacer />
                            <MudTextField @bind-Value="searchString1" Placeholder="Search by Rotor Number" Adornment="Adornment.End"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" @onkeydown="HandleKeyDown" />
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh Style="text-align:center">Report Number</MudTh>
                            <MudTh Style="text-align:center">Customer</MudTh>
                            <MudTh Style="text-align:center">Customer Priority</MudTh>
                            <MudTh Style="text-align:center">Rotors/Feed rolls Number</MudTh>
                            <MudTh Style="text-align:center">Type</MudTh>
                            <MudTh Style="text-align:center">Rotors Categorize</MudTh>
                            <MudTh Style="text-align:center">Current Location</MudTh>
                            <MudTh Style="text-align:center">Received Date</MudTh>
                            <MudTh Style="text-align:center">Days in Plant</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd Style="text-align:center">@context.SerialNumber</MudTd>
                            <MudTd Style="text-align:center">@context.Customer</MudTd>
                            <MudTd Style="text-align:center">@context.CustomerPriority</MudTd>
                            <MudTd Style="text-align:center">@context.RotorNumber</MudTd>
                            <MudTd Style="text-align:center">@context.Type</MudTd>
                            <MudTd Style="text-align:center">@context.Categorize</MudTd>
                            <MudTd Style="text-align:center">@context.CurrentLocation</MudTd>
                            <MudTd Style="text-align:center">@context.Date.ToShortDateString()</MudTd>
                            <MudTd Style="text-align:center">@((DateTime.Now - context.Date).Days)</MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { int.MaxValue, 100, 50, 10, 5}" />
                        </PagerContent>
                    </MudTable>
                </div>
            </div>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    // Combined data displayed in the table
    private List<ReceivingInspectionViewModel> combinedData = new();

    // Raw data cached to avoid repetitive calls
    private List<Receiving> receivingList = new();
    private List<IncomingInspection> inspectionList = new();
    private List<RotorSalesData> salesDataList = new();
    private List<NewRotorData> newRotorList = new();
    private List<RotorsFinalInspection> finalInspectionList = new();
    private List<RotorSalesClearance> salesClearanceList = new();
    private List<RotorProductionData> productionSavedList = new();
    private List<RotorGrindingSavedData> grindingSavedList = new();
    private List<RotorProductionSavedData> productionDataList = new();
    private List<RotorDamageGrindingDataFromGrinding> damageGrindingList = new();
    private List<RotorDamageGrindingSaveData> damageGrindingSaveList = new();
    private List<NewRotorData> NewRotorDatas = new();
    private List<RotorShipping> shippingDataList = new();

    private string searchString1 = "";
    private bool fixed_header = true;
    private bool fixed_footer = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadAllDataAsync();
        BuildCombinedData();
    }

    // Load all data once from APIs and cache it
    private async Task LoadAllDataAsync()
    {
        Snackbar.Clear();
        try
        {
            var tasks = new List<Task<HttpResponseMessage>>
            {
                HttpClient.GetAsync(ApiConstants.GetReceiving),
                HttpClient.GetAsync(ApiConstants.GetRotorIncoming),
                HttpClient.GetAsync(ApiConstants.GetAllSalesData),
                HttpClient.GetAsync(ApiConstants.GetAllNewRotorData),
                HttpClient.GetAsync(ApiConstants.GetAllFinalInspectionData),
                HttpClient.GetAsync(ApiConstants.GetAllSalesClearanceData),
                HttpClient.GetAsync(ApiConstants.GetAllProductionData),
                HttpClient.GetAsync(ApiConstants.GetAllGrindingData),
                HttpClient.GetAsync(ApiConstants.GetAllProductionSavesData),
                HttpClient.GetAsync(ApiConstants.GetAllMovedOOPGrindingData),
                HttpClient.GetAsync(ApiConstants.GetAllSaveGrindingData),
                HttpClient.GetAsync(ApiConstants.GetAllShippedData),
            };

            await Task.WhenAll(tasks);

            // Helper local method to deserialize safely
            async Task<List<T>> ReadListAsync<T>(Task<HttpResponseMessage> task)
            {
                try
                {
                    var response = await task;
                    if (response.IsSuccessStatusCode)
                    {
                        var json = await response.Content.ReadAsStringAsync();
                        return JsonSerializer.Deserialize<List<T>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<T>();
                    }
                }
                catch
                {
                    // Log or handle error here if needed
                }
                return new List<T>();
            }

            receivingList = await ReadListAsync<Receiving>(tasks[0]);
            inspectionList = await ReadListAsync<IncomingInspection>(tasks[1]);
            salesDataList = await ReadListAsync<RotorSalesData>(tasks[2]);
            newRotorList = await ReadListAsync<NewRotorData>(tasks[3]);
            finalInspectionList = await ReadListAsync<RotorsFinalInspection>(tasks[4]);
            salesClearanceList = await ReadListAsync<RotorSalesClearance>(tasks[5]);
            productionSavedList = await ReadListAsync<RotorProductionData>(tasks[6]);
            grindingSavedList = await ReadListAsync<RotorGrindingSavedData>(tasks[7]);
            productionDataList = await ReadListAsync<RotorProductionSavedData>(tasks[8]);
            damageGrindingList = await ReadListAsync<RotorDamageGrindingDataFromGrinding>(tasks[9]);
            damageGrindingSaveList = await ReadListAsync<RotorDamageGrindingSaveData>(tasks[10]);
            shippingDataList = await ReadListAsync<RotorShipping>(tasks[11]);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
    }

    // Combine data and determine location once from cached data
    private void BuildCombinedData()
    {
        var list = new List<ReceivingInspectionViewModel>();

        // Combine Receiving + Inspection + Sales and get current location
        foreach (var receiving in receivingList)
        {
            var serial = receiving.SerialNumber?.Trim().ToUpper() ?? "";

            var matchingInspection = inspectionList.FirstOrDefault(i => i.SerialNumber?.Trim().ToUpper() == serial);
            var matchingSales = salesDataList.FirstOrDefault(i => i.SerialNumber?.Trim().ToUpper() == serial);

            var location = GetCurrentLocation(serial);

            list.Add(new ReceivingInspectionViewModel
                {
                    SerialNumber = receiving.SerialNumber,
                    Customer = matchingInspection?.Customer,
                    CustomerPriority = matchingSales?.CustomerImportance,
                    RotorNumber = matchingInspection?.RotorsNumber,
                    Type = matchingInspection?.RotorCategorization,
                    Categorize = matchingInspection?.ComponentType,
                    CurrentLocation = location,
                    Date = receiving.Date,
                });
        }

        // Add New Rotor data where not already in receivingList
        var newRotorsOnly = newRotorList.Where(n => !receivingList.Any(r => string.Equals(r.SerialNumber?.Trim(), n.SerialNumber?.Trim(), StringComparison.OrdinalIgnoreCase)));

        foreach (var n in newRotorsOnly)
        {
            var serial = n.SerialNumber?.Trim().ToUpper() ?? "";
            var location = GetCurrentLocation(serial);

            list.Add(new ReceivingInspectionViewModel
                {
                    SerialNumber = n.SerialNumber,
                    Customer = n.CustomerName,
                    CustomerPriority = n.CustomerImportance,
                    RotorNumber = n.RotorsNumber,
                    Type = "Rotors",
                    Categorize = n.ComponentType,
                    CurrentLocation = location,
                    Date = n.NewRotorDataSubmitDate.GetValueOrDefault()
                });
        }

        // Sort descending by date
        combinedData = list.OrderByDescending(x => x.Date).ToList();
    }

    // Determine the current location for the serial number by searching various lists
    private string GetCurrentLocation(string serial)
    {
        if (string.IsNullOrWhiteSpace(serial))
            return "";

        serial = serial?.Trim().ToUpper();
        if (shippingDataList.Any(x => x.SerialNumber?.Trim().ToUpper() == serial)) return "Shipped";

        if (salesClearanceList.Any(x => x.SerialNumber?.Trim().ToUpper() == serial)) return "Shipping";
        if (finalInspectionList.Any(x => x.SerialNumber?.Trim().ToUpper() == serial)) return "Ready To Close";

        var latestDamageEntry = damageGrindingSaveList
            .Where(x => x.SerialNumber?.Trim().ToUpper() == serial)
            .OrderByDescending(x => x.DamageGrindingSavedDate)
            .FirstOrDefault();

        if (latestDamageEntry != null)
        {
            var status = latestDamageEntry.AdvancedSharpingStatus?.Trim();
            if (string.Equals(status, "Welding", StringComparison.OrdinalIgnoreCase)) return "Damage Grinding - Welding";
            if (string.Equals(status, "Chroming", StringComparison.OrdinalIgnoreCase)) return "Damage Grinding - Chroming";
            if (string.Equals(status, "Other Operations", StringComparison.OrdinalIgnoreCase)) return "Damage Grinding - Other Operations";
        }

        if (grindingSavedList.Any(x => x.SerialNumber?.Trim().ToUpper() == serial)) return "Final Inspection";
        if (newRotorList.Any(x => x.SerialNumber?.Trim().ToUpper() == serial)) return "Grinding";
        if (damageGrindingList.Any(x => x.SerialNumber?.Trim().ToUpper() == serial)) return "Damage Grinding";
        if (productionSavedList.Any(x => x.SerialNumber?.Trim().ToUpper() == serial)) return "Grinding";

        var latestProdEntry = productionDataList
            .Where(x => x.SerialNumber?.Trim().ToUpper() == serial)
            .OrderByDescending(x => x.ProductionSavedDate)
            .FirstOrDefault();

        if (latestProdEntry != null)
        {
            var status = latestProdEntry.AdvancedSharpingStatus?.Trim();
            if (string.Equals(status, "Welding", StringComparison.OrdinalIgnoreCase)) return "Production - Welding";
            if (string.Equals(status, "Chroming", StringComparison.OrdinalIgnoreCase)) return "Production - Chroming";
            if (string.Equals(status, "Other Operations", StringComparison.OrdinalIgnoreCase)) return "Production - Other Operations";
        }

        if (salesDataList.Any(x => x.SerialNumber?.Trim().ToUpper() == serial)) return "Production";
        if (inspectionList.Any(x => x.SerialNumber?.Trim().ToUpper() == serial)) return "Sales";
        if (receivingList.Any(x => x.SerialNumber?.Trim().ToUpper() == serial)) return "Incoming Inspection";

        return "Unknown";
    }


    // Filter logic for MudTable
    private bool FilterFunc1(ReceivingInspectionViewModel model)
    {
        if (string.IsNullOrWhiteSpace(searchString1))
            return true;

        var search = searchString1.Trim().ToUpper();

        return (model.SerialNumber?.ToUpper().Contains(search) ?? false)
               || (model.CurrentLocation?.ToUpper().Contains(search) ?? false)
               || (model.Customer?.ToUpper().Contains(search) ?? false)
               || (model.RotorNumber?.ToUpper().Contains(search) ?? false);
    }

    // Called when user presses Enter in search textbox
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // Optionally, you could reload data or re-filter here
            // For now, just re-trigger StateHasChanged
            StateHasChanged();
        }
    }

    async Task DownloadReport()
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync(ApiConstants.GetReportinexcel, combinedData);

            if (response.IsSuccessStatusCode)
            {
                var fileBytes = await response.Content.ReadAsByteArrayAsync();
                var fileName = "Active_Summary_Report.xlsx";

                var base64 = Convert.ToBase64String(fileBytes);
                var mime = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";

                await jsRuntime.InvokeVoidAsync("downloadFile", fileName, base64, mime);
            }
            else
            {
                Snackbar.Add("Failed to download report.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    public class ReceivingInspectionViewModel
    {
        public string? SerialNumber { get; set; }
        public string? Customer { get; set; }
        public string? CustomerPriority { get; set; }
        public string? RotorNumber { get; set; }
        public string? Type { get; set; }
        public string? Categorize { get; set; }
        public string? CurrentLocation { get; set; }
        public DateTime Date { get; set; }
        public int DaysInPlant => (DateTime.Now - Date).Days;
        public string? InspectionStatus { get; set; }
        public string? InspectorName { get; set; }
    }
}
