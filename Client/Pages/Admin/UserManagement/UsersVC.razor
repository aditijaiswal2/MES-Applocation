@page "/adduser"

@using MES.Client.Dialog
@using MES.Client.Dialog.Users;
@using MES.Client.Pages.Account;
@using MES.Client.Utitlity
@using MES.Shared.DTOs
@using MES.Shared.Models
@using MudBlazor
@using System.Collections.Generic
@using System.Text
@using MES.Shared.Entities;

@inherits BaseAuthentication

@inject IDialogService DialogService
@inject IJSRuntime jsRuntime
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject IDialogCompletionService CompletionService
 @inject IHttpClientFactory _httpClient

@if (BaseAuthentication.IsAuthenticated)
{
    <MudContainer Class="pa-2" Fixed="true" Style="height: calc(100vh);">
        <MudGrid Class="d-flex justify-content-around">
            <MudItem md="12" sm="12" xs="12" class="mt-4 ml-2">
                <MudText Typo="Typo.h6" Style="font-size: 16px;">USERS</MudText>
            </MudItem>
            <MudItem md="12" sm="12" xs="12" class="mb-2 ml-2" Style="margin-top:-10px">
                <MudItem md="11" sm="12" xs="12">
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Color="Color.Primary" OnClick="@AddUser">ADD</MudButton>
                </MudItem>
                <br />
                <div style="max-height: 500px; max-width:100%;">
                    <MudTable Items="@appUsers" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"400px":"")" Class="table table-bordered table-striped mt-2">
                        <HeaderContent>
                            <MudTh Style="text-align:center;width:150px">User Name</MudTh>
                            <MudTh Style="text-align:center;width:200px">Name</MudTh>
                            <MudTh Style="text-align:center;width:100px">User Code</MudTh>
                            <MudTh Style="text-align:center;width:200px">Email</MudTh>
                            <MudTh Style="text-align:center;width:250px">Page Privileges</MudTh>
                            <MudTh Style="text-align:center;width:250px">Work Center</MudTh>
                            <MudTh Style="text-align:center;width:200px">Email Notification</MudTh>
                            <MudTh Style="text-align:center;width:200px">Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="appUsers">
                            <MudTd Class="table-data-alignment">@appUsers.UserName</MudTd>
                            <MudTd Class="table-data-alignment">@appUsers.Name</MudTd>
                            <MudTd Class="table-data-alignment">@appUsers.UserCode</MudTd>
                            <MudTd Class="table-data-alignment">@appUsers.Email</MudTd>
                            <MudTd Class="table-data-alignment">@appUsers.PageNames</MudTd>
                            <MudTd Class="table-data-alignment">@appUsers.SelectedWorkCenter</MudTd>
                            <MudTd Class="table-data-alignment">@appUsers.IsSalesUser</MudTd>
                            <MudTd Class="table-data-alignment">
                                <MudButton StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => EditUser(appUsers))" />
                                <MudButton StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteUser(appUsers))" />
                            </MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { int.MaxValue, 100, 50, 10, 5}" />
                        </PagerContent>
                    </MudTable>
                </div>
            </MudItem>
        </MudGrid>
    </MudContainer>
}
else
{
    <AuthenticationErrorPage></AuthenticationErrorPage>
}

<style>
    .text-remove {
        color: red !important;
    }

    .table-data-alignment {
        text-align: center
    }
</style>

@code {

    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Parameter] public UserAddDto user { get; set; } = new UserAddDto();

    private IEnumerable<AppUser> appUsers = new List<AppUser>();
    public AppUser appUser { get; set; } = new AppUser();
    private IEnumerable<AppUserRole> UserRoles = new List<AppUserRole>();
    private Dictionary<int, string> userRolesDictionary = new Dictionary<int, string>();

    public bool IsCompleted { get; set; } = false;
    private int currentPage = 1;

    bool fixed_header = true;
    bool fixed_footer = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUser();
    }

    private async Task LoadUser()
    {
        try
        {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

            //var userResponse = await HttpClient.GetAsync("https://localhost:7006/api/Users/getuser");
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var userResponse = await HttpClient.GetAsync(ApiConstants.GetUser);
            if (userResponse.IsSuccessStatusCode)
            {
                var userResult = await userResponse.Content.ReadFromJsonAsync<IEnumerable<AppUser>>();
                if (userResult != null)
                {
                    appUsers = userResult.ToList().OrderByDescending(u => u.Id);

                    foreach (var user in appUsers)
                    {
                        userRolesDictionary[user.Id] = await GetUserRoles(user.Id);
                    }
                }
            }
            else
            {
                Snackbar.Add($"Failed to fetch users: {userResponse.ReasonPhrase}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error Occurred: {ex.Message}", Severity.Warning);
        }
    }

    private async Task<string> GetUserRoles(int userId)
    {
        //var userRolesResponse = await HttpClient.GetAsync($"https://localhost:7006/api/Users/getuserroles/{userId}");
        HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
        var userRolesResponse = await HttpClient.GetAsync($"{ApiConstants.GetUserRoles}/{userId}");
        if (userRolesResponse.IsSuccessStatusCode)
        {
            return await userRolesResponse.Content.ReadAsStringAsync();
        }
        return "No roles assigned";
    }


    async Task AddUser()
    {
        var options = new DialogOptions { FullWidth = true };
        var dialog = await DialogService.ShowAsync<AddUserDialog>("Delete Server", DialogSettings.DialogOptionsAddEditDelete);

        CompletionService.CompletionChanged += async (sender, args) =>
        {
            await UpdateUserDataAsync();
        };
    }

    async Task EditUser(AppUser appUser)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

        var options = new DialogOptions { FullWidth = true };

        //var roleResponse = await HttpClient.GetAsync("https://localhost:7006/api/Role/getrole");
        HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
        var roleResponse = await HttpClient.GetAsync(ApiConstants.GetRole);
        if (roleResponse.IsSuccessStatusCode)
        {
            var roles = await roleResponse.Content.ReadFromJsonAsync<IEnumerable<AppRole>>();

            //var userRolesResponse = await HttpClient.GetAsync($"https://localhost:7006/api/Users/getuserroles/{appUser.Id}");
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var userRolesResponse = await HttpClient.GetAsync($"{ApiConstants.GetUserRoles}/{appUser.Id}");
            string selectedRole = "Loading roles...";
            if (userRolesResponse.IsSuccessStatusCode)
            {
                selectedRole = await userRolesResponse.Content.ReadAsStringAsync();
            }

            var parameters = new DialogParameters<EditUserDialog>
            {
                { x => x.appUsers, appUser },
                { x => x.SelectedRole, selectedRole },
                { x => x.AppRoles, roles }
            };

            var dialog = await DialogService.ShowAsync<EditUserDialog>("Edit User", parameters, DialogSettings.DialogOptionsAddEditDelete);

            CompletionService.CompletionChanged += async (sender, args) =>
            {
                await UpdateUserDataAsync();
            };
        }
        else
        {
            Snackbar.Add($"Failed to fetch roles: {roleResponse.ReasonPhrase}", Severity.Error);
        }
    }

    async Task DeleteUser(AppUser appUser)
    {
        var options = new DialogOptions { FullWidth = true };

        //var userRolesResponse = await HttpClient.GetAsync($"https://localhost:7006/api/Users/getuserroles/{appUser.Id}");
        HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
        var userRolesResponse = await HttpClient.GetAsync($"{ApiConstants.GetUserRoles}/{appUser.Id}");
        string userRoles = "Loading roles...";
        if (userRolesResponse.IsSuccessStatusCode)
        {
            userRoles = await userRolesResponse.Content.ReadAsStringAsync();
        }

        userRolesDictionary.Remove(appUser.Id);

        var parameters = new DialogParameters<DeleteUserDialog>
        {
            { x => x.appUsers, appUser },
            { x => x.UserRoles, userRoles }
        };
        var dialog = await DialogService.ShowAsync<DeleteUserDialog>("Delete Server", parameters, DialogSettings.DialogOptionsAddEditDelete);
        CompletionService.CompletionChanged += async (sender, args) =>
        {
            await UpdateUserDataAsync();
        };
    }

    private async Task UpdateUserDataAsync()
    {
        if (CompletionService.IsCompleted)
        {
            //var userResponse = await HttpClient.GetAsync("https://localhost:7006/api/Users/getuser");
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var userResponse = await HttpClient.GetAsync(ApiConstants.GetUser);
            if (userResponse.IsSuccessStatusCode)
            {
                var userResult = await userResponse.Content.ReadFromJsonAsync<IEnumerable<AppUser>>();
                if (userResult != null)
                {
                    appUsers = userResult.ToList().OrderByDescending(u => u.Id);
                    foreach (var user in appUsers)
                    {
                        userRolesDictionary[user.Id] = await GetUserRoles(user.Id);
                    }
                    StateHasChanged();
                }
            }
        }
    }
}


