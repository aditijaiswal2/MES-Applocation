@page "/index"
@using MES.Client.Dialog.QRPrint
@using MES.Client.Dialog.Receiving
@using MES.Client.Utitlity
@using MES.Shared.DTOs
@using MES.Shared.Models

@using ReactorBlazorQRCodeScanner;
@using Microsoft.JSInterop;
@using MudBlazor;

@inject IJSRuntime JS;

@using System.Text.Json;
@using System.Text;

@using Newtonsoft.Json;
@inject IDialogService DialogService
@inject HttpClient HttpClient
@inject ISnackbar Snackbar

<MudContainer Class="pa-2">
    <MudGrid Class="d-flex justify-content-around">
        <MudItem md="12" sm="12" xs="12" Class="d-flex justify-between align-center mb-2">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add"
                       Size="Size.Small" Color="Color.Primary" OnClick="@NewReceive">
                ADD
            </MudButton>
        </MudItem>

        <MudItem md="12" sm="12" xs="12">
            <div style="max-height: 500px; max-width:100%;">
                <MudTable Items="@receiveModule" Class="table table-bordered table-striped mt-2">
                    <HeaderContent>
                        <MudTh Style="text-align:center;width:150px">Serial Number</MudTh>
                        <MudTh Style="text-align:center;width:150px">Received Date</MudTh>
                        <MudTh Style="text-align:center;width:150px">Module</MudTh>
                        <MudTh Style="text-align:center;width:200px">Action</MudTh>
                    </HeaderContent>

                    <RowTemplate Context="appUsers">
                        <MudTd Style="text-align:center;width:150px">@appUsers.SerialNumber</MudTd>
                        <MudTd Style="text-align:center;width:150px">@appUsers.Date</MudTd>
                        <MudTd Style="text-align:center;width:150px">@appUsers.SelectedOption</MudTd>

                        <MudTd Style="text-align:center;width:200px">
                            <MudButton StartIcon="@Icons.Material.Filled.QrCode" Color="Color.Tertiary"
                                       OnClick="@(() => GenerateQR(appUsers))" />
                            <MudButton StartIcon="@Icons.Material.Filled.Delete" Color="Color.Secondary"
                                       OnClick="@(() => DeleteLocation(appUsers))" />
                            <MudButton StartIcon="@Icons.Material.Filled.QrCodeScanner" Color="Color.Primary"
                                       OnClick="StartScanning" />
                        </MudTd>
                    </RowTemplate>

                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[] { 5, 10, 50, 100, int.MaxValue }" />
                    </PagerContent>
                </MudTable>
            </div>
        </MudItem>

        @* QR Scanner Section (Placed outside table for better UI) *@
        @if (isScanning)
        {
            <MudItem md="12" sm="12" xs="12" Class="d-flex justify-center align-center mt-4">
                <div style="width: 350px; height: 350px;">
                    <QRCodeScanner LoadingMessage="" />
                </div>
            </MudItem>
        }

        @if (!string.IsNullOrEmpty(qrCodeData) || cameraError)
        {
            <MudItem md="12" sm="12" xs="12" Class="d-flex justify-center align-center mt-3">
                <div class="border border-primary p-3">
                    @if (!string.IsNullOrEmpty(qrCodeData))
                    {
                        <MudText Class="d-flex justify-center align-center mb-2">Scanned QR Code Data:</MudText>
                        @foreach (var item in qrCodeData.Split(','))
                        {
                            <p style="margin: 1rem; font-size: 16px;">@item.Trim()</p>
                        }
                    }
                    else if (cameraError)
                    {
                        <MudText Color="Color.Error">Camera access was blocked. Please allow camera access to scan QR codes.</MudText>
                    }
                </div>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

                

@code {

    private IEnumerable<Receiving> receiveModule = new List<Receiving>();

    private QRCodeScannerJsInterop? _qrCodeScannerJsInterop;
    private Action<string>? _onQrCodeScanAction;
    private Action<string>? _onCameraPermissionFailedAction;
    private QRCodeScanner qrCodeScanner;

    private string qrCodeData;

    private bool isScanning;
    private bool isCancel = false;
    private bool cameraError = false;

    //private IEnumerable<ITSLocation> iTSLocations = new List<ITSLocation>();

    protected override async Task OnInitializedAsync()
    {
        await LoadUser();
    }

    private async Task LoadUser()
    {
        try
        {
            // Clear any previous messages
            Snackbar.Clear();

            // Send HTTP request to fetch data from the API
            var response = await HttpClient.GetAsync("https://localhost:7172/api/ReceivingData/getrd");

            if (response.IsSuccessStatusCode)
            {

                var locationResult = await response.Content.ReadFromJsonAsync<IEnumerable<Receiving>>();
                if (locationResult != null)
                {
                    receiveModule = locationResult.ToList().OrderByDescending(l => l.Id);
                }

            }
            else
            {
                Snackbar.Add($"Failed to fetch data: {response.ReasonPhrase}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error occurred: {ex.Message}", Severity.Warning);
        }
    }

        private async Task NewReceive()
        {
            var parameters = new DialogParameters
            {
                { "Date", DateTime.Today.ToString("yyyy-MM-dd") }, // Passing Date
                { "SerialNumber", "MES00001" }, // Passing Serial Number
               // Default selection
            };

            var dialogOptions = DialogSettings.DialogOptionsAddEditDelete; // Ensure this is properly set
            var dialog = await DialogService.ShowAsync<AddReceiveDialog>("Add New Receive", parameters, dialogOptions);
        }
    
        private async Task StartScanning()
        {
            try
            {
                isScanning = true;
                qrCodeData = null;
                cameraError = false;

                _onQrCodeScanAction = (code) => OnQrCodeScan(code);
                _onCameraPermissionFailedAction = (error) => OnCameraPermissionFailed(error);

                _qrCodeScannerJsInterop = new QRCodeScannerJsInterop(JS);
                await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction, _onCameraPermissionFailedAction);

                isCancel = true;
            }
            catch (Exception ex)
            {
                // Handle any unexpected errors
                cameraError = true;
            }

            StateHasChanged(); // Update the UI to show the camera or error message
        }

        private void StopScanning()
        {
            isScanning = false;
            isCancel = false;
            _qrCodeScannerJsInterop?.StopRecording();
            StateHasChanged();
        }

        private void OnQrCodeScan(string code)
        {
            qrCodeData = code;
            isScanning = false;
            isCancel = false;
            _qrCodeScannerJsInterop.StopRecording(); // Stop scanning
            StateHasChanged();
        }

        private void OnCameraPermissionFailed(string error)
        {
            cameraError = true;
            isScanning = false;
            isCancel = false;
            StateHasChanged();
        }


    private async Task DeleteLocation(Receiving receive)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Delete Confirmation",
            "Are you sure you want to delete this record?",
            "Yes", "No"
        );

        if (result == true)
        {
            try
            {
                var response = await HttpClient.DeleteAsync($"https://localhost:7172/api/ReceivingData/{receive.Id}");

             //   var response = await HttpClient.DeleteAsync($"https://localhost:7172/api/ReceivingData/delete/{receive.Id}");
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Record deleted successfully.", Severity.Success);
                    await LoadUser(); // Reload data after deletion
                }
                else
                {
                    Snackbar.Add($"Failed to delete: {response.ReasonPhrase}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error occurred: {ex.Message}", Severity.Error);
            }
        }
    }

    // private void GenerateQR(Receiving receive)
    // {
    //     string qrData = JsonSerializer.Serialize(receive);
    //     string qrUrl = $"https://api.qrserver.com/v1/create-qr-code/?size=200x200&data={Uri.EscapeDataString(qrData)}";

    //     Snackbar.Add($"QR Code generated: {qrUrl}", Severity.Info);
    // }





    public async Task GenerateQR(Receiving receive)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

        try
        {

            string receiveData = $"Serial Number: {receive.SerialNumber},Module: {receive.SelectedOption}, Date: {receive.Date}";


            var jsonPart = JsonConvert.SerializeObject(receive);
            var content = new StringContent(jsonPart, Encoding.UTF8, "application/json");

            // Serialize receiving data
       

          
            var response = await HttpClient.PostAsync("https://localhost:7172/api/QRCode/locQR", content);
            byte[] qrCodeBytes = null;



            if (response.IsSuccessStatusCode)
            {
                using (var stream = await response.Content.ReadAsStreamAsync())
                using (var memoryStream = new MemoryStream())
                {
                    await stream.CopyToAsync(memoryStream);
                    qrCodeBytes = memoryStream.ToArray();
                }

                // Prepare QR data for the dialog
                QrDTO receiveQr = new QrDTO()
                    {
                        SerialNumber = receive.SerialNumber,  // Match property names
                        SelectedOption = receive.SelectedOption,
                        QRData = qrCodeBytes,
                    };


                var options = new DialogOptions { FullWidth = false};
                var parameters = new DialogParameters { ["LocQR"] = receiveQr };

                // Show QR in dialog
                var dialog = await DialogService.ShowAsync<QRCodeDialog>("Show QR", parameters, options);
            }
            else
            {
                Snackbar.Add($"QR code generation failed with status code: {response.StatusCode}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error generating QR code: {ex.Message}", Severity.Error);
        }
    }

 


}