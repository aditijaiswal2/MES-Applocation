@page "/rfi"

@using MES.Client.Dialog
@using MES.Client.Utitlity
@using MES.Shared.Models
@using MES.Shared.Models.Rotors
@using ReactorBlazorQRCodeScanner
@using MES.Client.Dialog.Rotors

@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogCompletionService CompletionService
@inject IHttpClientFactory _httpClient
@inject IJSRuntime JS;

<MudContainer Style="overflow:hidden" Class="mt-5">
    <MudGrid Class="d-flex justify-center">
        @*    <MudItem md="12" sm="12" xs="12" class="d-flex flex-column align-items-center justify-content-center mb-2" style="text-align: center;">
            <MudText Typo="Typo.h6" Style="font-size: 16px;">Incoming Inspection</MudText>
        </MudItem> *@
        <MudItem md="12" sm="12" xs="12" class="d-flex flex-column align-items-center justify-content-center mb-2" style="text-align: center;">
            <div>
                <MudButton @onclick="StartScanning" Variant="Variant.Filled" Color="Color.Primary" Style="width: 100px;">Scan QR</MudButton>
                @if (isCancel)
                {
                    <MudButton @onclick="StopScanning" Variant="Variant.Filled" Color="Color.Error" Style="width: 100px; margin-left:8px;">Cancel</MudButton>
                }
            </div>
        </MudItem>
        <MudItem md="12" sm="12" xs="12" Class="d-flex justify-center align-center">
            @if (isScanning)
            {
                <div class="d-flex justify-center" style="width: 350px; height: 350px;">
                    <QRCodeScanner LoadingMessage="" />
                </div>
            }

        </MudItem>
        <MudItem md="12" sm="12" xs="12" Class="d-flex justify-center align-center">
            @if (!string.IsNullOrEmpty(qrCodeData))
            {
                <div>
                    <div class="border border-primary p-10 mt-2 d-flex flex-wrap">
                        @foreach (var item in qrCodeData.Split(','))
                        {
                            <p class="qr-item">@item.Trim()</p>
                        }
                    </div>
                   <div style="margin-top:10px">
                        <MudButton OnClick="OpenPreviewDialogBox"
                                   Class="mr-2"
                                   Color="Color.Primary"
                                   Variant="Variant.Filled">
                            Incoming Inspection Report
                        </MudButton>

                        <MudButton Class="mr-2"
                                   Color="Color.Secondary"
                                   Variant="Variant.Filled">
                            Production Order Report
                        </MudButton>
                    </div>
                   <MudCard Class="mt-4 p-4 w-100" id="printForm-section">
                            <MudCardContent>
                              
                                <MudForm Class="w-100">

                                    <MudGrid>
                                       
                                        <MudGrid Spacing="3">
                                            <MudItem xs="12" md="4" class="outlined-box pa-2">
                                                <MudTextField Label="Workcenters" @bind-Value="serialNumberData.Workcenters" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                            </MudItem>

                                            <MudItem xs="12" md="4" class="outlined-box pa-2">
                                                <MudTextField Label="Relief Land" @bind-Value="serialNumberData.ReliefLand" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                            </MudItem>

                                            <MudItem xs="12" md="4" class="outlined-box pa-2">
                                                <MudTextField Label="Tooth Face Left" @bind-Value="serialNumberData.ToothFaceLeft" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                            </MudItem>

                                        </MudGrid>

                                        <MudGrid Spacing="3">

                                            <MudItem xs="12" md="4" class="outlined-box pa-2">
                                                <MudTextField Label="Tooth Face Right" @bind-Value="serialNumberData.ToothFaceRight" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                            </MudItem>

                                            <MudItem xs="12" md="4" class="outlined-box pa-2">
                                                <MudTextField Label="Centers Left" @bind-Value="serialNumberData.CentersLeft" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                            </MudItem>

                                            <MudItem xs="12" md="4" class="outlined-box pa-2">
                                                <MudTextField Label="Centers Right" @bind-Value="serialNumberData.CentersRight" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                            </MudItem>

                                        </MudGrid>

                                        <MudGrid Spacing="3">

                                            <MudItem xs="12" md="4" class="outlined-box pa-2">
                                                <MudTextField Label="Visual Checks" @bind-Value="serialNumberData.VisualChecks" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                            </MudItem>

                                            <MudItem xs="12" md="4" class="outlined-box pa-2">
                                                <MudTextField Label="Inspected By" @bind-Value="serialNumberData.InspectedBy" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                            </MudItem>

                                            <MudItem xs="12" md="4" class="outlined-box pa-2">
                                                <MudTextField Label="Notes" @bind-Value="serialNumberData.Notes" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                            </MudItem>

                                        </MudGrid>

                                        <MudGrid Spacing="3">

                                            <MudItem xs="12" md="4" class="outlined-box pa-2">
                                                <MudTextField Label="Grinding Start Date" @bind-Value="serialNumberData.GrindingStartDate" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                            </MudItem>

                                            <MudItem xs="12" md="4" class="outlined-box pa-2">
                                                <MudTextField Label="Grinding End Date" @bind-Value="serialNumberData.GrindingdataSubmitedByDate" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                            </MudItem>

                                           @*  <MudItem xs="12" md="4" class="outlined-box pa-2">
                                                <MudTextField Label="Delay Reason Tracking" @bind-Value="FinalInspectionData.DelayReasonTracking" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                            </MudItem> *@

                                        </MudGrid>
                                       </MudGrid>
                                </MudForm>
                            </MudCardContent>
                   </MudCard>
                    </div>
              
            }
            else if (cameraError)
            {
                <MudText Color="Color.Error">Camera access was blocked. Please allow camera access to scan QR codes.</MudText>
            }
        </MudItem>
    </MudGrid>
</MudContainer>

<style>
    .bordered-container {
        width: 100%;
        max-width: 100%;
        border: 2px solid #ccc;
        border-radius: 8px;
        padding: 30px;
        margin-bottom: 16px;
        box-sizing: border-box;
    }


    .qr-item {
        margin: 1.5rem;
        font-size: 16px;
        white-space: nowrap; /* Ensures text stays in one line */
    }


    .full-width-grid {
        width: 100%;
        margin: 0;
    }

</style>

@code {


    private QRCodeScannerJsInterop? _qrCodeScannerJsInterop;
    private Action<string>? _onQrCodeScanAction;
    private Action<string>? _onCameraPermissionFailedAction;
    private QRCodeScanner qrCodeScanner;
    private string qrCodeData;
    private DateTime? fromDate = DateTime.Today; // Default to today
    private bool isScanning;
    private bool isCancel = false;
    private bool cameraError = false;
    private RotorGrindingData serialNumberData;
    private RotorsFinalInspection FinalInspectionData;
    private RotorGrindingData grinding { get; set; } = new RotorGrindingData();


    private async Task StartScanning()
    {
        try
        {
            isScanning = true;
            qrCodeData = null;
            cameraError = false;

            _onQrCodeScanAction = (code) => OnQrCodeScan(code);
            _onCameraPermissionFailedAction = (error) => OnCameraPermissionFailed(error);

            _qrCodeScannerJsInterop = new QRCodeScannerJsInterop(JS);
            await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction, _onCameraPermissionFailedAction);

            isCancel = true;
        }
        catch (Exception ex)
        {
            // Handle any unexpected errors
            cameraError = true;
        }

        StateHasChanged(); // Update the UI to show the camera or error message
    }

    private async Task OpenPreviewDialogBox()
    {

        if (!string.IsNullOrEmpty(qrCodeData))
        {
            var qrDetails = qrCodeData.Split(',');

            if (qrDetails.Length >= 3) // Ensure QR Code has expected fields
            {
                grinding.SerialNumber = ExtractValue(qrDetails[0]);
                grinding.Module = ExtractValue(qrDetails[1]);

            }
            else
            {
                Snackbar.Add("Invalid QR Code format. Please scan again.", Severity.Warning);
                return;
            }
        }
        else
        {
            Snackbar.Add("No QR code scanned. Please scan a QR code before submitting.", Severity.Warning);
            return;
        }
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                CloseButton = true,
                DisableBackdropClick = true
            };

        var parameters = new DialogParameters
            {//selectedMaterial
                ["InspectionData"] = grinding

            };

        var dialog = DialogService.Show<PreviewIncomingDialog>("INCOMING ROTOR INSPECTION", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            // handle result if needed
        }
    }

    private void StopScanning()
    {
        isScanning = false;
        isCancel = false;
        _qrCodeScannerJsInterop?.StopRecording();
        StateHasChanged();
    }

    private async void OnQrCodeScan(string code)
    {
        qrCodeData = code;
        isScanning = false;
        isCancel = false;
        _qrCodeScannerJsInterop?.StopRecording();

        // Extract the serial number (assuming format is "SerialNumber:12345,...")
        var serial = code.Split(',').FirstOrDefault(s => s.StartsWith("Serial Number:"))?.Split(':')[1];

        if (!string.IsNullOrWhiteSpace(serial))
        {
            await FetchSerialNumberData(serial.Trim());
        }

        StateHasChanged();
    }


    private async Task FetchSerialNumberData(string serial)
    {
        try
        {
            var client = _httpClient.CreateClient("MES.ServerAPI"); // Ensure "MyAPI" is configured in Program.cs
            // var response = await client.GetAsync($"https://localhost:7172/api/RotorGrinding/{serial}");
            var response = await client.GetAsync($"{ApiConstants.GetDataFromGrinding}/{serial}");

            if (response.IsSuccessStatusCode)
            {
                serialNumberData = await response.Content.ReadFromJsonAsync<RotorGrindingData>();
            }
            else
            {
                Snackbar.Add($"Serial number {serial} not found.", Severity.Warning);
                serialNumberData = null;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error fetching serial number data.", Severity.Error);
            serialNumberData = null;
        }
    }

    private string ExtractValue(string data)
    {
        var parts = data.Split(':'); // Check if the data has a label like "SerialNumber: 12345"
        return parts.Length > 1 ? parts[1].Trim() : parts[0].Trim(); // Return value without label
    }

    private void OnCameraPermissionFailed(string error)
    {
        cameraError = true;
        isScanning = false;
        isCancel = false;
        StateHasChanged();
    }

}
