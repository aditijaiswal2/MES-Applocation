@page "/rfi"

@using MES.Client.Dialog
@using MES.Client.Dialog.FinalInspectionImages
@using MES.Client.Utitlity
@using MES.Shared.Models
@using MES.Shared.Models.Rotors
@using ReactorBlazorQRCodeScanner
@using MES.Client.Dialog.Rotors
@using Newtonsoft.Json
@using System.Text
@using MES.Shared.DTOs
@using MES.Shared.DTOs.MES.Shared.DTOs.Rotors
@using static MES.Client.Pages.LoginVC
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogCompletionService CompletionService
@inject IHttpClientFactory _httpClient
@inject IJSRuntime JS;

<MudContainer Style="overflow:hidden" Class="mt-5">
    <MudGrid Class="d-flex justify-center">
        @*    <MudItem md="12" sm="12" xs="12" class="d-flex flex-column align-items-center justify-content-center mb-2" style="text-align: center;">
            <MudText Typo="Typo.h6" Style="font-size: 16px;">Incoming Inspection</MudText>
        </MudItem> *@
        <MudItem md="12" sm="12" xs="12" class="d-flex flex-column align-items-center justify-content-center mb-2" style="text-align: center;">
            <div>
                <MudButton @onclick="StartScanning" Variant="Variant.Filled" Color="Color.Primary" Style="width: 100px;">Scan QR</MudButton>
                @if (isCancel)
                {
                    <MudButton @onclick="StopScanning" Variant="Variant.Filled" Color="Color.Error" Style="width: 100px; margin-left:8px;">Cancel</MudButton>
                }
                <MudButton @onclick="OpenFinalrecord" Variant="Variant.Filled" Color="Color.Primary" Style="width: 300px; margin-left:8px;">
                    Final Inspection
                </MudButton>
            </div>
        </MudItem>

        @if (showContent)
        {
            <MudItem xs="12">
                <div class="d-flex justify-content-start mt-2">
                    <MudPaper Elevation="3" Class="pa-3" Style="width: 300px;">
                        <MudList Dense="true">
                            @{
                                var filteredList = Receivealldata
                                .Where(i => i.SerialNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                                .ToList();
                            }

                            @if (filteredList.Any())
                            {
                                foreach (var item in filteredList)
                                {
                                    <MudListItem OnClick="() => SelectReceive(item)"
                                                 Button="true"
                                                 Class="@(hoveredReceive == item ? "hover-highlight" : null)"
                                                 @onmouseover="() => hoveredReceive = item"
                                                 @onmouseout="() => hoveredReceive = null">
                                        <MudText>@item.SerialNumber - @item.Customer - @item.Module</MudText>
                                    </MudListItem>
                                }
                            }
                            else
                            {
                                <MudText Class="pa-2 text-muted">No record found</MudText>
                            }
                        </MudList>
                    </MudPaper>
                </div>
            </MudItem>

        }


        <MudItem md="12" sm="12" xs="12" Class="d-flex justify-center align-center">
            @if (isScanning)
            {
                <div class="d-flex justify-center" style="width: 350px; height: 350px;">
                    <QRCodeScanner LoadingMessage="" />
                </div>
            }

        </MudItem>


        @if (showForm )
        {

            <MudItem md="12" sm="12" xs="12" Class="d-flex justify-center align-center">

                @if ((!string.IsNullOrEmpty(qrCodeData)) || (selectedReceive != null) || (serialNumberData != null))
                {
                    <div>
                        <div class="border border-primary p-10 mt-2 d-flex flex-wrap qr-container">

                            @if (!string.IsNullOrEmpty(qrCodeData))
                            {
                                foreach (var item in qrCodeData.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                {
                                    <p class="qr-item">@item.Trim()</p>
                                }
                            }

                            else if (selectedReceive != null )
                            {
                                <p class="qr-item">Report Number: @selectedReceive.SerialNumber</p>
                                <p class="qr-item">Module: @selectedReceive.Module</p>
                                <p class="qr-item">Customer: @selectedReceive.Customer</p>
                                <p class="qr-item">Received Date: @selectedReceive.DateTime</p>

                            }

                        </div>


                        @if (!isExistingSerial  && serialNumberData != null)
                        {
                            <div style="margin-top:10px">
                                <MudButton OnClick="OpenPreviewDialogBox"
                                Class="mr-2"
                                Color="Color.Primary"
                                Variant="Variant.Filled">
                                    Incoming Inspection Report
                                </MudButton>

                                <MudButton Class="mr-2"
                                Color="Color.Secondary"
                                Variant="Variant.Filled" OnClick="ViewAttachedFile">
                                    Production Order Report
                                </MudButton>
                            </div>
                            <MudCard Class="mt-4 p-4 w-100" id="printForm-section">
                                <MudCardContent>

                                    <MudForm Class="w-100">

                                        <MudGrid>
                                            <MudGrid Spacing="3">

                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="Grinding Start Date" @bind-Value="serialNumberData.GrindingStartDate" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                                </MudItem>

                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="Grinding End Date" @bind-Value="serialNumberData.GrindingdataSubmitedByDate" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                                </MudItem>
                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="Relief Land" @bind-Value="serialNumberData.ReliefLand" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                                </MudItem>

                                            </MudGrid>

                                            <MudGrid Spacing="3">

                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="Rotors Dia Left" @bind-Value="serialNumberData.RotorsDiaLeft" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                                </MudItem>

                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="Rotors Dia Right" @bind-Value="serialNumberData.RotorsDiaRight" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                                </MudItem>


                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="Visual Checks" @bind-Value="serialNumberData.VisualChecks" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                                </MudItem>

                                            </MudGrid>
                                            <MudGrid Spacing="3">

                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="Tooth Face Left" @bind-Value="serialNumberData.ToothFaceLeft" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                                </MudItem>

                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="Tooth Face Right" @bind-Value="serialNumberData.ToothFaceRight" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                                </MudItem>
                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="Delay Reason Tracking" @bind-Value="serialNumberData.DelayReasonTracking" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                                </MudItem>

                                            </MudGrid>

                                            <MudGrid Spacing="3">


                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="Inspected By" @bind-Value=" FinalInspectionData.Inspected" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                                </MudItem>
                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="Notes" @bind-Value="serialNumberData.Notes" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                                </MudItem>

                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="Sales Order" @bind-Value="serialNumberData.SalesOrderNumber" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                                </MudItem>

                                            </MudGrid>


                                            <MudGrid Spacing="3">

                                              
                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="Material" @bind-Value="serialNumberData.Materials" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                                </MudItem>

                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="Customer" @bind-Value="serialNumberData.Customer" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                                </MudItem>
                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="Customer PO Number" @bind-Value="FinalInspectionData.CustomerPoNum" FullWidth="true" Variant="Variant.Outlined" />
                                                </MudItem>
                                            </MudGrid>

                                            <MudGrid Spacing="3">


                                               
                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="Dwg Number" @bind-Value="FinalInspectionData.DWGNum" FullWidth="true" Variant="Variant.Outlined" Required />
                                                </MudItem>

                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="Rotors Serial Number" @bind-Value="serialNumberData.RotorsNumber" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                                </MudItem>

                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="New Rotors Serial Number" @bind-Value="FinalInspectionData.AGNum" FullWidth="true" Variant="Variant.Outlined" Required />
                                                </MudItem>
                                            </MudGrid>
                                            <MudGrid Spacing="3">
                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="Description" @bind-Value="FinalInspectionData.Description" FullWidth="true" Variant="Variant.Outlined" />
                                                </MudItem>
                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="Special notes / comments" @bind-Value="FinalInspectionData.SpecialNoteComment" FullWidth="true" Variant="Variant.Outlined" />
                                                </MudItem>
                                             

                                                <MudItem xs="12" md="4">
                                                    <MudSelect T="string" ValueChanged="OnDressedwithNewBearing" Label="Dressed With New Bearings" Variant="Variant.Outlined" Value="selectedDressedwithNewBearing" ValueExpression="() => selectedDressedwithNewBearing" FullWidth="true" Class="custom-select">
                                                        @foreach (var ber in DressedwithNewBearing)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }

                                                    </MudSelect>
                                                </MudItem>



                                           

                                            </MudGrid>

                                            <MudGrid Class="full-width-grid">
                                                <MudItem xs="12" style="text-align: center; width: 100%;">
                                                    <MudItem md="12" sm="12" xs="12" Class="d-flex justify-center">
                                                        <div style="border: 2px dotted gray; padding: 10px; text-align: center; width: 250px; height: auto">
                                                            <p>Add images</p>

                                                            <!-- Add Button -->
                                                            <MudItem>
                                                                <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(async () => await AddProjectImagesAsync(new ProjectImgDTO {
                                                            SerialNumber = SelectedProject
                                                        }))">
                                                                    Add
                                                                </MudButton>
                                                            </MudItem>

                                                            <!-- Image Preview -->
                                                            @if (selectedImagesFromSM.Any())
                                                            {
                                                                <div style="margin-top:10px;">
                                                                    <p><b>Total Images:</b> @selectedImagesFromSM.SelectMany(x => x.Images).Count()</p>
                                                                    <!-- You can show the images here too -->
                                                                </div>
                                                            }

                                                        </div>
                                                    </MudItem>
                                                </MudItem>
                                            </MudGrid>
                                            <MudGrid Class="full-width-grid">
                                                <MudItem xs="12" style="text-align: center; width: 100%;">
                                                    <MudItem md="12" sm="12" xs="12" Class="d-flex justify-center">
                                                        <div style=" padding: 10px; text-align: center; width: auto; height: auto">
                                                            <MudTable T="RotorsFinalInspection" Items="@tableData" Elevation="1" Class="my-centered-table">
                                                                <HeaderContent>
                                                                    <MudTh class="text-center">Description</MudTh>
                                                                    <MudTh class="text-center">Start</MudTh>
                                                                    <MudTh class="text-center">Finish</MudTh>

                                                                </HeaderContent>
                                                                <RowTemplate>
                                                                    <MudTd DataLabel="Description" class="text-center">
                                                                        <MudTextField T="string" Label="Flute Diameter" ReadOnly />
                                                                        <MudTextField T="string" Label="Land Width" ReadOnly />
                                                                        <MudTextField T="string" Label="Relief Angle" ReadOnly />

                                                                    </MudTd>
                                                                    <MudTd DataLabel="Start" class="text-center">
                                                                        <MudTextField @bind-Value="serialNumberData.RotorsDia" ReadOnly />
                                                                        <MudTextField @bind-Value="FinalInspectionData.LandWidthStart" />
                                                                        <MudTextField @bind-Value="FinalInspectionData.ReliefAngleStart" />

                                                                    </MudTd>
                                                                    <MudTd DataLabel="Finish" class="text-center">
                                                                        <MudTextField @bind-Value="FinalInspectionData.FluteDiameterFinish" />
                                                                        <MudTextField @bind-Value="FinalInspectionData.LandWidthFinish" />
                                                                        <MudTextField @bind-Value="FinalInspectionData.ReliefAngleFinish" />

                                                                    </MudTd>


                                                                </RowTemplate>
                                                            </MudTable>
                                                        </div>
                                                    </MudItem>
                                                </MudItem>
                                            </MudGrid>


                                            <MudGrid Spacing="3">


                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="T.I.R - Centers Left" @bind-Value="serialNumberData.CentersLeft" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                                </MudItem>
                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="T.I.R - Centers Right" @bind-Value="serialNumberData.CentersRight" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                                </MudItem>

                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="Taper Left" @bind-Value="FinalInspectionData.TaperStart" FullWidth="true" Variant="Variant.Outlined" />
                                                </MudItem>
                                            </MudGrid>

                                            <MudGrid Spacing="3">

                                                <MudItem xs="12" md="4">
                                                    <MudTextField Label="Taper Right" @bind-Value="FinalInspectionData.Taperfinish" FullWidth="true" Variant="Variant.Outlined" />
                                                </MudItem>
                                                <MudItem xs="12" md="4">
                                                    <MudSelect T="string" ValueChanged="OnRBChanged" Label="Locknut Threads" Value="selectedLocknutThreads" Variant="Variant.Outlined" ValueExpression="() => selectedRB" FullWidth="true" Class="custom-select">
                                                        @foreach (var ber in LocknutThreads)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }

                                                    </MudSelect>
                                                </MudItem>
                                                <MudItem xs="12" md="4">
                                                    <MudSelect T="string" ValueChanged="OnIstheRotorcleanChanged" Label="Is the Rotor clean?" Variant="Variant.Outlined" Value="selectedIstheRotorclean" ValueExpression="() => selectedIstheRotorclean" FullWidth="true" Class="custom-select">
                                                        @foreach (var ber in IstheRotorclean)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }

                                                    </MudSelect>
                                                </MudItem>


                                            </MudGrid>

                                            <MudGrid Spacing="3">

                                                <MudItem xs="12" md="4">
                                                    <MudSelect T="string" ValueChanged="OnselectedJournalsOKChanged" Label="Journals O.K.?" Variant="Variant.Outlined" Value="selectedJournalsOK" ValueExpression="() => selectedJournalsOK" FullWidth="true" Class="custom-select">
                                                        @foreach (var ber in JournalsOK)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }

                                                    </MudSelect>
                                                </MudItem>
                                                <MudItem xs="12" md="4">
                                                    <MudSelect T="string" ValueChanged="OnselectedWedgelockassemblyChanged" Variant="Variant.Outlined" Label="Wedgelock assembly" Value="selectedWedgelockassembly" ValueExpression="() => selectedWedgelockassembly" FullWidth="true" Class="custom-select">
                                                        @foreach (var ber in Wedgelockassembly)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }

                                                    </MudSelect>
                                                </MudItem>
                                                <MudItem xs="12" md="4">
                                                    <MudSelect T="string" ValueChanged="OnselectedSpecialPartWashChanged" Variant="Variant.Outlined" Label="Special Part Wash (if Applicable)" Value="selectedSpecialPartWash" ValueExpression="() => selectedSpecialPartWash" FullWidth="true" Class="custom-select">
                                                        @foreach (var ber in SpecialPartWash)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }

                                                    </MudSelect>
                                                </MudItem>


                                            </MudGrid>

                                            <MudGrid Spacing="3">

                                                <MudItem xs="12" md="6">
                                                    <MudTextField Label="Inspector Signature" @bind-Value="FinalInspectionData.InspectorSing" FullWidth="true" Variant="Variant.Outlined" />
                                                </MudItem>

                                                <MudItem xs="12" md="6">
                                                    <MudTextField Label="Comments" @bind-Value="FinalInspectionData.InspectorComments" FullWidth="true" Variant="Variant.Outlined" />
                                                </MudItem>

                                            </MudGrid>
                                            <MudGrid Spacing="2">
                                                <MudItem xs="12" md="6">
                                                    <MudTextField Label="OK TO SHIP" @bind-Value="FinalInspectionData.Oktoship" FullWidth="true" Variant="Variant.Outlined" />
                                                </MudItem>

                                            </MudGrid>


                                            <MudGrid>
                                                <MudItem xs="12" md="12" Justify="Justify.FlexEnd">
                                                    <div style="display: flex; justify-content: flex-end;">
                                                        <MudButton OnClick="OpenFinalDialogBox"
                                                        Class="mr-2"
                                                        Color="Color.Primary"
                                                        Variant="Variant.Filled">
                                                            Preview
                                                        </MudButton>
                                                        <MudButton OnClick="ClearAll"
                                                        Class="mr-2"
                                                        Color="Color.Error"
                                                        Variant="Variant.Filled">
                                                            Cancel
                                                        </MudButton>
                                                        <MudButton OnClick="Submitdata"
                                                        Class="mr-2"
                                                        Color="Color.Primary"
                                                        Variant="Variant.Filled">
                                                            Submit
                                                        </MudButton>
                                                    </div>
                                                </MudItem>
                                            </MudGrid>

                                        </MudGrid>
                                    </MudForm>
                                </MudCardContent>
                            </MudCard>


                        }


                    </div>

                }
                else if (cameraError)
                {
                    <MudText Color="Color.Error">Camera access was blocked. Please allow camera access to scan QR codes.</MudText>
                }
            </MudItem>

        }
    </MudGrid>
</MudContainer>

@code {

    private QRCodeScannerJsInterop? _qrCodeScannerJsInterop;
    private Action<string>? _onQrCodeScanAction;
    private Action<string>? _onCameraPermissionFailedAction;
    private QRCodeScanner qrCodeScanner;
    private string qrCodeData;
    private bool isExistingSerial = false;
    private RotorGrindingData? hoveredReceive;
    private bool showContent = false;
    private string searchTerm = "";
    private DateTime? fromDate = DateTime.Today; // Default to today
    private bool isScanning;
    private List<RotorsFinalInspection> tableData = new();
    private string? SelectedProject { get; set; }
    private RotorFinalInspectionDTO _finalResult;
    private bool showForm = true;
    private RotorsFinalInspection FinalInspectionData = new RotorsFinalInspection();
    private bool isSubmitted = false;
    private bool isCancel = false;
    private bool cameraError = false;
    private RotorGrindingData serialNumberData;
    private RotorGrindingData selectedReceive;
    private List<RotorGrindingData> Grindingalldata = new();
    // private RotorGrindingData? hoveredReceive;
    // // private Receiving selectedReceive;
    private RotorsFinalInspection FinalInspectiondta;
    private List<string> grindingSerialNumbers = new List<string>();
    public RotorProductionData selectedData { get; set; }
    private List<RotorGrindingData> Receivealldata = new();
    private string errorMessage = "";
    private RotorGrindingData grinding { get; set; } = new RotorGrindingData();
    private RotorsFinalInspection FinalInspection { get; set; } = new RotorsFinalInspection();
    private HashSet<string> scannedSerialNumbers = new HashSet<string>();
    private bool showScanDetails = false;
    public FinalInspectionImageDTO? ProjectimagesData { get; set; }
    private List<FinalInspection> selectedImagesFromSM = new List<FinalInspection>();
    string SelectedSerialNumber;
    string SelectedModuleName;


    private async Task OpenFinalrecord()
    {
        await StopScanning();

        showContent = true;
        showForm = false;
        ClearAll();

        try
        {
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");

            var response = await HttpClient.GetAsync(ApiConstants.GetAllGrindingData);
            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadAsStringAsync();
                var allInspections = System.Text.Json.JsonSerializer.Deserialize<List<RotorGrindingData>>(data,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorGrindingData>();

                // Now filter the list by checking each Serial Number
                var filteredList = new List<RotorGrindingData>();

                foreach (var item in allInspections)
                {

                    // Check if Serial Number exists (Call API for each Serial)
                    var exists = await HttpClient.GetFromJsonAsync<bool>($"{ApiConstants.CheckSerialNumbersales}/{item.SerialNumber}");

                    if (!exists)
                    {
                        // Only add if Serial does not exist
                        filteredList.Add(item);
                    }


                }

                Receivealldata = filteredList; 

            }
            else
            {
                errorMessage = $"Error: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception: {ex.Message}";
        }
        finally
        {
            // isLoading = false;
        }
    }


    private List<string> SpecialPartWash = new()
    {
        "Yes",
        "No",
        ""

    };


    public async Task SelectReceive(RotorGrindingData item)
    {
        selectedReceive = item;
        serialNumberData = item;

        SelectedSerialNumber = item.SerialNumber;
        SelectedModuleName = item.Module;

        qrCodeData = null;
        showContent = false;
        showForm = true;

        StateHasChanged();
    }



    private string selectedSpecialPartWash { get; set; } = "";

    private async Task OnselectedSpecialPartWashChanged(string value)
    {
        selectedSpecialPartWash = value;
    }

    private async Task OnDressedwithNewBearing(string value)
    {
        selectedDressedwithNewBearing = value;
    }

    private List<string> Wedgelockassembly = new()
    {
        "Yes",
        "No",
        ""

    };

    private string selectedWedgelockassembly { get; set; } = "";

    private List<string> DressedwithNewBearing = new()
    {
        "Yes",
        "No",
        "N/A"

    };

    private string selectedDressedwithNewBearing { get; set; } = "";

    private async Task OnselectedWedgelockassemblyChanged(string value)
    {
        selectedWedgelockassembly = value;
    }

    private List<string> JournalsOK = new()
    {
        "Yes",
        "No",
        ""

    };

    private string selectedJournalsOK { get; set; } = "";

    private async Task OnselectedJournalsOKChanged(string value)
    {
        selectedJournalsOK = value;
    }

    private List<string> IstheRotorclean = new()
    {
        "Yes",
        "No",
        ""

    };

    private string selectedIstheRotorclean { get; set; } = "";

    private async Task OnIstheRotorcleanChanged(string value)
    {
        selectedIstheRotorclean = value;
    }

    private List<string> LocknutThreads = new()
    {
        "Yes",
        "No",
        ""

    };

    private string selectedLocknutThreads { get; set; } = "";

    private async Task OnRBChanged(string value)
    {
        selectedLocknutThreads = value;
    }

    private async Task OpenFinalDialogBox()
    {
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                CloseButton = true,
                DisableBackdropClick = true
            };


        var parameters = new DialogParameters
            {//selectedMaterial
                ["TableData"] = tableData,
                ["selectedLocknutThreads"] = selectedLocknutThreads,
                ["selectedIstheRotorclean"] = selectedIstheRotorclean,
                ["selectedJournalsOK"] = selectedJournalsOK,
                ["selectedWedgelockassembly"] = selectedWedgelockassembly,
                ["selectedSpecialPartWash"] = selectedSpecialPartWash,
                ["InspectionData"] = FinalInspectionData,
                ["Grinding"] = serialNumberData,
                ["selectedDressedwithNewBearing"]= selectedDressedwithNewBearing,

            };
        // var options = new DialogOptions { FullWidth = true };
        var dialog = await DialogService.ShowAsync<FinalInspectionDialog>("FINAL INSPECTION REPORT", parameters, options);



    }
    private string? lastScannedCode = null;

    private async Task StartScanning()
    {
        showContent = false;
        showForm = false;
        try
        {
            isScanning = true;
            qrCodeData = null;
            cameraError = false;

            _onQrCodeScanAction = (code) => OnQrCodeScan(code);
            _onCameraPermissionFailedAction = (error) => OnCameraPermissionFailed(error);

            _qrCodeScannerJsInterop = new QRCodeScannerJsInterop(JS);
            await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction, _onCameraPermissionFailedAction);

            isCancel = true;
        }
        catch (Exception ex)
        {
            // Handle any unexpected errors
            cameraError = true;
        }

        StateHasChanged(); // Update the UI to show the camera or error message
    }

    private async Task Submitdata()
    {
        if (string.IsNullOrWhiteSpace(FinalInspectionData.DWGNum) || string.IsNullOrWhiteSpace(FinalInspectionData.AGNum))
        {
            Snackbar.Add("Please fill in the mandatory fields.", Severity.Warning);
            return;
        }
        try
        {
            var userData = await localStorage.GetItemAsync<UserPagesAndRouter>("UserData");
            string useradd = userData?.UserName ?? "User";
            if (userData != null)
            {
                useradd = userData.UserName;

            }

            RotorsFinalInspection FinalInspection = new RotorsFinalInspection()
                {
                    SerialNumber = serialNumberData.SerialNumber,
                    Module = serialNumberData.Module,
                    SalesOrderNumber = serialNumberData.SalesOrderNumber,
                    WorkOrder = serialNumberData.WorkOrder,
                    MatNumber = serialNumberData.MatNumber,
                    Customer = serialNumberData.Customer,
                    Location = serialNumberData.Location,
                    Received = serialNumberData.Received,
                    Inspected = serialNumberData.Inspected,
                    Len = serialNumberData.Len,
                    RotorsNumber = serialNumberData.RotorsNumber,
                    FluteDiameterStart = serialNumberData.RotorsDia,
                    FluteDiameterFinish = FinalInspectionData.FluteDiameterFinish,
                    LandWidthFinish = FinalInspectionData.LandWidthFinish,
                    LandWidthStart = FinalInspectionData.LandWidthStart,
                    ReliefAngleStart = FinalInspectionData.ReliefAngleStart,
                    ReliefAngleFinish = FinalInspectionData.ReliefAngleFinish,
                    TIRStart = serialNumberData.CentersLeft,
                    TIRfinish = serialNumberData.CentersRight,
                    TaperStart = FinalInspectionData.TaperStart,
                    Taperfinish = FinalInspectionData.Taperfinish,
                    LocknutThreadsStart = selectedLocknutThreads,
                    IstheRotorcleanStart = selectedIstheRotorclean,
                    JournalsOKStart = selectedJournalsOK,
                    WedgelockassemblyStart = selectedWedgelockassembly,
                    SpecialPartWashStart = selectedSpecialPartWash,
                    InspectorSing = FinalInspectionData.InspectorSing,
                    InspectorComments = FinalInspectionData.InspectorComments,
                    Oktoship = FinalInspectionData.Oktoship,
                    Initials = serialNumberData.Initials,
                    Make = serialNumberData.Make,
                    Dia = serialNumberData.Dia,
                    RotorStyle = serialNumberData.RotorStyle,
                    Fits = serialNumberData.Fits,
                    Materials = serialNumberData.Materials,
                    Others = serialNumberData.Others,
                    RotorsDia = serialNumberData.RotorsDia,
                    Type = serialNumberData.Type,
                    BearingRemoved = serialNumberData.BearingRemoved,
                    Bearing = serialNumberData.Bearing,
                    BearingSeals = serialNumberData.BearingSeals,
                    CeramicSeals = serialNumberData.CeramicSeals,
                    Right = serialNumberData.Right,
                    yRight = serialNumberData.yRight,
                    yLeft = serialNumberData.yLeft,
                    Left = serialNumberData.Left,
                    BasicSharpening = serialNumberData.BasicSharpening,
                    IfYBasicSharpening = serialNumberData.IfYBasicSharpening,
                    WedgelockAlignmentMarks = serialNumberData.WedgelockAlignmentMarks,
                    CenterGrinding = serialNumberData.CenterGrinding,
                    IfYCenterGrinding = serialNumberData.IfYCenterGrinding,
                    Aligned = serialNumberData.Aligned,
                    PlasticSleaves = serialNumberData.PlasticSleaves,
                    Welding = serialNumberData.Welding,
                    WeldingNum = serialNumberData.WeldingNum,
                    BedKnife = serialNumberData.BedKnife,
                    BoxReceivedWithSaddles = serialNumberData.BoxReceivedWithSaddles,
                    ReProfile = serialNumberData.ReProfile,
                    SandBlasting = serialNumberData.SandBlasting,
                    ManualLabor = serialNumberData.ManualLabor,
                    Bottom = serialNumberData.Bottom,
                    Top = serialNumberData.Top,
                    AddQty = serialNumberData.AddQty,
                    TirLeftJournal = serialNumberData.TirLeftJournal,
                    TirRightJournal = serialNumberData.TirRightJournal,
                    SaddlePartNumber = serialNumberData.SaddlePartNumber,
                    RotorCategorization = serialNumberData.RotorCategorization,
                    ComponentType = serialNumberData.ComponentType,
                    Users = serialNumberData.Users,
                    TargetDate = serialNumberData.TargetDate,
                    CustomerInstructions = serialNumberData.CustomerInstructions,
                    CustomerImportance = serialNumberData.CustomerImportance,
                    SubmitDate = serialNumberData.SubmitDate,
                    SubmitedBy = serialNumberData.SubmitedBy,
                    AdvancedSharpingStatus = serialNumberData.AdvancedSharpingStatus,
                    Workcenters = serialNumberData.Workcenters,
                    ProductionSubmitDate = serialNumberData.ProductionSubmitDate,
                    ProductionSubmitBy = serialNumberData.ProductionSubmitBy,
                    RotorsDiaLeft = serialNumberData.RotorsDiaLeft,
                    RotorsDiaRight = serialNumberData.RotorsDiaRight,
                    ReliefLand = serialNumberData.ReliefLand,
                    ToothFaceLeft = serialNumberData.ToothFaceLeft,
                    ToothFaceRight = serialNumberData.ToothFaceRight,
                    CentersLeft = serialNumberData.CentersLeft,
                    CentersRight = serialNumberData.CentersRight,
                    VisualChecks = serialNumberData.VisualChecks,
                    InspectedBy = FinalInspectionData.Inspected,
                    GrindingStartDate = serialNumberData.GrindingStartDate,
                    GrindingEndDate = serialNumberData.GrindingdataSubmitedByDate,
                    Notes = serialNumberData.Notes,
                    DelayReasonTracking = serialNumberData.DelayReasonTracking,
                    GrindingSubmiteddBy = serialNumberData.GrindingdataSubmiteddBy,
                    CustomerPoNum = FinalInspectionData.CustomerPoNum,
                    DWGNum = FinalInspectionData.DWGNum,
                    AGNum = FinalInspectionData.AGNum,
                    SpecialNoteComment = FinalInspectionData.SpecialNoteComment,
                    Dressedwithnewbearing = FinalInspectionData.Dressedwithnewbearing,
                    Description = FinalInspectionData.Description,
                    Start = FinalInspectionData.Start,
                    Finish = FinalInspectionData.Finish,
                    Name = FinalInspectionData.Name,
                    FinalInspectionSubmiteddBy = useradd,

                    FinalInspectionSubmitedByDate = DateTime.Now,
                };

            //  var response = await HttpClient.PostAsJsonAsync("https://localhost:7172/api/RotorsFinalInspection/AddFinalInspection", FinalInspection);
            var response = await HttpClient.PostAsJsonAsync(ApiConstants.AddFinalInspectionData, FinalInspection);

            if (response.IsSuccessStatusCode)
            {
                var ProjectImageData = await localStorage.GetItemAsync<FinalInspectionImageDTO>("ProjectImageData");
                var projectjsonData = JsonConvert.SerializeObject(ProjectImageData);
                var projectimagecontent = new StringContent(projectjsonData, Encoding.UTF8, "application/json");

                // var projectimageresponse = await HttpClient.PostAsync(ApiConstants.AddImagesIncoming, projectimagecontent);
                //   var projectimageresponse = await HttpClient.PostAsync("https://localhost:7172/api/FinalInspectionImages/addbi", projectimagecontent);
                var projectimageresponse = await HttpClient.PostAsync(ApiConstants.AddImagesFinal, projectimagecontent);

                if (projectimageresponse.IsSuccessStatusCode)
                {
                    await localStorage.RemoveItemAsync("IncomingImageData");
                    // Console.WriteLine("Images added successfully.");

                }
                Snackbar.Add("Final Inspection data saved successfully!", Severity.Success);
                showForm=false;
                ClearAll();
                isSubmitted = true;

                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Failed to save data.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

    private async Task ViewAttachedFile()
    {
        if (string.IsNullOrEmpty(serialNumberData?.SerialNumber))
        {
            Snackbar.Add("Serial number is missing!", Severity.Warning);
            return;
        }

        try
        {
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var response = await HttpClient.GetAsync($"{ApiConstants.GetSalesAttachedFileBySerialNumber}/{serialNumberData.SerialNumber}");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<SalesAttachedFileDto>();
                var fileData = result?.File?.FirstOrDefault();

                if (fileData != null && fileData.Data != null)
                {
                    // Call JavaScript to open the PDF in a new tab
                    await JS.InvokeVoidAsync("openPdfFromByteArray", Convert.ToBase64String(fileData.Data));
                }
                else
                {
                    Snackbar.Add("No file data found.", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("No file data found.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenPreviewDialogBox()
    {

        if (!string.IsNullOrEmpty(qrCodeData))
        {
            var qrDetails = qrCodeData.Split(',');

            if (qrDetails.Length >= 3) // Ensure QR Code has expected fields
            {
                grinding.SerialNumber = ExtractValue(qrDetails[0]);
                grinding.Module = ExtractValue(qrDetails[1]);

            }
            else
            {
                Snackbar.Add("Invalid QR Code format. Please scan again.", Severity.Warning);
                return;
            }
        }
        else if (selectedReceive != null)
        {
            // Fetch from selected Receive item instead
            serialNumberData.SerialNumber = selectedReceive.SerialNumber;
            serialNumberData.Module = selectedReceive.Module;

        }
        else
        {
            Snackbar.Add("No QR code scanned. Please scan a QR code before submitting.", Severity.Warning);
            return;
        }
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                CloseButton = true,
                DisableBackdropClick = true
            };

        var parameters = new DialogParameters
            {//selectedMaterial
                ["InspectionData"] = serialNumberData

            };

        var dialog = DialogService.Show<PreviewIncomingDialog>("INCOMING ROTOR INSPECTION", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            // Update FinalInspection with dialog data (optional)
            if (result.Data is RotorsFinalInspection updatedInspection)
            {
                FinalInspection = updatedInspection;
            }


        }
    }

    private async Task StopScanning()
    {
        isScanning = false;
        isCancel = false;

        if (_qrCodeScannerJsInterop != null)
        {
            await _qrCodeScannerJsInterop.StopRecording();
        }

        StateHasChanged();
    }

    private async void OnQrCodeScan(string code)
    {
        qrCodeData = code;
        isScanning = false;
        isCancel = false;
        _qrCodeScannerJsInterop?.StopRecording();

        var serialNumber = code.Split(',').FirstOrDefault(s => s.StartsWith("Serial Number:"))?.Split(':')[1]?.Trim();
        var url = $"{ApiConstants.CheckSerialNumbersales}/{serialNumber}";

        // Log the URL for debugging
        Console.WriteLine($"Calling API with URL: {url}");

        var exists = await HttpClient.GetFromJsonAsync<bool>(url);

        if (exists)
        {
            Snackbar.Add($"Serial Number '{serialNumber}' already exists.", Severity.Warning);
            isExistingSerial = exists;
            await StopScanning();
            showForm = false;
            StateHasChanged();
            return;
        }
        else if (!string.IsNullOrWhiteSpace(serialNumber))
        {
            await FetchSerialNumberData(serialNumber.Trim());
            showForm = true;
        }
        else
        {
            showForm = false;
        }
        StateHasChanged();
    }




    protected override async Task OnInitializedAsync()
    {
        tableData = new List<RotorsFinalInspection>
    {
        new RotorsFinalInspection { },

    };


        var userData = await localStorage.GetItemAsync<UserPagesAndRouter>("UserData");

        // Assign user name or default to "User" if userData is null
        string currentuser = userData?.UserName ?? "User";
        FinalInspectionData.Inspected = currentuser;
        // inspection.Received = currentDateTime.ToString();
    }

    private async Task AddProjectImagesAsync(ProjectImgDTO projectImagesDTO)
    {
        if (!string.IsNullOrEmpty(qrCodeData))
        {
            var qrDetails = qrCodeData.Split(',');

            if (qrDetails.Length >= 3) // Ensure QR Code has expected fields
            {
                grinding.Module = ExtractValue(qrDetails[2]);
                grinding.Users = ExtractValue(qrDetails[1]);
                grinding.SerialNumber = ExtractValue(qrDetails[0]); // This was missing!
            }
            else
            {
                Snackbar.Add("Invalid QR Code format. Please scan again.", Severity.Warning);
                return;
            }
        }
        else if (selectedReceive != null)
        {
            grinding.SerialNumber = selectedReceive.SerialNumber;
            grinding.Module = selectedReceive.Module;
            grinding.Users = selectedReceive.Customer;
            grinding.DateTime = selectedReceive.DateTime;
        }

        projectImagesDTO.SerialNumber = grinding.SerialNumber;

        var options = new DialogOptions { FullWidth = true };
        var parameters = new DialogParameters<ImageDisplayDialog>();
        // parameters.Add("ProjectImagesDTO", projectImagesDTO);
        parameters.Add("SerialNumber", grinding.SerialNumber);
        CompletionService.CompletionChanged += async (sender, args) =>
        {
            await UpdateProjectImageAsync();
        };

        DialogService.Show<AddFinalImages>("PROJECTIMAGES", parameters, DialogSettings.DialogOptionsAddEditDelete);
    }

    private async Task UpdateProjectImageAsync()
    {
        ProjectimagesData = await localStorage.GetItemAsync<FinalInspectionImageDTO>("ProjectImageData");

        selectedImagesFromSM.Clear(); // Clear old data if any

        if (ProjectimagesData?.Images != null && ProjectimagesData.Images.Any())
        {
            selectedImagesFromSM.Add(new FinalInspection
                {
                    SerialNumber = ProjectimagesData.SerialNumber?.Trim(),
                    Images = ProjectimagesData.Images.Select(img => new FinalImagedata
                    {
                    // Data = img.Data,
                    // ID = img.ITSImageID
                    }).ToList()
                });
        }

        StateHasChanged(); // ✅ This triggers UI refresh
    }

    private async Task ClearAll()
    {

        FinalInspectionData.CustomerPoNum = null;
        FinalInspectionData.DWGNum = null;
        FinalInspectionData.AGNum = null;
        FinalInspectionData.Description = null;
        FinalInspectionData.SpecialNoteComment = null;
        FinalInspectionData.Dressedwithnewbearing = null;
        FinalInspectionData.FluteDiameterFinish = null;
        FinalInspectionData.LandWidthFinish = null;
        FinalInspectionData.LandWidthStart = null;
        FinalInspectionData.ReliefAngleFinish = null;    
        FinalInspectionData.ReliefAngleStart = null;
        FinalInspectionData.TaperStart = null;
        FinalInspectionData.Taperfinish = null;
        selectedLocknutThreads = null;
        selectedIstheRotorclean = null;
        selectedJournalsOK = null;

        selectedWedgelockassembly = null;
        selectedSpecialPartWash = null;
        FinalInspectionData.InspectorSing = null;
        FinalInspectionData.InspectorComments = null;
        FinalInspectionData.Oktoship = null;


        qrCodeData = string.Empty;
        SelectedProject = null;
        ProjectimagesData = null;
        selectedImagesFromSM.Clear();

        // Reset serial number/module selections
        SelectedSerialNumber = null;
        SelectedModuleName = null;

        StateHasChanged();

    }

    private async Task FetchSerialNumberData(string serial)
    {
        try
        {
            var client = _httpClient.CreateClient("MES.ServerAPI"); // Ensure "MyAPI" is configured in Program.cs
            // var response = await client.GetAsync($"https://localhost:7172/api/RotorGrinding/{serial}");
            var response = await client.GetAsync($"{ApiConstants.GetDataFromGrinding}/{serial}");

            if (response.IsSuccessStatusCode)
            {
                serialNumberData = await response.Content.ReadFromJsonAsync<RotorGrindingData>();
                StateHasChanged(); // Force re-render to update UI
            }
            else
            {
                Snackbar.Add($"Serial number {serial} not found.", Severity.Warning);
                serialNumberData = null;
                showForm = false;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error fetching serial number data.", Severity.Error);
            serialNumberData = null;
        }
    }

    private string ExtractValue(string data)
    {
        var parts = data.Split(':'); // Check if the data has a label like "SerialNumber: 12345"
        return parts.Length > 1 ? parts[1].Trim() : parts[0].Trim(); // Return value without label
    }

    private void OnCameraPermissionFailed(string error)
    {
        cameraError = true;
        isScanning = false;
        isCancel = false;
        StateHasChanged();
    }

    public class ProjectImgDTO
    {
        public string SerialNumber { get; set; }

    }

}


<style>

    .my-centered-table .mud-table-cell,
    .my-centered-table .mud-table-header {
        text-align: center;
        vertical-align: middle;
    }

    .bordered-container {
        width: 100%;
        max-width: 100%;
        border: 2px solid #ccc;
        border-radius: 8px;
        padding: 30px;
        margin-bottom: 16px;
        box-sizing: border-box;
    }


    .qr-item {
        margin: 1rem;
        font-size: 16px;
        white-space: nowrap; /* Ensures text stays in one line */
    }


    .full-width-grid {
        width: 100%;
        margin: 0;
    }

    .bordered-container {
        width: 100%;
        max-width: 100%;
        border: 2px solid #ccc;
        border-radius: 8px;
        padding: 30px;
        margin-bottom: 16px;
        box-sizing: border-box;
    }

    .no-checkbox .mud-selected-item-checkbox {
        display: none !important;
    }


    .qr-container {
        justify-content: center;
        text-align: center;
        padding: 1rem;
    }

    .spaced-select .mud-input-label {
        margin-bottom: 6px; /* Adjust as needed */
    }


</style>

