@page "/rfi"

@using MES.Client.Dialog
@using MES.Client.Dialog.FinalInspectionImages
@using MES.Client.Utitlity
@using MES.Shared.Models
@using MES.Shared.Models.Rotors
@using ReactorBlazorQRCodeScanner
@using MES.Client.Dialog.Rotors
@using MES.Shared.DTOs
@using MES.Shared.DTOs.MES.Shared.DTOs.Rotors

@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogCompletionService CompletionService
@inject IHttpClientFactory _httpClient
@inject IJSRuntime JS;

<MudContainer Style="overflow:hidden" Class="mt-5">
    <MudGrid Class="d-flex justify-center">
        @*    <MudItem md="12" sm="12" xs="12" class="d-flex flex-column align-items-center justify-content-center mb-2" style="text-align: center;">
            <MudText Typo="Typo.h6" Style="font-size: 16px;">Incoming Inspection</MudText>
        </MudItem> *@
        <MudItem md="12" sm="12" xs="12" class="d-flex flex-column align-items-center justify-content-center mb-2" style="text-align: center;">
            <div>
                <MudButton @onclick="StartScanning" Variant="Variant.Filled" Color="Color.Primary" Style="width: 100px;">Scan QR</MudButton>
                @if (isCancel)
                {
                    <MudButton @onclick="StopScanning" Variant="Variant.Filled" Color="Color.Error" Style="width: 100px; margin-left:8px;">Cancel</MudButton>
                }
            </div>
        </MudItem>
        <MudItem md="12" sm="12" xs="12" Class="d-flex justify-center align-center">
            @if (isScanning)
            {
                <div class="d-flex justify-center" style="width: 350px; height: 350px;">
                    <QRCodeScanner LoadingMessage="" />
                </div>
            }

        </MudItem>
        <MudItem md="12" sm="12" xs="12" Class="d-flex justify-center align-center">
            @if (!string.IsNullOrEmpty(qrCodeData))
            {
                <div>
                    <div class="border border-primary p-10 mt-2 d-flex flex-wrap">
                        @foreach (var item in qrCodeData.Split(','))
                        {
                            <p class="qr-item">@item.Trim()</p>
                        }
                    </div>
                    <div style="margin-top:10px">
                        <MudButton OnClick="OpenPreviewDialogBox"
                        Class="mr-2"
                        Color="Color.Primary"
                        Variant="Variant.Filled">
                            Incoming Inspection Report
                        </MudButton>

                        <MudButton Class="mr-2"
                        Color="Color.Secondary"
                        Variant="Variant.Filled" OnClick="ViewAttachedFile">
                            Production Order Report
                        </MudButton>
                    </div>
                    <MudCard Class="mt-4 p-4 w-100" id="printForm-section">
                        <MudCardContent>

                            <MudForm Class="w-100">

                                <MudGrid>
                                    <MudGrid Spacing="3">

                                        <MudItem xs="12" md="4">
                                            <MudTextField Label="Grinding Start Date" @bind-Value="serialNumberData.GrindingStartDate" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                        </MudItem>

                                        <MudItem xs="12" md="4">
                                            <MudTextField Label="Grinding End Date" @bind-Value="serialNumberData.GrindingdataSubmitedByDate" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                        </MudItem>
                                        <MudItem xs="12" md="4">
                                            <MudTextField Label="Workcenters" @bind-Value="serialNumberData.Workcenters" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                        </MudItem>

                                    </MudGrid>

                                    <MudGrid Spacing="3">

                                        <MudItem xs="12" md="4">
                                            <MudTextField Label="Rotors Dia Left" @bind-Value="serialNumberData.RotorsDiaLeft" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                        </MudItem>

                                        <MudItem xs="12" md="4">
                                            <MudTextField Label="Rotors Dia Right" @bind-Value="serialNumberData.RotorsDiaRight" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                        </MudItem>

                                        <MudItem xs="12" md="4">
                                            <MudTextField Label="Relief Land" @bind-Value="serialNumberData.ReliefLand" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                        </MudItem>

                                    </MudGrid>
                                    <MudGrid Spacing="3">

                                        <MudItem xs="12" md="4">
                                            <MudTextField Label="Tooth Face Left" @bind-Value="serialNumberData.ToothFaceLeft" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                        </MudItem>

                                        <MudItem xs="12" md="4">
                                            <MudTextField Label="Tooth Face Right" @bind-Value="serialNumberData.ToothFaceRight" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                        </MudItem>

                                        <MudItem xs="12" md="4">
                                            <MudTextField Label="Visual Checks" @bind-Value="serialNumberData.VisualChecks" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                        </MudItem>

                                    </MudGrid>

                                    <MudGrid Spacing="3">

                                        <MudItem xs="12" md="4" >
                                            <MudTextField Label="Centers Left" @bind-Value="serialNumberData.CentersLeft" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                        </MudItem>

                                        <MudItem xs="12" md="4">
                                            <MudTextField Label="Centers Right" @bind-Value="serialNumberData.CentersRight" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                        </MudItem>

                                        <MudItem xs="12" md="4">
                                            <MudTextField Label="Inspected By" @bind-Value="serialNumberData.InspectedBy" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                        </MudItem>

                                    </MudGrid>

                                    <MudGrid Spacing="3">

                                        <MudItem xs="12" md="6">
                                            <MudTextField Label="Notes" @bind-Value="serialNumberData.Notes" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                        </MudItem>

                                        <MudItem xs="12" md="6">
                                            <MudTextField Label="Delay Reason Tracking" @bind-Value="serialNumberData.DelayReasonTracking" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                        </MudItem>
                                    </MudGrid>

                                       <MudForm Class="mt-4 p-4 w-100" id="printForm-section">
                        <MudCardContent>

                            <MudGrid Class="w-100">

                                    <MudGrid Spacing="3">

                                        <MudItem xs="12" md="6">
                                            <MudTextField Label="Sales Order" @bind-Value="serialNumberData.SalesOrderNumber" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                        </MudItem>

                                    <MudItem xs="12" md="6">
                                        <MudTextField Label="Customer PO#" @bind-Value="FinalInspectionData.CustomerPoNum" FullWidth="true" Variant="Variant.Outlined" />
                                    </MudItem>
                                     </MudGrid>

                                                <MudGrid Spacing="3">

                                                    <MudItem xs="12" md="6">
                                                        <MudTextField Label="Customer" @bind-Value="serialNumberData.Customer" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                                    </MudItem>

                                                    <MudItem xs="12" md="6">
                                                        <MudTextField Label="Dwg#" @bind-Value="FinalInspectionData.DWGNum" FullWidth="true" Variant="Variant.Outlined" />
                                                    </MudItem>

                                                </MudGrid>
                                                <MudGrid Spacing="3">

                                                    <MudItem xs="12" md="4">
                                                        <MudTextField Label="Description" @bind-Value="FinalInspectionData.Description" FullWidth="true" Variant="Variant.Outlined" />
                                                    </MudItem>

                                                    <MudItem xs="12" md="4">
                                                        <MudTextField Label="AG#" @bind-Value="FinalInspectionData.AGNum" FullWidth="true" Variant="Variant.Outlined" />
                                                    </MudItem>

                                                    <MudItem xs="12" md="4">
                                                        <MudTextField Label="Material" @bind-Value="serialNumberData.Materials" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                                                    </MudItem>

                                                </MudGrid>
                                                <MudGrid Spacing="3">

                                                    <MudItem xs="12" md="12">
                                                        <MudTextField Label="Special notes / comments" @bind-Value="FinalInspectionData.SpecialNoteComment" FullWidth="true" Variant="Variant.Outlined" />
                                                    </MudItem>
                                                </MudGrid>

                                                <MudGrid Spacing="3">

                                                    <MudItem xs="12" md="12">
                                                        <MudTextField Label="Dressed With New Bearings" @bind-Value="FinalInspectionData.Dressedwithnewbearing" FullWidth="true" Variant="Variant.Outlined" />
                                                    </MudItem>
                                                </MudGrid>
                                </MudGrid>
                            </MudCardContent>

                                        <MudGrid Spacing="3" Class="mt-4">
                                            <MudTable T="RotorsFinalInspection" Items="@tableData" Elevation="1">
                                                <HeaderContent>
                                                    <MudTh>Description</MudTh>
                                                    <MudTh>Start</MudTh>
                                                    <MudTh>Finish</MudTh>
                                                    <MudTh>Date</MudTh>
                                                    <MudTh>Name</MudTh>
                                                </HeaderContent>
                                                <RowTemplate>
                                                    <MudTd DataLabel="Description">@context.Description</MudTd>
                                                    <MudTd DataLabel="Start">
                                                        <MudTextField @bind-Value="context.Start" />
                                                    </MudTd>
                                                    <MudTd DataLabel="Finish">
                                                        <MudTextField @bind-Value="context.Finish" />
                                                    </MudTd>
                                                    <MudTd DataLabel="Date">
                                                        <MudDatePicker @bind-Date="context.Date" />
                                                    </MudTd>
                                                    <MudTd DataLabel="Name">
                                                        <MudTextField @bind-Value="context.Name" />
                                                    </MudTd>
                                                </RowTemplate>
                                            </MudTable>

                                        </MudGrid>
                        </MudForm>

                                    <MudGrid Class="full-width-grid">
                                        <MudItem xs="12" style="text-align: center; width: 100%;">
                                            <MudItem md="12" sm="12" xs="12" Class="d-flex justify-center">
                                                <div style="border: 2px dotted gray; padding: 10px; text-align: center; width: 250px; height: auto">
                                                    <p>Add images</p>

                                                    <!-- Add Button -->
                                                    <MudItem>
                                                        <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(async () => await AddProjectImagesAsync(new ProjectImgDTO {
                                                            SerialNumber = SelectedProject
                                                        }))">
                                                            Add
                                                        </MudButton>
                                                    </MudItem>

                                                    <!-- Image Preview -->
                                                    @if (selectedImagesFromSM.Any())
                                                    {
                                                        <div style="margin-top:10px;">
                                                            <p><b>Total Images:</b> @selectedImagesFromSM.SelectMany(x => x.Images).Count()</p>
                                                            <!-- You can show the images here too -->
                                                        </div>
                                                    }

                                                </div>
                                            </MudItem>
                                        </MudItem>
                                    </MudGrid>

                                    <MudGrid>
                                        <MudItem xs="12" md="12" Justify="Justify.FlexEnd">
                                            <div style="display: flex; justify-content: flex-end;">
                                                <MudButton OnClick="OpenFinalDialogBox"
                                                Class="mr-2"
                                                Color="Color.Primary"
                                                Variant="Variant.Filled">
                                                    Final Inspection Report
                                                </MudButton>
                                                <MudButton OnClick="Submitdata"
                                                Class="mr-2"
                                                Color="Color.Primary"
                                                Variant="Variant.Filled">
                                                    Submit
                                                </MudButton>
                                            </div>
                                        </MudItem>
                                    </MudGrid>

                                </MudGrid>
                            </MudForm>
                        </MudCardContent>
                    </MudCard>
                </div>

            }
            else if (cameraError)
            {
                <MudText Color="Color.Error">Camera access was blocked. Please allow camera access to scan QR codes.</MudText>
            }
        </MudItem>
    </MudGrid>
</MudContainer>



@code {


    private QRCodeScannerJsInterop? _qrCodeScannerJsInterop;
    private Action<string>? _onQrCodeScanAction;
    private Action<string>? _onCameraPermissionFailedAction;
    private QRCodeScanner qrCodeScanner;
    private string qrCodeData;
    private DateTime? fromDate = DateTime.Today; // Default to today
    private bool isScanning;
    private List<RotorsFinalInspection> tableData = new();
    private string? SelectedProject { get; set; }
    private RotorFinalInspectionDTO _finalResult;
    private RotorsFinalInspection FinalInspectionData = new RotorsFinalInspection();

    private bool isCancel = false;
    private bool cameraError = false;
    private RotorGrindingData serialNumberData;
    private RotorsFinalInspection FinalInspectiondta;
    public RotorProductionData selectedData { get; set; }
    private RotorGrindingData grinding { get; set; } = new RotorGrindingData();
    private RotorsFinalInspection FinalInspection { get; set; } = new RotorsFinalInspection();

    public FinalInspectionImageDTO? ProjectimagesData { get; set; }
    private List<FinalInspection> selectedImagesFromSM = new List<FinalInspection>();

    private async Task StartScanning()
    {
        try
        {
            isScanning = true;
            qrCodeData = null;
            cameraError = false;

            _onQrCodeScanAction = (code) => OnQrCodeScan(code);
            _onCameraPermissionFailedAction = (error) => OnCameraPermissionFailed(error);

            _qrCodeScannerJsInterop = new QRCodeScannerJsInterop(JS);
            await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction, _onCameraPermissionFailedAction);

            isCancel = true;
        }
        catch (Exception ex)
        {
            // Handle any unexpected errors
            cameraError = true;
        }

        StateHasChanged(); // Update the UI to show the camera or error message
    }

    

    private async Task Submitdata()
    {
        try
        {
            FinalInspection.SerialNumber = serialNumberData.SerialNumber;
            FinalInspection.Module = serialNumberData.Module;
            FinalInspection.SalesOrderNumber = serialNumberData.SalesOrderNumber;
            FinalInspection.WorkOrder = serialNumberData.WorkOrder;
            FinalInspection.MatNumber = serialNumberData.MatNumber;
            FinalInspection.Customer = serialNumberData.Customer;
            FinalInspection.Location = serialNumberData.Location;
            FinalInspection.Received = serialNumberData.Received;
            FinalInspection.Inspected = serialNumberData.Inspected;
            FinalInspection.Len = serialNumberData.Len;
            FinalInspection.RotorsNumber = serialNumberData.RotorsNumber;
            FinalInspection.Initials = serialNumberData.Initials;
            FinalInspection.Make = serialNumberData.Make;
            FinalInspection.Dia = serialNumberData.Dia;
            FinalInspection.RotorStyle = serialNumberData.RotorStyle;
            FinalInspection.Fits = serialNumberData.Fits;
            FinalInspection.Materials = serialNumberData.Materials;
            FinalInspection.Others = serialNumberData.Others;
            FinalInspection.RotorsDia = serialNumberData.RotorsDia;
            FinalInspection.Type = serialNumberData.Type;
            FinalInspection.BearingRemoved = serialNumberData.BearingRemoved;
            FinalInspection.Bearing = serialNumberData.Bearing;
            FinalInspection.BearingSeals = serialNumberData.BearingSeals;
            FinalInspection.CeramicSeals = serialNumberData.CeramicSeals;
            FinalInspection.Right = serialNumberData.Right;
            FinalInspection.yRight = serialNumberData.yRight;
            FinalInspection.yLeft = serialNumberData.yLeft;
            FinalInspection.Left = serialNumberData.Left;
            FinalInspection.BasicSharpening = serialNumberData.BasicSharpening;
            FinalInspection.IfYBasicSharpening = serialNumberData.IfYBasicSharpening;
            FinalInspection.WedgelockAlignmentMarks = serialNumberData.WedgelockAlignmentMarks;
            FinalInspection.CenterGrinding = serialNumberData.CenterGrinding;
            FinalInspection.IfYCenterGrinding = serialNumberData.IfYCenterGrinding;
            FinalInspection.Aligned = serialNumberData.Aligned;
            FinalInspection.PlasticSleaves = serialNumberData.PlasticSleaves;
            FinalInspection.Welding = serialNumberData.Welding;
            FinalInspection.WeldingNum = serialNumberData.WeldingNum;
            FinalInspection.BedKnife = serialNumberData.BedKnife;
            FinalInspection.BoxReceivedWithSaddles = serialNumberData.BoxReceivedWithSaddles;
            FinalInspection.ReProfile = serialNumberData.ReProfile;
            FinalInspection.SandBlasting = serialNumberData.SandBlasting;
            FinalInspection.ManualLabor = serialNumberData.ManualLabor;
            FinalInspection.Bottom = serialNumberData.Bottom;
            FinalInspection.Top = serialNumberData.Top;
            FinalInspection.AddQty = serialNumberData.AddQty;
            FinalInspection.TirLeftJournal = serialNumberData.TirLeftJournal;
            FinalInspection.TirRightJournal = serialNumberData.TirRightJournal;
            FinalInspection.SaddlePartNumber = serialNumberData.SaddlePartNumber;
            FinalInspection.RotorCategorization = serialNumberData.RotorCategorization;
            FinalInspection.ComponentType = serialNumberData.ComponentType;
            FinalInspection.Users = serialNumberData.Users;
            FinalInspection.TargetDate = serialNumberData.TargetDate;
            FinalInspection.CustomerInstructions = serialNumberData.CustomerInstructions;
            FinalInspection.CustomerImportance = serialNumberData.CustomerImportance;
            FinalInspection.SubmitDate = serialNumberData.SubmitDate;
            FinalInspection.SubmitedBy = serialNumberData.SubmitedBy;
            FinalInspection.AdvancedSharpingStatus = serialNumberData.AdvancedSharpingStatus;
            FinalInspection.Workcenters = serialNumberData.Workcenters;
            FinalInspection.ProductionSubmitDate = serialNumberData.ProductionSubmitDate;
            FinalInspection.ProductionSubmitBy = serialNumberData.ProductionSubmitBy;
            FinalInspection.RotorsDiaLeft = serialNumberData.RotorsDiaLeft;
            FinalInspection.RotorsDiaRight = serialNumberData.RotorsDiaRight;
            FinalInspection.ReliefLand = serialNumberData.ReliefLand;
            FinalInspection.ToothFaceLeft = serialNumberData.ToothFaceLeft;
            FinalInspection.ToothFaceRight = serialNumberData.ToothFaceRight;
            FinalInspection.CentersLeft = serialNumberData.CentersLeft;
            FinalInspection.CentersRight = serialNumberData.CentersRight;
            FinalInspection.VisualChecks = serialNumberData.VisualChecks;
            FinalInspection.InspectedBy = serialNumberData.InspectedBy;
            FinalInspection.GrindingStartDate = serialNumberData.GrindingStartDate;
            FinalInspection.GrindingEndDate = serialNumberData.GrindingdataSubmitedByDate;
            FinalInspection.Notes = serialNumberData.Notes;
            FinalInspection.DelayReasonTracking = serialNumberData.DelayReasonTracking;
            FinalInspection.GrindingSubmiteddBy = serialNumberData.GrindingdataSubmiteddBy;
            // FinalInspection.CustomerPoNum =;
            // FinalInspection.DWGNum = ;
            // FinalInspection.AGNum = ;
            // FinalInspection.SpecialNoteComment = ;
            // FinalInspection.Dressedwithnewbearing = ;
            // FinalInspection.InspectorSing = ;
            // FinalInspection.Description = ;
            // FinalInspection.Oktoship = ;
            // FinalInspection.InspectorComments = ;
            // FinalInspection.Start = ;
            // FinalInspection.Finish = ;
            // FinalInspection.Name = ;
            // FinalInspection.Date = ;
          //  FinalInspection.FinalInspectionSubmiteddBy = ;
            FinalInspection.FinalInspectionSubmitedByDate = DateTime.Now;

            var response = await HttpClient.PostAsJsonAsync("https://localhost:7172/api/RotorsFinalInspection/AddFinalInspection", FinalInspection);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Final Inspection data saved successfully!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to save data.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenFinalDialogBox()
    {
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                CloseButton = true,
                DisableBackdropClick = true
            };


        var parameters = new DialogParameters
            {//selectedMaterial
                ["InspectionData"] = serialNumberData

            };
        // var options = new DialogOptions { FullWidth = true };
        var dialog = await DialogService.ShowAsync<FinalInspectionDialog>("FINAL INSPECTION REPORT", parameters, options);

        var result = await dialog.Result;

        if (!result.Cancelled && result.Data is RotorFinalInspectionDTO returnData)
        {
            _finalResult = returnData;

            // Now you can use `_finalResult` to bind to UI or perform logic
            Snackbar.Add("Final inspection data received!", Severity.Success);
        }

    }

    private async Task ViewAttachedFile()
    {
        if (string.IsNullOrEmpty(selectedData?.SerialNumber))
        {
            Snackbar.Add("Serial number is missing!", Severity.Warning);
            return;
        }

        try
        {
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var response = await HttpClient.GetAsync($"{ApiConstants.GetSalesAttachedFileBySerialNumber}/{selectedData.SerialNumber}");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<SalesAttachedFileDto>();
                var fileData = result?.File?.FirstOrDefault();

                if (fileData != null && fileData.Data != null)
                {
                    // Call JavaScript to open the PDF in a new tab
                    await JS.InvokeVoidAsync("openPdfFromByteArray", Convert.ToBase64String(fileData.Data));
                }
                else
                {
                    Snackbar.Add("No file data found.", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("No file data found.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenPreviewDialogBox()
    {

        if (!string.IsNullOrEmpty(qrCodeData))
        {
            var qrDetails = qrCodeData.Split(',');

            if (qrDetails.Length >= 3) // Ensure QR Code has expected fields
            {
                grinding.SerialNumber = ExtractValue(qrDetails[0]);
                grinding.Module = ExtractValue(qrDetails[1]);

            }
            else
            {
                Snackbar.Add("Invalid QR Code format. Please scan again.", Severity.Warning);
                return;
            }
        }
        else
        {
            Snackbar.Add("No QR code scanned. Please scan a QR code before submitting.", Severity.Warning);
            return;
        }
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                CloseButton = true,
                DisableBackdropClick = true
            };

        var parameters = new DialogParameters
            {//selectedMaterial
                ["InspectionData"] = serialNumberData

            };

        var dialog = DialogService.Show<PreviewIncomingDialog>("INCOMING ROTOR INSPECTION", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            // Update FinalInspection with dialog data (optional)
            if (result.Data is RotorsFinalInspection updatedInspection)
            {
                FinalInspection = updatedInspection;
            }

           
        }
    }

    private void StopScanning()
    {
        isScanning = false;
        isCancel = false;
        _qrCodeScannerJsInterop?.StopRecording();
        StateHasChanged();
    }

    private async void OnQrCodeScan(string code)
    {
        qrCodeData = code;
        isScanning = false;
        isCancel = false;
        _qrCodeScannerJsInterop?.StopRecording();

        // Extract the serial number (assuming format is "SerialNumber:12345,...")
        var serial = code.Split(',').FirstOrDefault(s => s.StartsWith("Serial Number:"))?.Split(':')[1];

        if (!string.IsNullOrWhiteSpace(serial))
        {
            await FetchSerialNumberData(serial.Trim());
        }

        StateHasChanged();
    }

    private async Task AddProjectImagesAsync(ProjectImgDTO projectImagesDTO)
    {
        if (!string.IsNullOrEmpty(qrCodeData))
        {
            var qrDetails = qrCodeData.Split(',');

            if (qrDetails.Length >= 3) // Ensure QR Code has expected fields
            {
                grinding.Module = ExtractValue(qrDetails[2]);
                grinding.Users = ExtractValue(qrDetails[1]);
                grinding.SerialNumber = ExtractValue(qrDetails[0]); // This was missing!
            }
            else
            {
                Snackbar.Add("Invalid QR Code format. Please scan again.", Severity.Warning);
                return;
            }
        }

        projectImagesDTO.SerialNumber = grinding.SerialNumber;

        var options = new DialogOptions { FullWidth = true };
        var parameters = new DialogParameters<ImageDisplayDialog>();
        // parameters.Add("ProjectImagesDTO", projectImagesDTO);
        parameters.Add("SerialNumber", grinding.SerialNumber);
        CompletionService.CompletionChanged += async (sender, args) =>
        {
            await UpdateProjectImageAsync();
        };

        DialogService.Show<AddFinalImages>("PROJECTIMAGES", parameters, DialogSettings.DialogOptionsAddEditDelete);
    }

    private async Task UpdateProjectImageAsync()
    {
        ProjectimagesData = await localStorage.GetItemAsync<FinalInspectionImageDTO>("ProjectImageData");

        selectedImagesFromSM.Clear(); // Clear old data if any

        if (ProjectimagesData?.Images != null && ProjectimagesData.Images.Any())
        {
            selectedImagesFromSM.Add(new FinalInspection
                {
                    SerialNumber = ProjectimagesData.SerialNumber?.Trim(),
                    Images = ProjectimagesData.Images.Select(img => new FinalImagedata
                    {
                    // Data = img.Data,
                    // ID = img.ITSImageID
                    }).ToList()
                });
        }

         StateHasChanged(); // ✅ This triggers UI refresh
    }

    private async Task FetchSerialNumberData(string serial)
    {
        try
        {
            var client = _httpClient.CreateClient("MES.ServerAPI"); // Ensure "MyAPI" is configured in Program.cs
            // var response = await client.GetAsync($"https://localhost:7172/api/RotorGrinding/{serial}");
            var response = await client.GetAsync($"{ApiConstants.GetDataFromGrinding}/{serial}");

            if (response.IsSuccessStatusCode)
            {
                serialNumberData = await response.Content.ReadFromJsonAsync<RotorGrindingData>();
            }
            else
            {
                Snackbar.Add($"Serial number {serial} not found.", Severity.Warning);
                serialNumberData = null;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error fetching serial number data.", Severity.Error);
            serialNumberData = null;
        }
    }

    private string ExtractValue(string data)
    {
        var parts = data.Split(':'); // Check if the data has a label like "SerialNumber: 12345"
        return parts.Length > 1 ? parts[1].Trim() : parts[0].Trim(); // Return value without label
    }

    private void OnCameraPermissionFailed(string error)
    {
        cameraError = true;
        isScanning = false;
        isCancel = false;
        StateHasChanged();
    }

    public class ProjectImgDTO
    {
        public string SerialNumber { get; set; }

    }

}


<style>
    .bordered-container {
        width: 100%;
        max-width: 100%;
        border: 2px solid #ccc;
        border-radius: 8px;
        padding: 30px;
        margin-bottom: 16px;
        box-sizing: border-box;
    }


    .qr-item {
        margin: 1.5rem;
        font-size: 16px;
        white-space: nowrap; /* Ensures text stays in one line */
    }


    .full-width-grid {
        width: 100%;
        margin: 0;
    }

</style>