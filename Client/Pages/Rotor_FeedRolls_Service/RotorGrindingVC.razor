@page "/rg"

@using MES.Client.Dialog
@using MES.Client.Dialog.Grinding
@using MES.Client.Utitlity
@using MES.Shared.Models
@using MES.Shared.Models.Rotors
@using ReactorBlazorQRCodeScanner
@using System.Text
@using static MES.Client.Pages.LoginVC


@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogCompletionService CompletionService
@inject IHttpClientFactory _httpClient
@inject IJSRuntime JS;


<MudContainer Fixed="true">
    <MudGrid Class="d-flex">
        <MudItem md="12" sm="12" xs="12">
            <div style="max-height: 500px; max-width:100%; padding-bottom:30px;margin-top:20px">
                <div class="table-container">
                    <MudTable Items="@FilteredRotorProductionDatas"
                    FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"400px":"")"
                    Class="table table-bordered table-striped" Hover="true" Breakpoint="Breakpoint.Sm" @ref="mudTable" RowClass="cursor-pointer" RowClassFunc="@SelectedRowClassFunc" OnRowClick="@((TableRowClickEventArgs<RotorProductionData> e) => RowClickEvent(e))"
                    Filter="new Func<RotorProductionData, bool>(FilterFunc1)">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6"></MudText>
                            <MudSpacer />
                            <MudSelect T="string" Label="Filter by WorkCenter" @bind-Value="Selectedworkcenters" Dense="true" Class="mt-0">
                                <MudSelectItem T="string">All</MudSelectItem>
                                @foreach (var workcenter in MESWorkcenters.Select(x => x.Workcenters).Distinct())
                                {
                                    <MudSelectItem Value="@workcenter">@workcenter</MudSelectItem>
                                }
                            </MudSelect>

                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Report Number</MudTh>
                            <MudTh Style="text-align:center">Customer Name</MudTh>
                            <MudTh Style="text-align:center">Size</MudTh>
                            <MudTh Style="text-align:center">Rotor Number</MudTh>
                            <MudTh Style="text-align:center">Current Work Center</MudTh>
                            @*  <MudTh Style="text-align:center">Secondary Work Center</MudTh> *@
                            <MudTh Style="text-align:center">Component Type</MudTh>
                            <MudTh Style="text-align:center">Target Date</MudTh>
                            <MudTh Style="text-align:center">Customer Priority</MudTh>
                            <MudTh Style="text-align:center">Start</MudTh>
                            <MudTh Style="text-align:center">Status Indicator</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="data">
                            <MudTd>@data.SerialNumber</MudTd>
                            <MudTd Style="text-align:center">@data.Customer</MudTd>
                            <MudTd Style="text-align:center">@data.Dia*@data.Len*@data.Fits</MudTd>
                            <MudTd Style="text-align:center">@data.RotorsNumber</MudTd>
                            @*   <MudTd Style="text-align:center">@data.Workcenters</MudTd> *@
                            <MudTd Style="text-align:center">
                                @(
                                    rotorGrindingStartDatas
                                        .FirstOrDefault(x => x.SerialNumber?.Equals(data.SerialNumber, StringComparison.OrdinalIgnoreCase) == true)
                                        ?.SecondaryWorkCenters == "N/A"
                                        ? data.Workcenters
                                    : rotorGrindingStartDatas
                                        .FirstOrDefault(x => x.SerialNumber?.Equals(data.SerialNumber, StringComparison.OrdinalIgnoreCase) == true)
                                        ?.SecondaryWorkCenters ?? data.Workcenters
                                            )
                            </MudTd>
                            <MudTd Style="text-align:center">@data.ComponentType</MudTd>
                            <MudTd Style="text-align:center">@data.TargetDate?.ToString("MM/dd/yyyy")</MudTd>
                            <MudTd Style="text-align:center">@data.CustomerImportance</MudTd>

                            <MudTd Style="text-align:center">
                                @{
                                    var matchedData = rotorGrindingStartDatas
                                    ?.FirstOrDefault(x => x.SerialNumber == data.SerialNumber);

                                    bool isSecondary = matchedData?.IsStarted == true;
                                    bool isMatched = matchedData != null;
                                }

                                @if (isMatched && isSecondary)
                                {
                                    <MudButton Color="Color.Success" Variant="Variant.Filled">
                                        Started
                                    </MudButton>
                                }
                                else
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => StartRotor(data))">
                                        Start
                                    </MudButton>
                                }
                            </MudTd>


                            <MudTd Style="text-align:center">
                                @{
                                    var matchedData = rotorGrindingStartDatas
                                    ?.FirstOrDefault(x => x.SerialNumber == data.SerialNumber);

                                    bool isSecondary = matchedData?.IsStarted == true;
                                    bool isMatched = matchedData != null;

                                    @if (isMatched && isSecondary)
                                    {
                                        <MudChip Color="Color.Success" Style="min-width: 100px;" Label="true">
                                            In Process
                                        </MudChip>
                                    }
                                    else
                                    {
                                        <MudChip Color="@(data.TargetDate < DateTime.Today ? Color.Error
                                            : data.TargetDate > DateTime.Today ? Color.Tertiary
                                            : Color.Primary)"
                                        Style="min-width: 100px;" Label="true">
                                            @(data.TargetDate < DateTime.Today ? "Overdue"
                                                    : data.TargetDate > DateTime.Today ? "Upcoming"
                                                    : "Due Today")
                                        </MudChip>
                                    }
                                }
                            </MudTd>

                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { int.MaxValue, 100, 50, 10, 5}" />
                        </PagerContent>
                    </MudTable>
                </div>
            </div>
        </MudItem>
    </MudGrid>
</MudContainer>

<style>
    .selected {
    background-color: #1E88E5 !important;
    }

    .selected > td {
    color: white !important;
    }

    .selected > td .mud-input {
    color: white !important;
    }
</style>

@code {

    [Inject] private IDialogService DialogService { get; set; } = default!;
    private string? Selectedworkcenters { get; set; }
    private List<MESWorkcenters>? MESWorkcenters { get; set; } = new List<MESWorkcenters>();
    private List<RotorProductionData> RotorProductionDatas = new();
    private string searchString1 = "";
    private int selectedRowNumber = -1;
    private MudTable<RotorProductionData> mudTable;
    private List<string> clickedEvents = new();
    private List<RotorGrindingData> RotorgrindingDatas = new();
    private List<RotorGrindingSavedData> rotorGrindingSavedDatas = new();
    private string? StatusIndicator { get; set; }
    private List<RotorDamageGrindingDataFromGrinding> RotorDamageDuringgrindingData = new();
    private List<RotorDamageGrindingSubmitedData> RotorGrindingSubitedDatas = new();   
    private List<NewRotorData> NewRotorData = new();
    private string currentWorkCenter { get; set; }
    bool fixed_header = true;
    bool fixed_footer = false;

    private List<RotorGrindingSavedData> rotorGrindingStartDatas = new();

    private List<string> userWorkCenters = new();


    private List<RotorProductionData> FilteredRotorProductionDatas => RotorProductionDatas
     .Where(data => userWorkCenters.Any(wc =>
     {
         var secondaryWC = rotorGrindingStartDatas
             .FirstOrDefault(s => string.Equals(s.SerialNumber, data.SerialNumber, StringComparison.OrdinalIgnoreCase))
             ?.SecondaryWorkCenters;

         var workCenterToCompare = string.IsNullOrWhiteSpace(secondaryWC) || secondaryWC == "N/A"
             ? data.Workcenters
             : secondaryWC;

         return string.Equals(wc, workCenterToCompare, StringComparison.OrdinalIgnoreCase);
     }))
     .DistinctBy(data => data.SerialNumber)
     .ToList();



    protected override async Task OnInitializedAsync()
    {
        HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
        var workcenterResponse = await HttpClient.GetAsync(ApiConstants.GetMESWorkcenters);

        if (workcenterResponse.IsSuccessStatusCode)
        {
            var locationResult = await workcenterResponse.Content.ReadFromJsonAsync<List<MESWorkcenters>>();

            if (locationResult != null)
            {
                MESWorkcenters = locationResult.OrderByDescending(l => l.Id).ToList();
            }
        }

        var userData = await localStorage.GetItemAsync<UserPagesAndRouter>("UserData");
        // Safely split work centers into a list
        userWorkCenters = userData?.SelectedWorkCenter?
            .Split(',', StringSplitOptions.RemoveEmptyEntries)
            .Select(wc => wc.Trim())
            .ToList() ?? new List<string>();

        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {


            // Get all Rotor Damage During Grinding Data
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var rotordamagegrindingDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllMovedOOPGrindingData);

            if (rotordamagegrindingDatasResponse.IsSuccessStatusCode)
            {
                var productionDataJson = await rotordamagegrindingDatasResponse.Content.ReadAsStringAsync();

                if (!string.IsNullOrEmpty(productionDataJson))
                {
                    RotorDamageDuringgrindingData = JsonSerializer.Deserialize<List<RotorDamageGrindingDataFromGrinding>>(productionDataJson,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorDamageGrindingDataFromGrinding>();
                }
            }


            // get all saved rotor grinding data
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var rotorgrindingsavedDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllSavedGrindingData);

            if (rotorgrindingsavedDatasResponse.IsSuccessStatusCode)
            {
                var productionDataJson = await rotorgrindingsavedDatasResponse.Content.ReadAsStringAsync();

                if (!string.IsNullOrEmpty(productionDataJson))
                {
                    var latestRotorGrindingSavedDatas = JsonSerializer.Deserialize<List<RotorGrindingSavedData>>(productionDataJson,
                                                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorGrindingSavedData>();

                    rotorGrindingStartDatas = latestRotorGrindingSavedDatas.GroupBy(x => x.SerialNumber)
                                                .Select(g => g.OrderByDescending(x => x.GrindingdataSavedByDate).First())
                                                .ToList();
                }
            }


            // Get all existing Rotor grinding Data
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var rotorgrindingDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllGrindingData);

            if (rotorgrindingDatasResponse.IsSuccessStatusCode)
            {
                var productionDataJson = await rotorgrindingDatasResponse.Content.ReadAsStringAsync();

                if (!string.IsNullOrEmpty(productionDataJson))
                {
                    RotorgrindingDatas = JsonSerializer.Deserialize<List<RotorGrindingData>>(productionDataJson,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorGrindingData>();
                }
            }


            // Get all existing RotorProductionData
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var rotorSalesDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllProductionData);

            if (rotorSalesDatasResponse.IsSuccessStatusCode)
            {
                var data = await rotorSalesDatasResponse.Content.ReadAsStringAsync();
                var allInspections = JsonSerializer.Deserialize<List<RotorProductionData>>(data,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorProductionData>();

                // Exclude inspections that already exist in rotorgrindingDatas (based on SerialNumber, Module, RotorsNumber)
                RotorProductionDatas = allInspections
                .DistinctBy(i => i.SerialNumber)
                .Where(i => !RotorgrindingDatas.Any(r =>
                    string.Equals(r.SerialNumber, i.SerialNumber, StringComparison.OrdinalIgnoreCase) &&
                    string.Equals(r.Module, i.Module, StringComparison.OrdinalIgnoreCase) &&
                    string.Equals(r.RotorsNumber, i.RotorsNumber, StringComparison.OrdinalIgnoreCase)) &&
                       !RotorDamageDuringgrindingData.Any(d =>
                    string.Equals(d.SerialNumber, i.SerialNumber, StringComparison.OrdinalIgnoreCase)))
                   .ToList();

            }

            // Get all existing damage grinding submited data
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var DGDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllDDGSubmitedData);

            if (DGDatasResponse.IsSuccessStatusCode)
            {
                var dgdDataJson = await DGDatasResponse.Content.ReadAsStringAsync();

                if (!string.IsNullOrEmpty(dgdDataJson))
                {
                    RotorGrindingSubitedDatas = JsonSerializer.Deserialize<List<RotorDamageGrindingSubmitedData>>(dgdDataJson,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorDamageGrindingSubmitedData>();

                    var convertedProductionData = RotorGrindingSubitedDatas.Select(data => new RotorProductionData
                        {
                            SerialNumber = data.SerialNumber,
                            Module = data.Module,
                            SalesOrderNumber = data.SalesOrderNumber,
                            WorkOrder = data.WorkOrder,
                            MatNumber = data.MatNumber,
                            Customer = data.Customer,
                            Location = data.Location,
                            Received = data.Received,
                            Inspected = data.Inspected,
                            RotorsNumber = data.RotorsNumber,
                            Initials = data.Initials,
                            Make = data.Make,
                            Dia = data.Dia,
                            Len = data.Len,
                            Fits = data.Fits,
                            Materials = data.Materials,
                            Others = data.Others,
                            RotorsDia = data.RotorsDia,
                            RotorStyle = data.RotorStyle,
                            Type = data.Type,
                            BearingRemoved = data.BearingRemoved,
                            Bearing = data.Bearing,
                            BearingSeals = data.BearingSeals,
                            CeramicSeals = data.CeramicSeals,
                            Right = data.Right,
                            yRight = data.yRight,
                            Left = data.Left,
                            yLeft = data.yLeft,
                            BasicSharpening = data.BasicSharpening,
                            IfYBasicSharpening = data.IfYBasicSharpening,
                            WedgelockAlignmentMarks = data.WedgelockAlignmentMarks,
                            CenterGrinding = data.CenterGrinding,
                            IfYCenterGrinding = data.IfYCenterGrinding,
                            Aligned = data.Aligned,
                            PlasticSleaves = data.PlasticSleaves,
                            Welding = data.Welding,
                            WeldingNum = data.WeldingNum,
                            BedKnife = data.BedKnife,
                            BoxReceivedWithSaddles = data.BoxReceivedWithSaddles,
                            ReProfile = data.ReProfile,
                            SandBlasting = data.SandBlasting,
                            ManualLabor = data.ManualLabor,
                            Bottom = data.Bottom,
                            Top = data.Top,
                            AddQty = data.AddQty,
                            TirLeftJournal = data.TirLeftJournal,
                            TirRightJournal = data.TirRightJournal,
                            SaddlePartNumber = data.SaddlePartNumber,
                            DateTime = data.DateTime,
                            RotorCategorization = data.RotorCategorization,
                            ComponentType = data.ComponentType,
                            Users = data.Users,
                            TargetDate = data.TargetDate,
                            CustomerInstructions = data.CustomerInstructions,
                            CustomerImportance = data.CustomerImportance,
                            SubmitDate = data.SubmitDate,
                            SubmitedBy = data.SubmitedBy,
                            AdvancedSharpingStatus = data.AdvancedSharpingStatus,
                            Workcenters = data.Workcenters,
                            ProductionSubmitBy = data.DamageGrindingSubmitBy,
                            ProductionSubmitDate = data.DamageGrindingSubmitDate

                        })
                            // Exclude items that already exist in RotorgrindingDatas based on SerialNumber
                            .Where(data => !RotorgrindingDatas.Any(r => string.Equals(r.SerialNumber, data.SerialNumber, StringComparison.OrdinalIgnoreCase)))
                            .DistinctBy(data => data.SerialNumber)
                            .ToList();

                    // Add the filtered data to RotorProductionDatas
                    RotorProductionDatas.AddRange(convertedProductionData.DistinctBy(data => data.SerialNumber));

                }
            }

            // get all NEW rotor data from production
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var NEWDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllNewRotorData);

            if (NEWDatasResponse.IsSuccessStatusCode)
            {
                var NEWDataJson = await NEWDatasResponse.Content.ReadAsStringAsync();

                if (!string.IsNullOrEmpty(NEWDataJson))
                {
                    NewRotorData = JsonSerializer.Deserialize<List<NewRotorData>>(NEWDataJson,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<NewRotorData>();

                    var convertedNEWData = NewRotorData.Select(data => new RotorProductionData
                        {
                            SerialNumber = data.SerialNumber,
                            Module = data.Module,
                            SalesOrderNumber = data.SalesOrderNumber,
                            WorkOrder = data.WorkOrder,
                            MatNumber = data.MaterialNumber,
                            Customer = data.CustomerName,
                            Location = "N/A",
                            Received = "N/A",
                            Inspected = "N/A",
                            RotorsNumber = data.RotorsNumber,
                            Initials = "N/A",
                            Make = "N/A",
                            Dia = "N/A",
                            Len = "N/A",
                            Fits = "N/A",
                            Materials = "N/A",
                            Others = "N/A",
                            RotorsDia = "N/A",
                            RotorStyle = "N/A",
                            Type = "N/A",
                            BearingRemoved = "N/A",
                            Bearing = "N/A",
                            BearingSeals = "N/A",
                            CeramicSeals = "N/A",
                            Right = "N/A",
                            yRight = "N/A",
                            Left = "N/A",
                            yLeft = "N/A",
                            BasicSharpening = "N/A",
                            IfYBasicSharpening = "N/A",
                            WedgelockAlignmentMarks = "N/A",
                            CenterGrinding = "N/A",
                            IfYCenterGrinding = "N/A",
                            Aligned = "N/A",
                            PlasticSleaves = "N/A",
                            Welding = "N/A",
                            WeldingNum = "N/A",
                            BedKnife = "N/A",
                            BoxReceivedWithSaddles = "N/A",
                            ReProfile = "N/A",
                            SandBlasting = "N/A",
                            ManualLabor = "N/A",
                            Bottom = "N/A",
                            Top = "N/A",
                            AddQty = 0,
                            TirLeftJournal = "N/A",
                            TirRightJournal = "N/A",
                            SaddlePartNumber = "N/A",
                            DateTime = DateTime.Now,
                            RotorCategorization = "N/A",
                            ComponentType = data.ComponentType,
                            Users = data.NewRotorDataSSubmitBy,
                            TargetDate = data.TargetDate,
                            CustomerInstructions = "N/A",
                            CustomerImportance = data.CustomerImportance,
                            SubmitDate = data.NewRotorDataSubmitDate,
                            SubmitedBy = data.NewRotorDataSSubmitBy,
                            AdvancedSharpingStatus = "N/A",
                            Workcenters = data.Workcenters,
                            ProductionSubmitBy = data.NewRotorDataSSubmitBy,
                            ProductionSubmitDate = data.NewRotorDataSubmitDate

                        })

                             .Where(data => !RotorgrindingDatas.Any(r =>
                                    string.Equals(r.SerialNumber, data.SerialNumber, StringComparison.OrdinalIgnoreCase)) &&
                                       !RotorDamageDuringgrindingData.Any(d =>
                                    string.Equals(d.SerialNumber, data.SerialNumber, StringComparison.OrdinalIgnoreCase)))
                        .ToList();


                    // Add the filtered data to RotorProductionDatas
                    RotorProductionDatas.AddRange(convertedNEWData.DistinctBy(data => data.SerialNumber));
                }
            }

            StateHasChanged();

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error Occurred: {ex.Message}", Severity.Warning);
        }
    }


    private async Task OpenGrindingDepartment()
    {
        var dialogOptions = DialogSettings.DialogOptionsAddEditDelete;
        await DialogService.ShowAsync<GrindingDepartmentDialog>("Add Grinding Department", dialogOptions);
    }

    private bool FilterFunc1(RotorProductionData element)
    {
        return FilterFunc(element);
    }   

    private bool FilterFunc(RotorProductionData element)
    {
        if (string.IsNullOrWhiteSpace(Selectedworkcenters))
            return true;

        var secondaryData = rotorGrindingStartDatas
            .FirstOrDefault(x => x.SerialNumber == element.SerialNumber);

        // Check for null, empty or "N/A" and fallback to Workcenters
        string workCenterToUse = (!string.IsNullOrWhiteSpace(secondaryData?.SecondaryWorkCenters)
                                    && secondaryData.SecondaryWorkCenters != "N/A")
            ? secondaryData.SecondaryWorkCenters
            : element.Workcenters;

        return workCenterToUse?.Contains(Selectedworkcenters, StringComparison.OrdinalIgnoreCase) == true;
    }




    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadData();
        }
    }

    private async Task RowClickEvent(TableRowClickEventArgs<RotorProductionData> tableRowClickEventArgs)
    {
        var selectedData = tableRowClickEventArgs.Item;

        var parameters = new DialogParameters
            {
                ["selectedData"] = selectedData,
                // ["currentWorkCenter"] = currentWorkCenter
            };

        var dialogOptions = DialogSettings.DialogOptionsAddEditDelete;

        DialogService.Show<GrindingData>("Rotor Details", parameters, dialogOptions);

        CompletionService.CompletionChanged += async (sender, args) =>
        {
            await UpdateproductionDataAsync();
        };
    }

    private async Task UpdateproductionDataAsync()
    {
        if (CompletionService.IsCompleted)
        {           

            // get all saved rotor grinding data
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var rotorgrindingsavedDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllSavedGrindingData);

            if (rotorgrindingsavedDatasResponse.IsSuccessStatusCode)
            {
                var productionDataJson = await rotorgrindingsavedDatasResponse.Content.ReadAsStringAsync();

                if (!string.IsNullOrEmpty(productionDataJson))
                {
                    var latestRotorGrindingSavedDatas = JsonSerializer.Deserialize<List<RotorGrindingSavedData>>(productionDataJson,
                                                       new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorGrindingSavedData>();

                    rotorGrindingStartDatas = latestRotorGrindingSavedDatas.GroupBy(x => x.SerialNumber)
                                                .Select(g => g.OrderByDescending(x => x.GrindingdataSavedByDate).First())
                                                .ToList();

                }
            }

            // Get all Rotor Damage During Grinding Data
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var rotordamagegrindingDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllMovedOOPGrindingData);

            if (rotordamagegrindingDatasResponse.IsSuccessStatusCode)
            {
                var productionDataJson = await rotordamagegrindingDatasResponse.Content.ReadAsStringAsync();

                if (!string.IsNullOrEmpty(productionDataJson))
                {
                    RotorDamageDuringgrindingData = JsonSerializer.Deserialize<List<RotorDamageGrindingDataFromGrinding>>(productionDataJson,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorDamageGrindingDataFromGrinding>();
                }
            }


            // Get all existing Rotor grinding Data
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var rotorgrindingDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllGrindingData);

            if (rotorgrindingDatasResponse.IsSuccessStatusCode)
            {
                var productionDataJson = await rotorgrindingDatasResponse.Content.ReadAsStringAsync();

                if (!string.IsNullOrEmpty(productionDataJson))
                {
                    RotorgrindingDatas = JsonSerializer.Deserialize<List<RotorGrindingData>>(productionDataJson,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorGrindingData>();
                }
            }

            // Get all existing RotorProductionData
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var rotorSalesDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllProductionData);

            if (rotorSalesDatasResponse.IsSuccessStatusCode)
            {
                var data = await rotorSalesDatasResponse.Content.ReadAsStringAsync();
                var allInspections = JsonSerializer.Deserialize<List<RotorProductionData>>(data,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorProductionData>();

                // Exclude inspections that already exist in rotorgrindingDatas (based on SerialNumber, Module, RotorsNumber)
                RotorProductionDatas = allInspections
                .Where(i => !RotorgrindingDatas.Any(r =>
                    string.Equals(r.SerialNumber, i.SerialNumber, StringComparison.OrdinalIgnoreCase) &&
                    string.Equals(r.Module, i.Module, StringComparison.OrdinalIgnoreCase) &&
                    string.Equals(r.RotorsNumber, i.RotorsNumber, StringComparison.OrdinalIgnoreCase)) &&
                       !RotorDamageDuringgrindingData.Any(d =>
                    string.Equals(d.SerialNumber, i.SerialNumber, StringComparison.OrdinalIgnoreCase)))
                   .ToList();

            }

            // Get all existing damage grinding submited data
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var DGDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllDDGSubmitedData);

            if (DGDatasResponse.IsSuccessStatusCode)
            {
                var dgdDataJson = await DGDatasResponse.Content.ReadAsStringAsync();

                if (!string.IsNullOrEmpty(dgdDataJson))
                {
                    RotorGrindingSubitedDatas = JsonSerializer.Deserialize<List<RotorDamageGrindingSubmitedData>>(dgdDataJson,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorDamageGrindingSubmitedData>();

                    var convertedProductionData = RotorGrindingSubitedDatas.Select(data => new RotorProductionData
                        {
                            SerialNumber = data.SerialNumber,
                            Module = data.Module,
                            SalesOrderNumber = data.SalesOrderNumber,
                            WorkOrder = data.WorkOrder,
                            MatNumber = data.MatNumber,
                            Customer = data.Customer,
                            Location = data.Location,
                            Received = data.Received,
                            Inspected = data.Inspected,
                            RotorsNumber = data.RotorsNumber,
                            Initials = data.Initials,
                            Make = data.Make,
                            Dia = data.Dia,
                            Len = data.Len,
                            Fits = data.Fits,
                            Materials = data.Materials,
                            Others = data.Others,
                            RotorsDia = data.RotorsDia,
                            RotorStyle = data.RotorStyle,
                            Type = data.Type,
                            BearingRemoved = data.BearingRemoved,
                            Bearing = data.Bearing,
                            BearingSeals = data.BearingSeals,
                            CeramicSeals = data.CeramicSeals,
                            Right = data.Right,
                            yRight = data.yRight,
                            Left = data.Left,
                            yLeft = data.yLeft,
                            BasicSharpening = data.BasicSharpening,
                            IfYBasicSharpening = data.IfYBasicSharpening,
                            WedgelockAlignmentMarks = data.WedgelockAlignmentMarks,
                            CenterGrinding = data.CenterGrinding,
                            IfYCenterGrinding = data.IfYCenterGrinding,
                            Aligned = data.Aligned,
                            PlasticSleaves = data.PlasticSleaves,
                            Welding = data.Welding,
                            WeldingNum = data.WeldingNum,
                            BedKnife = data.BedKnife,
                            BoxReceivedWithSaddles = data.BoxReceivedWithSaddles,
                            ReProfile = data.ReProfile,
                            SandBlasting = data.SandBlasting,
                            ManualLabor = data.ManualLabor,
                            Bottom = data.Bottom,
                            Top = data.Top,
                            AddQty = data.AddQty,
                            TirLeftJournal = data.TirLeftJournal,
                            TirRightJournal = data.TirRightJournal,
                            SaddlePartNumber = data.SaddlePartNumber,
                            DateTime = data.DateTime,
                            RotorCategorization = data.RotorCategorization,
                            ComponentType = data.ComponentType,
                            Users = data.Users,
                            TargetDate = data.TargetDate,
                            CustomerInstructions = data.CustomerInstructions,
                            CustomerImportance = data.CustomerImportance,
                            SubmitDate = data.SubmitDate,
                            SubmitedBy = data.SubmitedBy,
                            AdvancedSharpingStatus = data.AdvancedSharpingStatus,
                            Workcenters = data.Workcenters,
                            ProductionSubmitBy = data.DamageGrindingSubmitBy,
                            ProductionSubmitDate = data.DamageGrindingSubmitDate

                        })
                            // Exclude items that already exist in RotorgrindingDatas based on SerialNumber
                            .Where(data => !RotorgrindingDatas.Any(r => string.Equals(r.SerialNumber, data.SerialNumber, StringComparison.OrdinalIgnoreCase)))
                            .ToList();

                    // Add the filtered data to RotorProductionDatas
                    RotorProductionDatas.AddRange(convertedProductionData);

                }
            }

            // get all NEW rotor data from production
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var NEWDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllNewRotorData);

            if (NEWDatasResponse.IsSuccessStatusCode)
            {
                var NEWDataJson = await NEWDatasResponse.Content.ReadAsStringAsync();

                if (!string.IsNullOrEmpty(NEWDataJson))
                {
                    NewRotorData = JsonSerializer.Deserialize<List<NewRotorData>>(NEWDataJson,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<NewRotorData>();

                    var convertedNEWData = NewRotorData.Select(data => new RotorProductionData
                        {
                            SerialNumber = data.SerialNumber,
                            Module = data.Module,
                            SalesOrderNumber = data.SalesOrderNumber,
                            WorkOrder = data.WorkOrder,
                            MatNumber = data.MaterialNumber,
                            Customer = data.CustomerName,
                            Location = "N/A",
                            Received = "N/A",
                            Inspected = "N/A",
                            RotorsNumber = data.RotorsNumber,
                            Initials = "N/A",
                            Make = "N/A",
                            Dia = "N/A",
                            Len = "N/A",
                            Fits = "N/A",
                            Materials = "N/A",
                            Others = "N/A",
                            RotorsDia = "N/A",
                            RotorStyle = "N/A",
                            Type = "N/A",
                            BearingRemoved = "N/A",
                            Bearing = "N/A",
                            BearingSeals = "N/A",
                            CeramicSeals = "N/A",
                            Right = "N/A",
                            yRight = "N/A",
                            Left = "N/A",
                            yLeft = "N/A",
                            BasicSharpening = "N/A",
                            IfYBasicSharpening = "N/A",
                            WedgelockAlignmentMarks = "N/A",
                            CenterGrinding = "N/A",
                            IfYCenterGrinding = "N/A",
                            Aligned = "N/A",
                            PlasticSleaves = "N/A",
                            Welding = "N/A",
                            WeldingNum = "N/A",
                            BedKnife = "N/A",
                            BoxReceivedWithSaddles = "N/A",
                            ReProfile = "N/A",
                            SandBlasting = "N/A",
                            ManualLabor = "N/A",
                            Bottom = "N/A",
                            Top = "N/A",
                            AddQty = 0,
                            TirLeftJournal = "N/A",
                            TirRightJournal = "N/A",
                            SaddlePartNumber = "N/A",
                            DateTime = DateTime.Now,
                            RotorCategorization = "N/A",
                            ComponentType = data.ComponentType,
                            Users = data.NewRotorDataSSubmitBy,
                            TargetDate = data.TargetDate,
                            CustomerInstructions = "N/A",
                            CustomerImportance = data.CustomerImportance,
                            SubmitDate = data.NewRotorDataSubmitDate,
                            SubmitedBy = data.NewRotorDataSSubmitBy,
                            AdvancedSharpingStatus = "N/A",
                            Workcenters = data.Workcenters,
                            ProductionSubmitBy = data.NewRotorDataSSubmitBy,
                            ProductionSubmitDate = data.NewRotorDataSubmitDate

                        })

                             .Where(data => !RotorgrindingDatas.Any(r =>
                                    string.Equals(r.SerialNumber, data.SerialNumber, StringComparison.OrdinalIgnoreCase)) &&
                                       !RotorDamageDuringgrindingData.Any(d =>
                                    string.Equals(d.SerialNumber, data.SerialNumber, StringComparison.OrdinalIgnoreCase)))
                        .ToList();


                    // Add the filtered data to RotorProductionDatas
                    RotorProductionDatas.AddRange(convertedNEWData.DistinctBy(data => data.SerialNumber));
                }
            }

            StateHasChanged();

        }
    }


    private string SelectedRowClassFunc(RotorProductionData element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            clickedEvents.Add("Selected Row: None");
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            clickedEvents.Add($"Selected Row: {rowNumber}");
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    RotorGrindingSavedData latestData = null;
    private async Task StartRotor(RotorProductionData selectedData)
    {          

        // get the alredy select the stsart date data
        HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
        var Response = await HttpClient.GetAsync($"{ApiConstants.GetRotorGrindingSavedDatabyserialnumber}/{selectedData.SerialNumber}");

        if (Response.IsSuccessStatusCode)
        {
            var productionDataJson = await Response.Content.ReadAsStringAsync();

            if (!string.IsNullOrEmpty(productionDataJson))
            {
                var savedData = JsonSerializer.Deserialize<List<RotorGrindingSavedData>>(productionDataJson,
                   new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorGrindingSavedData>();

                // Get the latest data per SerialNumber
                var latestDataPerSerial = savedData
                    .Where(x => x.GrindingdataSavedByDate != null)
                    .GroupBy(x => x.SerialNumber)
                    .Select(g => g.OrderByDescending(x => x.GrindingdataSavedByDate).First())
                    .ToList();

                latestData = latestDataPerSerial
                .FirstOrDefault(x => x.SerialNumber == selectedData.SerialNumber);


                if (latestDataPerSerial.Any(x => x.IsStarted == true))
                {
                    Snackbar.Add("This Rotor Already Started", Severity.Error);
                    return;
                }

            }
        }



        // get all saved rotor grinding data
        HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
        var rotorgrindingsavedDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllSavedGrindingData);

        if (rotorgrindingsavedDatasResponse.IsSuccessStatusCode)
        {
            var productionDataJson = await rotorgrindingsavedDatasResponse.Content.ReadAsStringAsync();

            if (!string.IsNullOrEmpty(productionDataJson))
            {
                var allData = JsonSerializer.Deserialize<List<RotorGrindingSavedData>>(productionDataJson,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorGrindingSavedData>();
                // Filter: get the latest entry for each SerialNumber based on GrindingdataSubmitedByDate
                rotorGrindingSavedDatas = allData
                    .Where(d => d.GrindingdataSavedByDate != null) // Make sure date is not null
                    .GroupBy(d => d.SerialNumber)
                    .Select(g => g.OrderByDescending(d => d.GrindingdataSavedByDate).First())
                    .Where(d => d.IsStarted == true)
                    .ToList();





                RotorgrindingDatas = new List<RotorGrindingData>();
                // Get all existing Rotor grinding Data
                HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
                var rotorgrindingDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllGrindingData);

                if (rotorgrindingDatasResponse.IsSuccessStatusCode)
                {
                    var DataJson = await rotorgrindingDatasResponse.Content.ReadAsStringAsync();

                    if (!string.IsNullOrEmpty(DataJson))
                    {
                        RotorgrindingDatas = JsonSerializer.Deserialize<List<RotorGrindingData>>(DataJson,
                            new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorGrindingData>();

                    }
                }

                // Step 1: Get all existing serial numbers
                var existingSerialNumbers = new HashSet<string>(
                    RotorgrindingDatas
                        .Where(x => !string.IsNullOrWhiteSpace(x.SerialNumber))
                        .Select(x => x.SerialNumber)
                );

                // Step 2: Get saved grinding data whose SerialNumbers are NOT in existing grinding data
                var savedWithDifferentSerials = rotorGrindingSavedDatas
                    .Where(x => !string.IsNullOrWhiteSpace(x.SerialNumber) && !existingSerialNumbers.Contains(x.SerialNumber))
                    .ToList();




                foreach (var item in savedWithDifferentSerials)
                {
                    // Get current item's workcenter
                    string itemWorkcenter = item.SecondaryWorkCenters == "N/A"
                                                ? item.Workcenters
                                                : item.SecondaryWorkCenters;


                    string latestWorkcenter;

                    if (latestData != null)
                    {
                        // Get latest data's workcenter
                        latestWorkcenter = latestData?.SecondaryWorkCenters == "N/A"
                                                ? selectedData.Workcenters
                                                : latestData?.SecondaryWorkCenters;
                    }

                    else
                    {
                       latestWorkcenter = selectedData.Workcenters;

                    }
                   

                    // Now compare
                    if (itemWorkcenter == latestWorkcenter)
                    {
                        Snackbar.Add("Another rotor is already started for this workcenter. Please complete it before starting a new one.", Severity.Error);
                        return;
                    }
                }
                                         

            }

        }



        var userData = await localStorage.GetItemAsync<UserPagesAndRouter>("UserData");
        string useradd = userData?.UserName ?? "User";
        if (userData != null)
        {
            useradd = userData.UserName;
        }

        // selectedData.Workcenters = currentWorkCenter;

        var submissionData = new GrindingStartdataSubmission
            {

                SelectedProductionInspection = selectedData,               
                GrindingStartDate = DateTime.UtcNow,            
                GrindingdataSavedBy = useradd,
                GrindingdataSavedByDate = DateTime.Now.ToString(),
                IsStarted = true,
                SecondaryWorkCenters = latestData?.SecondaryWorkCenters ?? "N/A",
                GrindingdataSecondaryWorkCentersSubmitedByDate = latestData?.GrindingdataSecondaryWorkCentersSubmitedByDate ?? "N/A",
                GrindingdataSecondaryWorkCentersSubmiteddBy = latestData?.GrindingdataSecondaryWorkCentersSubmiteddBy ?? "N/A",
                IsSecondaryWorkCenters = latestData?.IsSecondaryWorkCenters ?? false,

            };

        try
        {
            var jsonPart = Newtonsoft.Json.JsonConvert.SerializeObject(submissionData);
            var content = new StringContent(jsonPart, Encoding.UTF8, "application/json");
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var response = await HttpClient.PostAsync(ApiConstants.AddRotorGrindingSavedData, content);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Rotor Started", Severity.Success);
                await OnInitializedAsync();
                StateHasChanged();               
               

            }
            else
            {
                Snackbar.Add($"Failed to save the data,Try again ! Status code: {response.StatusCode}", Severity.Error);

            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error save data: {ex.Message}", Severity.Error);
        }
    }
    

    public class GrindingStartdataSubmission
    {
        public RotorProductionData SelectedProductionInspection { get; set; }       
        public DateTime? GrindingStartDate { get; set; }   
        
        public bool IsStarted { get; set; }
        public bool IsSecondaryWorkCenters { get; set; }
        public string SecondaryWorkCenters { get; set; }
        public string GrindingdataSecondaryWorkCentersSubmiteddBy { get; set; }
        public string GrindingdataSecondaryWorkCentersSubmitedByDate { get; set; }

        public string GrindingdataSavedBy { get; set; }
        public string GrindingdataSavedByDate { get; set; }
      
    }

}
