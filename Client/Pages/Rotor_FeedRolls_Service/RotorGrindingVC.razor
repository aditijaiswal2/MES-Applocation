@page "/rg"

@using MES.Client.Dialog
@using MES.Client.Dialog.Grinding
@using MES.Client.Utitlity
@using MES.Shared.Models
@using MES.Shared.Models.Rotors
@using ReactorBlazorQRCodeScanner


@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogCompletionService CompletionService
@inject IHttpClientFactory _httpClient
@inject IJSRuntime JS;


<MudContainer Fixed="true">
    <MudGrid Class="d-flex">
        <MudItem md="12" sm="12" xs="12">
            <div style="max-height: 500px; max-width:100%; overflow-y: scroll; padding-bottom:30px;margin-top:20px">
                <div class="table-container">
                    <MudTable Items="@RotorProductionDatas" Class="table table-bordered table-striped" Hover="true" Breakpoint="Breakpoint.Sm" @ref="mudTable" RowClass="cursor-pointer" RowClassFunc="@SelectedRowClassFunc" OnRowClick="@((TableRowClickEventArgs<RotorProductionData> e) => RowClickEvent(e))"
                    Filter="new Func<RotorProductionData, bool>(FilterFunc1)">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6"></MudText>
                            <MudSpacer />
                            <MudSelect T="string" Label="Filter by WorkCenter" @bind-Value="Selectedworkcenters" Dense="true" Class="mt-0">
                                <MudSelectItem T="string">All</MudSelectItem>
                                @foreach (var workcenter in MESWorkcenters.Select(x => x.Workcenters).Distinct())
                                {
                                    <MudSelectItem Value="@workcenter">@workcenter</MudSelectItem>
                                }
                            </MudSelect>

                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Serial Number</MudTh>
                            <MudTh Style="text-align:center">Customer Name</MudTh>
                            <MudTh Style="text-align:center">Rotor Number</MudTh>
                            <MudTh Style="text-align:center">Work Center</MudTh>
                            <MudTh Style="text-align:center">Component Type</MudTh>
                            <MudTh Style="text-align:center">Customer Priority</MudTh>
                            <MudTh Style="text-align:center">Status Indicator</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="data">
                            <MudTd>@data.SerialNumber</MudTd>
                            <MudTd Style="text-align:center">@data.Customer</MudTd>
                            <MudTd Style="text-align:center">@data.RotorsNumber</MudTd>
                            <MudTd Style="text-align:center">@data.Workcenters</MudTd>
                            <MudTd Style="text-align:center">@data.ComponentType</MudTd>
                            <MudTd Style="text-align:center">@data.CustomerImportance</MudTd>
                            <MudTd Style="text-align:center">
                                @{
                                    var matchingGrindingData = rotorGrindingSavedDatas
                                    .Where(x => x.SerialNumber == data.SerialNumber)
                                    .ToList();

                                    bool isGrindingInProgress = matchingGrindingData.Any(x => x.GrindingStartDate != null);

                                    if (isGrindingInProgress)
                                    {
                                        <MudChip Color="Color.Warning" Style="min-width: 100px;" Label="true">
                                            Progressing
                                        </MudChip>
                                    }
                                    else
                                    {
                                        <MudChip Color="@(data.TargetDate < DateTime.Today ? Color.Error
                                            : data.TargetDate > DateTime.Today ? Color.Success
                                            : Color.Primary)"
                                                 Style="min-width: 100px;" Label="true">
                                            @(data.TargetDate < DateTime.Today ? "Overdue"
                                            : data.TargetDate > DateTime.Today ? "Upcoming"
                                            : "Due Today")
                                        </MudChip>
                                    }
                                }
                            </MudTd>

                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { int.MaxValue, 100, 50, 10, 5}" />
                        </PagerContent>
                    </MudTable>
                </div>
            </div>
        </MudItem>
    </MudGrid>
</MudContainer>

<style>
    .selected {
    background-color: #1E88E5 !important;
    }

    .selected > td {
    color: white !important;
    }

    .selected > td .mud-input {
    color: white !important;
    }
</style>

@code {

    [Inject] private IDialogService DialogService { get; set; } = default!;
    private string? Selectedworkcenters { get; set; }
    private List<MESWorkcenters>? MESWorkcenters { get; set; } = new List<MESWorkcenters>();
    private List<RotorProductionData> RotorProductionDatas = new();
    private string searchString1 = "";
    private int selectedRowNumber = -1;
    private MudTable<RotorProductionData> mudTable;
    private List<string> clickedEvents = new();
    private List<RotorGrindingData> RotorgrindingDatas = new();
    private List<RotorGrindingSavedData> rotorGrindingSavedDatas = new();
    private string? StatusIndicator { get; set; }
    private List<RotorDamageGrindingDataFromGrinding> RotorDamageDuringgrindingData = new();

    protected override async Task OnInitializedAsync()
    {
        HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
        var workcenterResponse = await HttpClient.GetAsync(ApiConstants.GetMESWorkcenters);

        if (workcenterResponse.IsSuccessStatusCode)
        {
            var locationResult = await workcenterResponse.Content.ReadFromJsonAsync<List<MESWorkcenters>>();

            if (locationResult != null)
            {
                MESWorkcenters = locationResult.OrderByDescending(l => l.Id).ToList();
            }
        }

        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {   
            // Get all Rotor Damage During Grinding Data
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var rotordamagegrindingDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllMovedOOPGrindingData);

            if (rotordamagegrindingDatasResponse.IsSuccessStatusCode)
            {
                var productionDataJson = await rotordamagegrindingDatasResponse.Content.ReadAsStringAsync();

                if (!string.IsNullOrEmpty(productionDataJson))
                {
                    RotorDamageDuringgrindingData = JsonSerializer.Deserialize<List<RotorDamageGrindingDataFromGrinding>>(productionDataJson,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorDamageGrindingDataFromGrinding>();
                }
            }
            

            // get all saved rotor grinding data
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var rotorgrindingsavedDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllSavedGrindingData);

            if (rotorgrindingsavedDatasResponse.IsSuccessStatusCode)
            {
                var productionDataJson = await rotorgrindingsavedDatasResponse.Content.ReadAsStringAsync();

                if (!string.IsNullOrEmpty(productionDataJson))
                {
                    rotorGrindingSavedDatas = JsonSerializer.Deserialize<List<RotorGrindingSavedData>>(productionDataJson,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorGrindingSavedData>();

                   
                }
            }

             // Get all existing Rotor grinding Data
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var rotorgrindingDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllGrindingData);

            if (rotorgrindingDatasResponse.IsSuccessStatusCode)
            {
                var productionDataJson = await rotorgrindingDatasResponse.Content.ReadAsStringAsync();

                if (!string.IsNullOrEmpty(productionDataJson))
                {
                    RotorgrindingDatas = JsonSerializer.Deserialize<List<RotorGrindingData>>(productionDataJson,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorGrindingData>();
                }
            }


            // Get all existing RotorProductionData
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");            
            var rotorSalesDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllProductionData);

            if (rotorSalesDatasResponse.IsSuccessStatusCode)
            {
                var data = await rotorSalesDatasResponse.Content.ReadAsStringAsync();
                var allInspections = JsonSerializer.Deserialize<List<RotorProductionData>>(data,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorProductionData>();

                // Exclude inspections that already exist in rotorgrindingDatas (based on SerialNumber, Module, RotorsNumber)
                RotorProductionDatas = allInspections
                .Where(i => !RotorgrindingDatas.Any(r =>
                    string.Equals(r.SerialNumber, i.SerialNumber, StringComparison.OrdinalIgnoreCase) &&
                    string.Equals(r.Module, i.Module, StringComparison.OrdinalIgnoreCase) &&
                    string.Equals(r.RotorsNumber, i.RotorsNumber, StringComparison.OrdinalIgnoreCase)) &&
                       !RotorDamageDuringgrindingData.Any(d =>
                    string.Equals(d.SerialNumber, i.SerialNumber, StringComparison.OrdinalIgnoreCase)))
                   .ToList();
                StateHasChanged();

            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error Occurred: {ex.Message}", Severity.Warning);
        }
    }


    private async Task OpenGrindingDepartment()
    {
        var dialogOptions = DialogSettings.DialogOptionsAddEditDelete;
        await DialogService.ShowAsync<GrindingDepartmentDialog>("Add Grinding Department", dialogOptions);
    }

    private bool FilterFunc1(RotorProductionData element)
    {
        return FilterFunc(element);
    }

    private bool FilterFunc(RotorProductionData element)
    {
        if (string.IsNullOrWhiteSpace(Selectedworkcenters))
            return true;

        return element.Workcenters?.Contains(Selectedworkcenters, StringComparison.OrdinalIgnoreCase) == true;
    }
        

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadData();
        }
    }

    private async Task RowClickEvent(TableRowClickEventArgs<RotorProductionData> tableRowClickEventArgs)
    {
        var selectedData = tableRowClickEventArgs.Item;

        var parameters = new DialogParameters
            {
                ["selectedData"] = selectedData
            };

        var dialogOptions = DialogSettings.DialogOptionsAddEditDelete;       

        DialogService.Show<GrindingData>("Rotor Details", parameters, dialogOptions);

        CompletionService.CompletionChanged += async (sender, args) =>
        {
            await UpdateproductionDataAsync();
        };
    }

    private async Task UpdateproductionDataAsync()
    {
        if (CompletionService.IsCompleted)
        {
            // get all saved rotor grinding data
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var rotorgrindingsavedDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllSavedGrindingData);

            if (rotorgrindingsavedDatasResponse.IsSuccessStatusCode)
            {
                var productionDataJson = await rotorgrindingsavedDatasResponse.Content.ReadAsStringAsync();

                if (!string.IsNullOrEmpty(productionDataJson))
                {
                    rotorGrindingSavedDatas = JsonSerializer.Deserialize<List<RotorGrindingSavedData>>(productionDataJson,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorGrindingSavedData>();


                }
            }

            // Get all Rotor Damage During Grinding Data
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var rotordamagegrindingDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllMovedOOPGrindingData);

            if (rotordamagegrindingDatasResponse.IsSuccessStatusCode)
            {
                var productionDataJson = await rotordamagegrindingDatasResponse.Content.ReadAsStringAsync();

                if (!string.IsNullOrEmpty(productionDataJson))
                {
                    RotorDamageDuringgrindingData = JsonSerializer.Deserialize<List<RotorDamageGrindingDataFromGrinding>>(productionDataJson,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorDamageGrindingDataFromGrinding>();
                }
            }


            // Get all existing Rotor grinding Data
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var rotorgrindingDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllGrindingData);

            if (rotorgrindingDatasResponse.IsSuccessStatusCode)
            {
                var productionDataJson = await rotorgrindingDatasResponse.Content.ReadAsStringAsync();

                if (!string.IsNullOrEmpty(productionDataJson))
                {
                    RotorgrindingDatas = JsonSerializer.Deserialize<List<RotorGrindingData>>(productionDataJson,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorGrindingData>();
                }
            }

            // Get all existing RotorProductionData
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var rotorSalesDatasResponse = await HttpClient.GetAsync(ApiConstants.GetAllProductionData);

            if (rotorSalesDatasResponse.IsSuccessStatusCode)
            {
                var data = await rotorSalesDatasResponse.Content.ReadAsStringAsync();
                var allInspections = JsonSerializer.Deserialize<List<RotorProductionData>>(data,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorProductionData>();

                // Exclude inspections that already exist in rotorgrindingDatas (based on SerialNumber, Module, RotorsNumber)
                RotorProductionDatas = allInspections
                .Where(i => !RotorgrindingDatas.Any(r =>
                    string.Equals(r.SerialNumber, i.SerialNumber, StringComparison.OrdinalIgnoreCase) &&
                    string.Equals(r.Module, i.Module, StringComparison.OrdinalIgnoreCase) &&
                    string.Equals(r.RotorsNumber, i.RotorsNumber, StringComparison.OrdinalIgnoreCase)) &&
                       !RotorDamageDuringgrindingData.Any(d =>
                    string.Equals(d.SerialNumber, i.SerialNumber, StringComparison.OrdinalIgnoreCase)))
                   .ToList();
                StateHasChanged();

            }
        }
    }


    private string SelectedRowClassFunc(RotorProductionData element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            clickedEvents.Add("Selected Row: None");
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            clickedEvents.Add($"Selected Row: {rowNumber}");
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

}
