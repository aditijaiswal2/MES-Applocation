@page "/rii"


@using MES.Client.Pages.Account;
@using ReactorBlazorQRCodeScanner;
@using Microsoft.JSInterop;
@using MES.Shared.Models.Rotors;
@using MudBlazor;
@inject HttpClient HttpClient
@inject ISnackbar Snackbar

@inject IJSRuntime JS;

@inherits BaseAuthentication;

<MudContainer Style="overflow:hidden" Class="mt-5">
    <MudGrid Class="d-flex justify-center">
        @*    <MudItem md="12" sm="12" xs="12" class="d-flex flex-column align-items-center justify-content-center mb-2" style="text-align: center;">
            <MudText Typo="Typo.h6" Style="font-size: 16px;">Incoming Inspection</MudText>
        </MudItem> *@
        <MudItem md="12" sm="12" xs="12" class="d-flex flex-column align-items-center justify-content-center mb-2" style="text-align: center;">
            <div>
                <MudButton @onclick="StartScanning" Variant="Variant.Filled" Color="Color.Primary" Style="width: 100px;">Scan QR</MudButton>
                @if (isCancel)
                {
                    <MudButton @onclick="StopScanning" Variant="Variant.Filled" Color="Color.Error" Style="width: 100px; margin-left:8px;">Cancel</MudButton>
                }
            </div>
        </MudItem>
        <MudItem md="12" sm="12" xs="12" Class="d-flex justify-center align-center">
            @if (isScanning)
            {
                <div class="d-flex justify-center" style="width: 350px; height: 350px;">
                    <QRCodeScanner LoadingMessage="" />
                </div>
            }

        </MudItem>
        <MudItem md="12" sm="12" xs="12" Class="d-flex justify-center align-center" Style="margin-top:-20px">
            @if (!string.IsNullOrEmpty(qrCodeData))
            {
                <div>
                    @*  <MudText Class="d-flex justify-center align-center">Incoming Inspection</MudText>
                    *@ <div class="border border-primary p-10 mt-2 d-flex flex-wrap">
                        @foreach (var item in qrCodeData.Split(','))
                        {
                            <p class="qr-item">@item.Trim()</p>
                        }
                    </div>

                    <!-- Display Form -->
                    <MudCard Class="mt-4 p-4 w-100">
                        <MudCardContent>
                            <MudText Typo="Typo.h6">Enter Details</MudText>
                            <MudForm Class="w-100">

                                <MudGrid>
                                    <MudGrid>
                                        <MudItem md="4" xs="12">
                                            <MudTextField Label="Sales Order" @bind-Value="inspection.SalesOrderNumber" Required="true" FullWidth="true" />
                                        </MudItem>
                                        <MudItem md="4" xs="12">
                                            <MudTextField Label="Work Order" @bind-Value="inspection.WorkOrder" Required="true" FullWidth="true" />
                                        </MudItem>
                                        <MudItem md="4" xs="12">
                                            <MudTextField Label="Mat#" @bind-Value="inspection.MatNumber" Required="true" FullWidth="true" />
                                        </MudItem>
                                    </MudGrid>
                                    <MudGrid>

                                        <MudItem xs="12" md="3">
                                            <MudTextField Label="Customer" @bind-Value="inspection.Customer" FullWidth="true" Class="custom-textfield" />
                                        </MudItem>
                                        <MudItem xs="12" md="3">
                                            <MudTextField Label="Location" @bind-Value="inspection.Location" FullWidth="true" Class="custom-textfield" />
                                        </MudItem>
                                        <MudItem xs="12" md="3">
                                            <MudTextField Label="Received" @bind-Value="inspection.Received" FullWidth="true" Class="custom-textfield" />
                                        </MudItem>
                                        <MudItem xs="12" md="3">
                                            <MudTextField Label="Inspected" @bind-Value="inspection.Inspected" FullWidth="true" Class="custom-textfield" />
                                        </MudItem>

                                    </MudGrid>
                                    <MudGrid>

                                        <MudItem xs="12" md="4">
                                            <MudTextField Label="Rotors#" @bind-Value="inspection.RotorsNumber" FullWidth="true" Class="custom-textfield" />
                                        </MudItem>
                                        <MudItem xs="12" md="4">
                                            <MudTextField Label="Initials" @bind-Value="inspection.Initials" FullWidth="true" Class="custom-textfield" />
                                        </MudItem>
                                        <MudItem xs="12" md="4">
                                            <MudTextField Label="Make" @bind-Value="inspection.Make" FullWidth="true" Class="custom-textfield" />
                                        </MudItem>

                                    </MudGrid>
                                    <MudGrid Justify="Justify.FlexStart" Spacing="2">
                                        <MudItem xs="12" md="3">
                                            <MudTextField Label="Dia" @bind-Value="inspection.Dia" FullWidth="true" Class="custom-textfield" />
                                        </MudItem>
                                        <MudItem xs="12" md="3">
                                            <MudTextField Label="Len" @bind-Value="inspection.Len" FullWidth="true" Class="custom-textfield" />
                                        </MudItem>
                                        <MudItem xs="12" md="2">
                                            <MudTextField Label="Fits" @bind-Value="inspection.Fits" FullWidth="true" Class="custom-textfield" />
                                        </MudItem>
                                        <MudItem xs="12" md="2">
                                            <MudSelect T="string" Label="Materials" @bind-SelectedValue="selectedMaterial" FullWidth="true" ValueChanged="OnMaterialChanged" Class="custom-select">
                                                @foreach (var material in materials)
                                                {
                                                    <MudSelectItem Value="@material">@material</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>
                                        <MudItem xs="12" md="2">
                                            <MudTextField Label="Others" @bind-Value="inspection.Others" FullWidth="true" Class="custom-textfield" />
                                        </MudItem>
                                    </MudGrid>

                                    <MudGrid>
                                        <MudItem xs="0" md="6"></MudItem> <!-- Empty space on left -->
                                        <MudItem xs="12" md="6">
                                            <MudTextField Label="Rotor Dia." @bind-Value="inspection.RotorsDia" FullWidth="true" />
                                        </MudItem>
                                    </MudGrid>

                                    <MudGrid Spacing="2">
                                        <MudItem xs="12" md="4">
                                            <MudSelect T="string" Label="Rotor Style" @bind-SelectedValue="selectedRotorStyle" ValueChanged="OnRotorStyleChanged" FullWidth="true" Class="custom-select">
                                                @foreach (var rotorstyle in RotorStyle)
                                                {
                                                    <MudSelectItem Value="@rotorstyle">@rotorstyle</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>

                                        <MudItem xs="12" md="4">
                                            <MudSelect T="string" Label="Type" @bind-SelectedValue="selectedType" FullWidth="true" ValueChanged="OnTypeChanged" Class="custom-select">
                                                @foreach (var type in Type)
                                                {
                                                    <MudSelectItem Value="@type">@type</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>

                                        <MudItem xs="12" md="4">
                                            <MudSelect T="string" Label="Bearing Removed" @bind-SelectedValue="selectedberrem" ValueChanged="OnbearremoveChanged" FullWidth="true" Class="custom-select">
                                                @foreach (var ber in berrem)
                                                {
                                                    <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>
                                    </MudGrid>

                                    <MudGrid Justify="Justify.FlexStart" Spacing="3">
                                        <MudItem xs="12" md="4">
                                            <MudSelect T="string" Label="Bearings" @bind-SelectedValue="selectedBearings" ValueChanged="OnbearChanged" FullWidth="true" Class="custom-select">
                                                @foreach (var bearing in Bearings)
                                                {
                                                    <MudSelectItem Value="@bearing">@bearing</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>

                                        <MudItem xs="12" md="4">
                                            <MudSelect T="string" Label="Bearing Seals" @bind-SelectedValue="selectedBearSeals" ValueChanged="OnbearingsealChanged" FullWidth="true" Class="custom-select">
                                                @foreach (var bearseal in BearSeals)
                                                {
                                                    <MudSelectItem Value="@bearseal">@bearseal</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>

                                        <MudItem xs="12" md="4">
                                            <MudSelect T="string" Label="Ceramic Seals" @bind-SelectedValue="selectedCerSeals" ValueChanged="OnbearcerChanged" FullWidth="true" Class="custom-select">
                                                @foreach (var cerseal in CerSeals)
                                                {
                                                    <MudSelectItem Value="@cerseal">@cerseal</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>
                                    </MudGrid>

                                    <MudGrid>
                                        <MudItem xs="12" md="6">
                                            <MudSelect T="string" Label="Bearing Journal Dia (Right)" @bind-SelectedValue="selectedRL" ValueChanged="OnrlChanged" FullWidth="true" Class="custom-select">
                                                @foreach (var rl in RL)
                                                {
                                                    <MudSelectItem Value="@rl">@rl</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>

                                        <MudItem xs="12" md="6">
                                            <MudSelect T="string" Label="Bearing Journal Dia (Left)" @bind-SelectedValue="selectedRL" ValueChanged="OnlrChanged" FullWidth="true" Class="custom-select">
                                                @foreach (var rl in RL)
                                                {
                                                    <MudSelectItem Value="@rl">@rl</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>
                                    </MudGrid>

                                    <MudGrid Spacing="2">
                                        <MudItem xs="12" md="6">
                                            <MudSelect T="string" Label="Basic Sharpening" @bind-SelectedValue="selectedberrem" ValueChanged="OnbasicsharpChanged" FullWidth="true" Class="custom-select">
                                                @foreach (var ber in berrem)
                                                {
                                                    <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>

                                        <MudItem xs="12" md="6">
                                            <MudSelect T="string" Label="Wedgelock Alignment Marks; Present" @bind-SelectedValue="selectedberrem" ValueChanged="OnpresentChanged" FullWidth="true" Class="custom-select">
                                                @foreach (var ber in berrem)
                                                {
                                                    <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>
                                    </MudGrid>
                                    <MudGrid Justify="Justify.SpaceBetween" Spacing="2">

                                        <MudItem xs="12" md="4">
                                            <MudSelect T="string" Label="Center Grinding" @bind-SelectedValue="selectedberrem" ValueChanged="OncgChanged" FullWidth="true" Class="custom-select">
                                                @foreach (var ber in berrem)
                                                {
                                                    <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>

                                        <MudItem xs="12" md="4">
                                            <MudSelect T="string" Label="Aligned" @bind-SelectedValue="selectedberrem" ValueChanged="OnalignChanged" FullWidth="true" Class="custom-select">
                                                @foreach (var ber in berrem)
                                                {
                                                    <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>

                                        <MudItem xs="12" md="4">
                                            <MudSelect T="string" Label="Plastic Sleeves" @bind-SelectedValue="selectedberrem" ValueChanged="OnpsChanged" FullWidth="true" Class="custom-select">
                                                @foreach (var ber in berrem)
                                                {
                                                    <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>

                                    </MudGrid>


                                    <MudGrid Justify="Justify.FlexStart" Spacing="3">
                                        <!-- Second Row -->
                                        <MudItem xs="12" md="3">
                                            <MudSelect T="string" Label="Welding" @bind-SelectedValue="selectedberrem" ValueChanged="OnwelChanged" FullWidth="true" Class="custom-select">
                                                @foreach (var ber in berrem)
                                                {
                                                    <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>

                                        <MudItem xs="12" md="3">
                                            <MudSelect T="string" Label="Bed Knife in Box" @bind-SelectedValue="selectedberrem" ValueChanged="OnbkbChanged" FullWidth="true" Class="custom-select">
                                                @foreach (var ber in berrem)
                                                {
                                                    <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>

                                        <MudItem xs="12" md="6">
                                            <MudTextField Label="Replace Blades" @bind-Value="inspection.BoxReceivedWithSaddles" FullWidth="true" Class="custom-textfield" />
                                        </MudItem>
                                    </MudGrid>

                                    <MudGrid>

                                        @*  <MudItem xs="12" md="6">
            <MudTextField Label="Re-Profile" @bind-Value="inspection.ReProfile" FullWidth="true" Class="custom-textfield" />
        </MudItem> *@

                                        <MudItem xs="12" md="2">
                                            <MudSelect T="string" Label="Re-Profile" ValueChanged="OnrpChanged" @bind-SelectedValue="selectedberrem" FullWidth="true" Class="custom-select">
                                                @foreach (var ber in berrem)
                                                {
                                                    <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>
                                        @*  <MudItem xs="12" md="6">
            <MudTextField Label="Sand Blasting" @bind-Value="inspection.SandBlasting" FullWidth="true" Class="custom-textfield" />
        </MudItem> *@


                                        <MudItem xs="12" md="2">
                                            <MudSelect T="string" Label="Sand Blasting" @bind-SelectedValue="selectedberrem" ValueChanged="OnsbChanged" FullWidth="true" Class="custom-select">
                                                @foreach (var ber in berrem)
                                                {
                                                    <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>
                                        <MudItem xs="12" md="6">
                                            <MudTextField Label="Manual Labor" @bind-Value="inspection.ManualLabor" FullWidth="true" Class="custom-textfield" />
                                        </MudItem>

                                    </MudGrid>

                                    <MudGrid>
                                        <MudItem xs="12" md="3">
                                            <MudSelect T="string" Label="Box Received with Saddles (Bottom)" ValueChanged="OnbtChanged" @bind-SelectedValue="selectedbt" FullWidth="true" Class="custom-select">
                                                @foreach (var ber in bt)
                                                {
                                                    <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>

                                        <MudItem xs="12" md="3">
                                            <MudSelect T="string" Label="Box Received with Saddles (Top)" @bind-SelectedValue="selectedbt" FullWidth="true" ValueChanged="OntbChanged" Class="custom-select">
                                                @foreach (var ber in bt)
                                                {
                                                    <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>

                                        <MudItem xs="12" md="6">
                                            <MudNumericField Label="Add QTY" @bind-Value="inspection.AddQty" FullWidth="true" />
                                        </MudItem>
                                    </MudGrid>

                                    <!-- Ensure MudPaper is inside a MudGrid and MudItems are within it -->
                                    <MudGrid Class="full-width-grid">
                                        <MudItem xs="12">
                                            <MudPaper Class="bordered-container" Elevation="1">
                                                <h3>SET-UP</h3>
                                                <MudGrid>
                                                    <MudItem xs="12" md="6">
                                                        <MudTextField Label="Set-up Tir Left Journal" @bind-Value="inspection.TirLeftJournal" FullWidth="true" />
                                                    </MudItem>
                                                    <MudItem xs="12" md="6">
                                                        <MudTextField Label="Set-up Tir Right Journal" @bind-Value="inspection.TirRightJournal" FullWidth="true" />
                                                    </MudItem>
                                                </MudGrid>
                                            </MudPaper>
                                        </MudItem>
                                    </MudGrid>


                                    <MudItem xs="12" md="6"><MudTextField Label="Saddle Part Number" @bind-Value="inspection.SaddlePartNumber" FullWidth="true" /></MudItem>

                                    <MudItem xs="12" Class="d-flex justify-center mt-4">
                                        <MudButton OnClick="SubmitForm" Color="Color.Primary" Variant="Variant.Filled">Submit</MudButton>
                                    </MudItem>
                                </MudGrid>

                            </MudForm>
                        </MudCardContent>
                    </MudCard>

                </div>
            }
            else if (cameraError)
            {
                <MudText Color="Color.Error">Camera access was blocked. Please allow camera access to scan QR codes.</MudText>
            }
        </MudItem>
    </MudGrid>
</MudContainer>

<style>
    .bordered-container {
    width: 100%;
    max-width: 100%;
    border: 2px solid #ccc;
    border-radius: 8px;
    padding: 30px;
    margin-bottom: 16px;
    box-sizing: border-box;
    }


    .qr-item {
    margin: 1.5rem;
    font-size: 16px;
    white-space: nowrap; /* Ensures text stays in one line */
    }


    .full-width-grid {
    width: 100%;
    margin: 0;
    }

</style>

@code {
    private QRCodeScannerJsInterop? _qrCodeScannerJsInterop;
    private Action<string>? _onQrCodeScanAction;
    private Action<string>? _onCameraPermissionFailedAction;
    private QRCodeScanner qrCodeScanner;

    private IncomingInspection inspection { get; set; } = new IncomingInspection();

    private List<string> Type = new()
    {
        "Wedgelock",
        "Solid",
        "shell/shaft",
        "Bolt-on",
        "Copperbar",
        "Inlay",
        "Meister",
        "Shell Only"
    };

    private string selectedType { get; set; } = "";

    private List<string> RotorStyle = new()
    {
        "Automatik",
        "Conair",
        "Cumberland",
        "Scheer",
        "Accapak",
        "Rieter"
    };

    private string selectedRotorStyle { get; set; } = "";

    private List<string> berrem = new()
    {
        "Yes",
        "No"

    };

    private string selectedberrem { get; set; } = "";

    private List<string> bt = new()
    {
        "Yes",
        "No",
        "N/A"

    };

    private string selectedbt { get; set; } = "";

    private List<string> Bearings = new()
    {
        "Replace",
        "No"

    };

    private string selectedBearings { get; set; } = "";

    private List<string> RL = new()
    {
        "Okay",
        "Repair"

    };

    private string selectedRL { get; set; } = "";

    //selectedCerSeals
    private List<string> CerSeals = new()
    {
        "Okay",
        "Replace Inner x1",
        "Replace Inner x2",
        "Replace Outer x1",
        "Replace Outer x2",

    };

    private string selectedCerSeals { get; set; } = "";

    private List<string> BearSeals = new()
    {
        "Okay",
        "Replace Inner x1",
        "Replace Inner x2",
        "Replace Outer x1",
        "Replace Outer x2",
        "All"
    };

    private string selectedBearSeals { get; set; } = "";

    private List<string> materials = new()
    {
        "Stellite",
        "Carbide",
        "CPM",
        "D-2",
        "440C",
        "M-2"
    };

    private string selectedMaterial { get; set; } = "";

    protected override void OnInitialized()
    {
        // Dynamically set the first material if the list is not empty
        selectedMaterial = materials.FirstOrDefault() ?? "";
        selectedRotorStyle = RotorStyle.FirstOrDefault() ?? "";
        selectedType = Type.FirstOrDefault() ?? "";
        selectedberrem = berrem.FirstOrDefault() ?? "";
        selectedBearings = Bearings.FirstOrDefault() ?? "";
        selectedBearSeals = BearSeals.FirstOrDefault() ?? "";
        selectedCerSeals = CerSeals.FirstOrDefault() ?? "";
        selectedRL = RL.FirstOrDefault() ?? "";
        selectedbt = bt.FirstOrDefault() ?? "";

    }

    private async Task OnMaterialChanged(string value)
    {
        selectedMaterial = value;

    }

    private async Task OnRotorStyleChanged(string value)
    {
        selectedRotorStyle = value;
    }

    private async Task OnTypeChanged(string value)
    {
        selectedType = value;
    }

    private async Task OnbearremoveChanged(string value)
    {
        selectedberrem = value;

    }

    private async Task OnbearChanged(string value)
    {
        selectedBearings = value;
    }

    private async Task OnbearingsealChanged(string value)
    {
        selectedBearSeals = value;
    }

    private async Task OnbearcerChanged(string value)
    {
        selectedCerSeals = value;

    }

    private async Task OnrlChanged(string value)
    {
        selectedRL = value;
    }

    private async Task OnlrChanged(string value)
    {
        selectedRL = value;
    }

    private async Task OnbasicsharpChanged(string value)
    {
        selectedberrem = value;
    }

    private async Task OnpresentChanged(string value)
    {
        selectedberrem = value;
    }

    private async Task OncgChanged(string value)
    {
        selectedberrem = value;

    }

    private async Task OnalignChanged(string value)
    {
        selectedberrem = value;
    }

    private async Task OnpsChanged(string value)
    {
        selectedberrem = value;
    }

    private async Task OnwelChanged(string value)
    {
        selectedberrem = value;
    }

    private async Task OnbkbChanged(string value)
    {
        selectedberrem = value;
    }

    private async Task OnrpChanged(string value)
    {
        selectedberrem = value;

    }

    private async Task OnsbChanged(string value)
    {
        selectedberrem = value;
    }

    private async Task OnbtChanged(string value)
    {
        selectedbt = value;
    }

    private async Task OntbChanged(string value)
    {
        selectedbt = value;
    }

private async void SubmitForm()
{
    try
    {
        // Assign scanned QR Code data if available
        if (!string.IsNullOrEmpty(qrCodeData))
        {
            var qrDetails = qrCodeData.Split(',');

            if (qrDetails.Length >= 3) // Ensure QR Code has expected fields
            {
                    inspection.SerialNumber = ExtractValue(qrDetails[0]);
                    inspection.Module = ExtractValue(qrDetails[1]);
                    inspection.Users = ExtractValue(qrDetails[2]);
            }
            else
            {
                Snackbar.Add("Invalid QR Code format. Please scan again.", Severity.Warning);
                return;
            }
        }
        else
        {
            Snackbar.Add("No QR code scanned. Please scan a QR code before submitting.", Severity.Warning);
            return;
        }

        // Update other fields
        inspection.Materials = selectedMaterial;
        inspection.RotorStyle = selectedRotorStyle;
        inspection.Type = selectedType;
        inspection.BearingRemoved = selectedberrem;
        inspection.Bearing = selectedBearings;
        inspection.BearingSeals = selectedBearSeals;
        inspection.CeramicSeals = selectedCerSeals;
        inspection.Right = selectedRL;
        inspection.Left = selectedRL;
        inspection.BasicSharpening = selectedberrem;
        inspection.WedgelockAlignmentMarks = selectedberrem;
        inspection.CenterGrinding = selectedberrem;
        inspection.Aligned = selectedberrem;
        inspection.PlasticSleaves = selectedberrem;
        inspection.Welding = selectedberrem;
        inspection.BedKnife = selectedberrem;
        inspection.Bottom = selectedbt;
        inspection.Top = selectedbt;
        inspection.SandBlasting = selectedbt;
        inspection.ReProfile = selectedbt;

        // Ensure required fields are filled
        if (string.IsNullOrEmpty(selectedMaterial) || string.IsNullOrEmpty(selectedType) || string.IsNullOrEmpty(selectedRotorStyle))
        {
            Snackbar.Add("Please fill in all required fields before submitting.", Severity.Warning);
            return;
        }

        inspection.DateTime = DateTime.Today;

        var response = await HttpClient.PostAsJsonAsync("https://localhost:7172/api/IncomingInspection/PostIncomingdata", inspection);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Form submitted successfully!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Error submitting form.", Severity.Error);
        }
    }
    catch (Exception ex)
    {
        Snackbar.Add($"Error: {ex.Message}", Severity.Error);
    }
}


    private void OnQrCodeScan(string code)
    {
        qrCodeData = code;
        isScanning = false;
        isCancel = false;
        _qrCodeScannerJsInterop.StopRecording();

        var qrDetails = qrCodeData.Split(',');

        if (qrDetails.Length >= 3) // Ensure the QR code has at least 3 fields
        {
            inspection.Module = qrDetails[0].Trim();
            inspection.Users = qrDetails[1].Trim();
            inspection.SerialNumber = qrDetails[2].Trim();
        }

        showScanDetails = false; // Keep fields hidden initially
        StateHasChanged();
    }



    // Helper function to remove labels and extract only values
    private string ExtractValue(string data)
    {
        var parts = data.Split(':'); // Check if the data has a label like "SerialNumber: 12345"
        return parts.Length > 1 ? parts[1].Trim() : parts[0].Trim(); // Return value without label
    }
    private string qrCodeData;
    private bool isScanning;
    private bool isCancel = false;
    private bool cameraError = false;

    private async Task StartScanning()
    {
        try
        {
            isScanning = true;
            qrCodeData = null;
            cameraError = false;

            _onQrCodeScanAction = (code) => OnQrCodeScan(code);
            _onCameraPermissionFailedAction = (error) => OnCameraPermissionFailed(error);

            _qrCodeScannerJsInterop = new QRCodeScannerJsInterop(JS);
            await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction, _onCameraPermissionFailedAction);

            isCancel = true;
        }
        catch (Exception ex)
        {
            // Handle any unexpected errors
            cameraError = true;
        }

        StateHasChanged(); // Update the UI to show the camera or error message
    }

    private void StopScanning()
    {
        isScanning = false;
        isCancel = false;
        _qrCodeScannerJsInterop?.StopRecording();
        StateHasChanged();
    }

    // private void OnQrCodeScan(string code)
    // {
    //     qrCodeData = code;
    //     isScanning = false;
    //     isCancel = false;
    //     _qrCodeScannerJsInterop.StopRecording();
    //     StateHasChanged();
    // }
    private bool showScanDetails = false;


  


    private void OnCameraPermissionFailed(string error)
    {
        cameraError = true;
        isScanning = false;
        isCancel = false;
        StateHasChanged();
    }
}