    @page "/rii"

@using MES.Client.Dialog.Rotors
@using MES.Client.Pages.Account;
@using MES.Client.Utitlity
@using MES.Shared.DTOs
@using MES.Shared.Entities
@using ReactorBlazorQRCodeScanner;
@using Microsoft.JSInterop;
@using MES.Shared.Models
@using MES.Shared.Models.Rotors;
@using MES.Shared.DTOs.MES.Shared.DTOs.Rotors
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@using System.Text.Json;
@using System.Text
@inject IHttpClientFactory _httpClient
@inject IJSRuntime JSRuntime
@using static MES.Client.Pages.LoginVC
@inject IDialogService DialogService



@inject IDialogCompletionService CompletionService
@inherits BaseAuthentication;

@using Newtonsoft.Json;
@using MudBlazor;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IDialogCompletionService CompletionService


<MudContainer Style="overflow:hidden" Class="mt-5">
    <MudGrid Class="d-flex justify-center">
        @*    <MudItem md="12" sm="12" xs="12" class="d-flex flex-column align-items-center justify-content-center mb-2" style="text-align: center;">
            <MudText Typo="Typo.h6" Style="font-size: 16px;">Incoming Inspection</MudText>
        </MudItem> *@
        <MudItem md="12" sm="12" xs="12" class="d-flex flex-column align-items-center justify-content-center mb-2" style="text-align: center;">
            <div style="gap: 10px;">
                <MudButton @onclick="StartScanning" Variant="Variant.Filled" Color="Color.Primary" Style="width: 100px;">
                    Scan QR
                </MudButton>

                @if (isCancel)
                {
                    <MudButton @onclick="StopScanning" Variant="Variant.Filled" Color="Color.Error" Style="width: 100px; margin-left:8px;">
                        Cancel
                    </MudButton>
                }

                <MudButton @onclick="OpenReceiverecord" Variant="Variant.Filled" Color="Color.Primary" Style="width: 300px; margin-left:8px;">
                    Incoming Inspection
                </MudButton>
            </div>
        </MudItem>

        @if (showContent)
        {
            <MudItem xs="12">
                <div class="d-flex justify-content-start mt-2">
                    <MudPaper Elevation="3" Class="pa-3" Style="width: 300px;">
                        @* You can adjust width *@
                        <MudList Dense="true">
                            @foreach (var item in Receivealldata.Where(i => i.SerialNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
                            {
                                <MudListItem OnClick="() => SelectReceive(item)" Button="true" Class="@(hoveredReceive == item ? "hover-highlight" : null)"
                                             @onmouseover="() => hoveredReceive = item"
                                             @onmouseout="() => hoveredReceive = null">
                                    <MudText>@item.SerialNumber - @item.Customer - @item.SelectedOption</MudText>
                                </MudListItem>
                            }
                        </MudList>
                    </MudPaper>
                </div>
            </MudItem>
        }

        <MudItem md="12" sm="12" xs="12" Class="d-flex justify-center align-center">
            @if (isScanning)
            {
                <div class="d-flex justify-center" style="width: 350px; height: 350px;">
                    <QRCodeScanner LoadingMessage="" />
                </div>
            }

        </MudItem>
        <MudItem md="12" sm="12" xs="12" Class="d-flex justify-center align-center" Style="margin-top:-20px">
            @if ((!string.IsNullOrEmpty(qrCodeData) && !isSubmitted) || (selectedReceive != null && !isSubmitted))
            {
                <div>
                    <div class="border border-primary p-10 mt-2 d-flex flex-wrap">
                        @if (!string.IsNullOrEmpty(qrCodeData))
                        {
                            foreach (var item in qrCodeData.Split(',', StringSplitOptions.RemoveEmptyEntries))
                            {
                                <p class="qr-item">@item.Trim()</p>
                            }
                        }
                        else if (selectedReceive != null)
                        {
                            <p class="qr-item">Serial Number: @selectedReceive.SerialNumber</p>
                            <p class="qr-item">Module Name: @selectedReceive.SelectedOption</p>
                            <p class="qr-item">Customer: @selectedReceive.Customer</p>
                            <p class="qr-item">Date: @selectedReceive.Date.ToString("dd-MM-yyyy HH:mm")</p>

                        }
                    </div>

                    @if (!isExistingSerial)
                    {
                        <!-- Display Form -->
                        <MudCard Class="mt-4 p-4 w-100" id="printForm-section">
                            <MudCardContent>
                                <div class="d-flex justify-center">
                                    <MudText Typo="Typo.h6">INCOMING ROTOR INSPECTION</MudText>
                                </div>  <MudForm Class="w-100">

                                    <MudGrid>
                                        <MudGrid>
                                            <MudItem md="4" xs="12">
                                                <MudTextField Label="Sales Order" @bind-Value="inspection.SalesOrderNumber" FullWidth="true" Variant="Variant.Outlined" />
                                            </MudItem>
                                            <MudItem md="4" xs="12">
                                                <MudTextField Label="Work Order" @bind-Value="inspection.WorkOrder" FullWidth="true" Variant="Variant.Outlined" />
                                            </MudItem>
                                            <MudItem md="4" xs="12">
                                                <MudTextField Label="Mat#" @bind-Value="inspection.MatNumber" FullWidth="true" Variant="Variant.Outlined" />
                                            </MudItem>
                                        </MudGrid>
                                        <MudGrid>

                                            <MudItem xs="12" md="3">
                                                <MudTextField Label="Customer" @bind-Value="inspection.Customer" FullWidth="true" Variant="Variant.Outlined" Class="custom-textfield" Required="true" />
                                            </MudItem>
                                            <MudItem xs="12" md="3">
                                                <MudTextField Label="Location" @bind-Value="inspection.Location" FullWidth="true" Variant="Variant.Outlined" Class="custom-textfield" Required="true" />
                                            </MudItem>
                                            <MudItem xs="12" md="3">
                                                <MudTextField Label="Received Date" @bind-Value="inspection.Received" FullWidth="true" Variant="Variant.Outlined" Class="custom-textfield" Required="true" ReadOnly />
                                            </MudItem>
                                            <MudItem xs="12" md="3">
                                                <MudTextField Label="Inspected by" @bind-Value="inspection.Inspected" FullWidth="true" Variant="Variant.Outlined" Class="custom-textfield" Required="true" ReadOnly />
                                            </MudItem>

                                        </MudGrid>
                                        <MudGrid>

                                            <MudItem xs="12" md="4">
                                                <MudTextField Label="Rotors#" @bind-Value="inspection.RotorsNumber" FullWidth="true" Variant="Variant.Outlined" Class="custom-textfield" Required="true" />
                                            </MudItem>
                                            <MudItem xs="12" md="4">
                                                <MudTextField Label="Initials" @bind-Value="inspection.Initials" FullWidth="true" Class="custom-textfield" Variant="Variant.Outlined" />
                                            </MudItem>
                                            <MudItem xs="12" md="4">
                                                <MudTextField Label="Make" @bind-Value="inspection.Make" FullWidth="true" Class="custom-textfield" Variant="Variant.Outlined" />
                                            </MudItem>

                                        </MudGrid>
                                        <MudGrid Justify="Justify.FlexStart" Spacing="2">
                                            <MudItem xs="12" md="3">
                                                <MudTextField Label="Dia" @bind-Value="inspection.Dia" FullWidth="true" Class="custom-textfield" Variant="Variant.Outlined" />
                                            </MudItem>
                                            <MudItem xs="12" md="3">
                                                <MudTextField Label="Len" @bind-Value="inspection.Len" FullWidth="true" Class="custom-textfield" Variant="Variant.Outlined" />
                                            </MudItem>
                                            <MudItem xs="12" md="2">
                                                <MudTextField Label="Fits" @bind-Value="inspection.Fits" FullWidth="true" Class="custom-textfield" Variant="Variant.Outlined" />
                                            </MudItem>
                                            <MudItem xs="12" md="2">
                                                <MudSelect T="string" Label="Materials" @bind-SelectedValue="selectedMaterial" FullWidth="true" Variant="Variant.Outlined" ValueChanged="OnMaterialChanged">
                                                    @foreach (var material in materials)
                                                    {
                                                        <MudSelectItem Value="@material">@material</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>
                                            <MudItem xs="12" md="2">
                                                <MudTextField Label="Others" @bind-Value="inspection.Others" FullWidth="true" Variant="Variant.Outlined" />
                                            </MudItem>
                                        </MudGrid>

                                        <MudGrid>

                                            <MudItem xs="12" md="12">
                                                <MudTextField Label="Rotor Dia." @bind-Value="inspection.RotorsDia" FullWidth="true" Variant="Variant.Outlined" />
                                            </MudItem>
                                        </MudGrid>

                                        <MudGrid Spacing="2">
                                            <MudItem xs="12" md="4">
                                                <MudSelect T="string" Label="Rotor Style" @bind-SelectedValue="selectedRotorStyle" ValueChanged="OnRotorStyleChanged" Variant="Variant.Outlined" FullWidth="true">
                                                    @foreach (var rotorstyle in RotorStyle)
                                                    {
                                                        <MudSelectItem Value="@rotorstyle">@rotorstyle</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>

                                            <MudItem xs="12" md="4">
                                                <MudSelect T="string" Label="Type" @bind-SelectedValue="selectedType" FullWidth="true" Variant="Variant.Outlined" ValueChanged="OnTypeChanged">
                                                    @foreach (var type in Type)
                                                    {
                                                        <MudSelectItem Value="@type">@type</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>

                                            <MudItem xs="12" md="4">
                                                <MudSelect T="string" Label="Bearing Removed" @bind-SelectedValue="selectedberrem" Variant="Variant.Outlined" ValueChanged="OnbearremoveChanged" FullWidth="true">
                                                    @foreach (var ber in berrem)
                                                    {
                                                        <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>
                                        </MudGrid>

                                        <MudGrid Justify="Justify.FlexStart" Spacing="3">
                                            <MudItem xs="12" md="4">
                                                <MudSelect T="string" Label="Bearings" @bind-SelectedValue="selectedBearings" Variant="Variant.Outlined" ValueChanged="OnbearChanged" FullWidth="true">
                                                    @foreach (var bearing in Bearings)
                                                    {
                                                        <MudSelectItem Value="@bearing">@bearing</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>

                                            <MudItem xs="12" md="4">
                                                <MudSelect T="string" Label="Bearing Seals" MultiSelection="true" @bind-SelectedValue="selectedBearSeals" ValueChanged="OnbearingselasChanged" Variant="Variant.Outlined" FullWidth="true">
                                                    @foreach (var bearseal in BearSeals)
                                                    {

                                                        @* <MudSelectItem Value="@bearseal" Disabled="@(bearseal == "Okay" || bearseal == "Replace")">@bearseal</MudSelectItem>
 *@
                                                        var cssClass = (bearseal == "Okay" || bearseal == "Replace") ? "no-checkbox" : null;

                                                        <MudSelectItem Value="@bearseal" Class="@cssClass"></MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>

                                            <MudItem xs="12" md="4">
                                                <MudSelect T="string" Label="Ceramic Seals" @bind-SelectedValue="selectedCerSeals" Variant="Variant.Outlined" ValueChanged="OnbearcerChanged" FullWidth="true">
                                                    @foreach (var cerseal in CerSeals)
                                                    {
                                                        <MudSelectItem Value="@cerseal">@cerseal</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>
                                        </MudGrid>

                                        <MudGrid>
                                            <MudItem xs="12" md="6">
                                                <MudSelect T="string" Label="Bearing Journal Dia (Right)" @bind-SelectedValue="selectedRL" Variant="Variant.Outlined" ValueChanged="OnrlChanged" FullWidth="true">
                                                    @foreach (var rl in RL)
                                                    {
                                                        <MudSelectItem Value="@rl">@rl</MudSelectItem>
                                                    }
                                                </MudSelect>

                                                <MudTextField @bind-Value="inspection.yRight" Variant="Variant.Outlined" FullWidth="true" />
                                            </MudItem>

                                            <MudItem xs="12" md="6">
                                                <MudSelect T="string" Label="Bearing Journal Dia (Left)" @bind-SelectedValue="selectedLR" Variant="Variant.Outlined" ValueChanged="OnlrChanged" FullWidth="true">
                                                    @foreach (var rl in LR)
                                                    {
                                                        <MudSelectItem Value="@rl">@rl</MudSelectItem>
                                                    }
                                                </MudSelect>


                                                <MudTextField @bind-Value="inspection.yLeft" Variant="Variant.Outlined" FullWidth="true" />
                                            </MudItem>
                                        </MudGrid>

                                        <MudGrid Spacing="2">
                                            <MudItem xs="12" md="6">
                                                <MudSelect T="string" Label="Basic Sharpening" @bind-SelectedValue="selectedbs" Variant="Variant.Outlined" ValueChanged="OnbasicsharpChanged" FullWidth="true">
                                                    @foreach (var ber in bs)
                                                    {
                                                        <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                    }
                                                </MudSelect>

                                                @if (selectedbs == "Yes")
                                                {
                                                    <MudSelect T="string"
                                                               @bind-SelectedValue="selectedybasicsharp" Variant="Variant.Outlined"
                                                               ValueChanged="OnybasicsharpChanged"
                                                               FullWidth="true"
                                                               Class="custom-select">
                                                        @foreach (var ber in ybasicsharp)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                }
                                            </MudItem>

                                            <MudItem xs="12" md="6">
                                                <MudSelect T="string" Label="Wedgelock Alignment Marks; Present" Variant="Variant.Outlined" @bind-SelectedValue="selectedpre" ValueChanged="OnpresentChanged" FullWidth="true">
                                                    @foreach (var ber in pre)
                                                    {
                                                        <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>
                                        </MudGrid>
                                        <MudGrid Justify="Justify.SpaceBetween" Spacing="2">

                                            <MudItem xs="12" md="4">
                                                <MudSelect T="string" Label="Center Grinding" Variant="Variant.Outlined" @bind-SelectedValue="selectedctr" ValueChanged="OncgChanged" FullWidth="true">
                                                    @foreach (var ber in ctr)
                                                    {
                                                        <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                    }
                                                </MudSelect>

                                                @if (selectedctr == "Yes")
                                                {
                                                    <MudSelect T="string"
                                                               @bind-SelectedValue="selectedycg"
                                                               ValueChanged="OnycgChanged"
                                                               FullWidth="true" Variant="Variant.Outlined"
                                                               Class="custom-select">
                                                        @foreach (var ber in ycg)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                }
                                            </MudItem>

                                            <MudItem xs="12" md="4">
                                                <MudSelect T="string" Label="Aligned" Variant="Variant.Outlined" @bind-SelectedValue="selectedalign" ValueChanged="OnalignChanged" FullWidth="true">
                                                    @foreach (var ber in align)
                                                    {
                                                        <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>

                                            <MudItem xs="12" md="4">
                                                <MudSelect T="string" Label="Plastic Sleeves" Variant="Variant.Outlined" @bind-SelectedValue="selectedps" ValueChanged="OnpsChanged" FullWidth="true">
                                                    @foreach (var ber in ps)
                                                    {
                                                        <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>

                                        </MudGrid>


                                        <MudGrid Justify="Justify.FlexStart" Spacing="3">
                                            <!-- First Column -->
                                            <MudItem xs="12" md="4">
                                                <MudSelect T="string" Label="Welding" Variant="Variant.Outlined" @bind-SelectedValue="selectedwelding" ValueChanged="OnwelChanged" FullWidth="true">
                                                    @foreach (var ber in welding)
                                                    {
                                                        <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                    }
                                                </MudSelect>

                                                @if (selectedwelding == "Yes")
                                                {
                                                    <MudTextField @bind-Value="inspection.WeldingNum" Variant="Variant.Outlined" FullWidth="true" />
                                                }
                                            </MudItem>

                                            <!-- Second Column -->
                                            <MudItem xs="12" md="4">
                                                <MudSelect T="string" Label="Bed Knife in Box" @bind-SelectedValue="selectebkid" Variant="Variant.Outlined" ValueChanged="OnbkbChanged" FullWidth="true">
                                                    @foreach (var ber in bkid)
                                                    {
                                                        <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>

                                            <!-- Third Column -->
                                            <MudItem xs="12" md="4">
                                                <MudTextField Label="Replace Blades" @bind-Value="inspection.BoxReceivedWithSaddles" Variant="Variant.Outlined" FullWidth="true" />
                                            </MudItem>
                                        </MudGrid>

                                        <MudGrid>
                                            <MudItem xs="12" md="4">
                                                <MudSelect T="string" Label="Re-Profile" ValueChanged="OnrpChanged" Variant="Variant.Outlined" @bind-SelectedValue="selectedrp" FullWidth="true" Class="custom-select">
                                                    @foreach (var ber in rp)
                                                    {
                                                        <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>

                                            <MudItem xs="12" md="4">
                                                <MudSelect T="string" Label="Sand Blasting" ValueChanged="OnsbChanged" Variant="Variant.Outlined" @bind-SelectedValue="selectedsb" FullWidth="true" Class="custom-select">
                                                    @foreach (var ber in sb)
                                                    {
                                                        <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>

                                            <MudItem xs="12" md="4">
                                                <MudTextField Label="Manual Labor" @bind-Value="inspection.ManualLabor" Variant="Variant.Outlined" FullWidth="true" Class="custom-textfield" />
                                            </MudItem>
                                        </MudGrid>

                                        <!-- 📷 Image Attachment Section -->
                                        <MudGrid Class="full-width-grid">
                                            <MudItem xs="12" style="text-align: center; width: 100%;">
                                                <MudItem md="12" sm="12" xs="12" Class="d-flex justify-center">
                                                    <div style="border: 2px dotted gray; padding: 10px; text-align: center; width: 250px; height: auto">
                                                        <p>Add images</p>

                                                        <!-- Add Button -->
                                                        <MudItem>
                                                            <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(async () => await AddProjectImagesAsync(new ProjectImgDTO {
                        SerialNumber = SelectedProject
                    }))">
                                                                Add
                                                            </MudButton>
                                                        </MudItem>

                                                        <!-- Image Preview -->
                                                        @if (selectedImagesFromSM.Any())
                                                        {
                                                            <div style="margin-top:10px;">
                                                                <p><b>Total Images:</b> @selectedImagesFromSM.SelectMany(x => x.Images).Count()</p>
                                                                <!-- You can show the images here too -->
                                                            </div>
                                                        }


                                                    </div>
                                                </MudItem>
                                            </MudItem>
                                        </MudGrid>


                                        <MudGrid Class="full-width-grid">
                                            <MudItem xs="12">
                                                <MudPaper Class="bordered-container" Elevation="1">
                                                    <div style="text-align: center; width: 100%;">
                                                        <h3>SET-UP</h3>
                                                    </div>
                                                    <MudGrid>
                                                        <MudItem xs="12" md="6">
                                                            <MudTextField Label="Set-up Tir Left Journal" Variant="Variant.Outlined" @bind-Value="inspection.TirLeftJournal" FullWidth="true" />
                                                        </MudItem>
                                                        <MudItem xs="12" md="6">
                                                            <MudTextField Label="Set-up Tir Right Journal" Variant="Variant.Outlined" @bind-Value="inspection.TirRightJournal" FullWidth="true" />
                                                        </MudItem>
                                                    </MudGrid>
                                                </MudPaper>
                                            </MudItem>
                                        </MudGrid>

                                        <MudGrid>
                                            <!-- First Row -->
                                            <MudItem xs="12" md="6">
                                                <MudSelect T="string" Label="Box Received with Saddles (Down)" Variant="Variant.Outlined" ValueChanged="OnbtChanged" @bind-SelectedValue="selectedbt" FullWidth="true">
                                                    @foreach (var ber in bt)
                                                    {
                                                        <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>

                                            <MudItem xs="12" md="6">
                                                <MudSelect T="string" Label="Box Received with Saddles (Top)" Variant="Variant.Outlined" @bind-SelectedValue="selectedtb" FullWidth="true" ValueChanged="OntbChanged">
                                                    @foreach (var ber in tb)
                                                    {
                                                        <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>

                                            <!-- Second Row -->
                                            <MudItem xs="12" md="6">
                                                <MudNumericField Label="Add QTY" @bind-Value="inspection.AddQty" Variant="Variant.Outlined" FullWidth="true" />
                                            </MudItem>

                                            <MudItem xs="12" md="6">
                                                <MudTextField Label="Saddle Part Number" @bind-Value="inspection.SaddlePartNumber" Variant="Variant.Outlined" FullWidth="true" />
                                            </MudItem>
                                        </MudGrid>


                                        <MudGrid>
                                            <MudItem xs="12" md="6">
                                                <MudSelect T="string" Label=" Rotor Categorize " ValueChanged="OnddrcChanged" Variant="Variant.Outlined" @bind-SelectedValue="selectedddrc" FullWidth="true" Class="custom-select" Required="true">
                                                    @foreach (var ber in ddrc)
                                                    {
                                                        <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>

                                            <MudItem xs="12" md="6">
                                                <MudSelect T="string" Label="Sub Module" @bind-SelectedValue="selecteddd" Variant="Variant.Outlined" FullWidth="true" ValueChanged="OnddChanged" Class="custom-select" Required="true">
                                                    @foreach (var ber in dd)
                                                    {
                                                        <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>

                                        </MudGrid>

                                        <MudItem xs="12" Class="d-flex justify-center mt-4" style=" gap: 10px;">
                                            <MudButton OnClick="OpenPreviewDialogBox" Color="Color.Secondary" Variant="Variant.Filled">Preview</MudButton>
                                            @*  <MudButton OnClick="Print" Color="Color.Tertiary" Variant="Variant.Filled">Print</MudButton>
                                       *@  <MudButton OnClick="SubmitForm" Color="Color.Primary" Variant="Variant.Filled">Submit</MudButton>
                                        </MudItem>
                                    </MudGrid>

                                </MudForm>
                            </MudCardContent>
                        </MudCard>
                    }
                    else
                    {

                        <MudText Typo="Typo.h6" Color="Color.Error">This serial number already exists. Please check in Sales.</MudText>

                    }

                </div>
            }
            else if (cameraError)
            {
                <MudText Color="Color.Error">Camera access was blocked. Please allow camera access to scan QR codes.</MudText>
            }
        </MudItem>
    </MudGrid>
</MudContainer>

<style>
    .bordered-container {
        width: 100%;
        max-width: 100%;
        border: 2px solid #ccc;
        border-radius: 8px;
        padding: 30px;
        margin-bottom: 16px;
        box-sizing: border-box;
    }

    .no-checkbox .mud-selected-item-checkbox {
        display: none !important;
    }

    .qr-item {
        margin: 1.5rem;
        font-size: 16px;
        white-space: nowrap; /* Ensures text stays in one line */
    }


    .full-width-grid {
        width: 100%;
        margin: 0;
    }

    .spaced-select .mud-input-label {
        margin-bottom: 6px; /* Adjust as needed */
    }

</style>

@code {
    private QRCodeScannerJsInterop? _qrCodeScannerJsInterop;
    private Action<string>? _onQrCodeScanAction;
    private Action<string>? _onCameraPermissionFailedAction;
    private QRCodeScanner qrCodeScanner;
    private Receiving selectedReceive;
    private bool isSubmitted = false;
    private IncomingInspection inspection { get; set; } = new IncomingInspection();
    private string? SelectedProject { get; set; }
    //private List<IncomingInspection> selectedImagesFromSM = new();
    private List<IncomingImages> selectedImagesFromSM = new List<IncomingImages>();
    // private List<Receiving> Receive = new ();
    private IEnumerable<Receiving> Receive { get; set; } = new List<Receiving>();
    private List<Receiving> Receivealldata = new();
    private string currentuser;
    private Receiving? hoveredReceive;
    private bool showContent = false;
    private string errorMessage = "";
    public IncomingInspectionImageDTO? ProjectimagesData { get; set; }
    private string searchTerm = "";
    bool isFormOpen = false;
    string SelectedSerialNumber;
    string SelectedModuleName;


    private DateTime currentDateTime = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        var userData = await localStorage.GetItemAsync<UserPagesAndRouter>("UserData");

        // Assign user name or default to "User" if userData is null
        string currentuser = userData?.UserName ?? "User";
        inspection.Inspected = currentuser;
        inspection.Received = currentDateTime.ToString();

    }


    // Called when clicking a list item
    // public async Task SelectReceive(Receiving item)
    // {

    //     selectedReceive = item;

    //     // Now get Serial Number and Module Name
    //     SelectedSerialNumber = item.SerialNumber;
    //     SelectedModuleName = item.SelectedOption;

    // }
    public async Task SelectReceive(Receiving item)
    {
        selectedReceive = item;

        SelectedSerialNumber = item.SerialNumber;
        SelectedModuleName = item.SelectedOption;

        showContent = false;

        qrCodeData = null; // ✅ Clear QR code data so UI can show selectedReceive content
        showContent = false;

        StateHasChanged();
    }


    private async Task OpenReceiverecord()
    {
        await StopScanning();

        showContent = true;

        try
        {
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");

            var response = await HttpClient.GetAsync(ApiConstants.GetAllInspectionData);
            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadAsStringAsync();
                var allInspections = System.Text.Json.JsonSerializer.Deserialize<List<Receiving>>(data,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<Receiving>();

                // Now filter the list by checking each Serial Number
                var filteredList = new List<Receiving>();

                foreach (var item in allInspections)
                {
                    // Check if Serial Number exists (Call API for each Serial)
                    var exists = await HttpClient.GetFromJsonAsync<bool>($"{ApiConstants.CheckSerialNumber}/{item.SerialNumber}");

                    if (!exists)
                    {
                        // Only add if Serial does not exist
                        filteredList.Add(item);
                    }
                }

                Receivealldata = filteredList; // Only non-existing serial numbers will be shown now
            }
            else
            {
                errorMessage = $"Error: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception: {ex.Message}";
        }
        finally
        {
            // isLoading = false;
        }
    }


    private List<string> Type = new()
    {
        "Wedgelock",
        "Solid",
        "shell/shaft",
        "Bolt-on",
        "Copperbar",
        "Inlay",
        "Meister",
        "Shell Only"
    };

    private string selectedType { get; set; } = "";

    private List<string> ddrc = new()
    {
        "Simple",
        "Advance",
        "Scrap"

    };

    private string selectedddrc { get; set; } = "";

    private List<string> dd = new()
    {

        "Rotor",
        "Feed Rolls"
    };

    private string selecteddd { get; set; } = "";

    private List<string> ybasicsharp = new()
    {
        "Extra",
        "Match"

    };

    private string selectedybasicsharp { get; set; } = "";

    private List<string> RotorStyle = new()
    {
        "Automatik",
        "Conair",
        "Cumberland",
        "Scheer",
        "Accapak",
        "Rieter"
    };

    private string selectedRotorStyle { get; set; } = "";

    private List<string> berrem = new()
    {
        "Yes",
        "No"

    };

    private string selectedberrem { get; set; } = "";


    private List<string> bs = new()
    {
        "Yes",
        "No"

    };

    private string selectedbs { get; set; } = "";

    private List<string> pre = new()
    {
        "Yes",
        "No"

    };

    private string selectedpre { get; set; } = "";

    private List<string> ctr = new()
    {
        "Yes",
        "No"

    };

    private string selectedctr { get; set; } = "";

    private List<string> ycg = new()
    {
        "Left",
        "Right",
        "Both"

    };

    private string selectedycg { get; set; } = "";

    private List<string> rp = new()
    {
        "Yes",
        "No"

    };

    private string selectedrp { get; set; } = "";

    private List<string> sb = new()
    {
        "Yes",
        "No"

    };

    private string selectedsb { get; set; } = "";




    private List<string> align = new()
    {
        "Yes",
        "No"

    };

    private string selectedalign { get; set; } = "";

    private List<string> ps = new()
    {
        "Yes",
        "No"

    };

    private string selectedps { get; set; } = "";




    private List<string> welding = new()
    {
        "Yes",
        "No"

    };

    private string selectedwelding { get; set; } = "";

    private List<string> bkid = new()
    {
        "Yes",
        "No"

    };

    private string selectebkid { get; set; } = "";

    private List<string> bt = new()
    {
        "Yes",
        "No",
        "N/A"

    };

    private string selectedbt { get; set; } = "";

    private List<string> tb = new()
    {
        "Yes",
        "No",
        "N/A"

    };

    private string selectedtb { get; set; } = "";

    private List<string> Bearings = new()
    {
        "Replace",
        "No"

    };

    private string selectedBearings { get; set; } = "";

    private List<string> RL = new()
    {
        "Okay",
        "Repair"

    };

    private string selectedRL { get; set; } = "";

    private List<string> LR = new()
    {
        "Okay",
        "Repair"

    };

    private string selectedLR { get; set; } = "";

    //selectedCerSeals
    private List<string> CerSeals = new()
    {
        "Okay",
        "Replace Inner x1",
        "Replace Inner x2",
        "Replace Outer x1",
        "Replace Outer x2",

    };

    private string selectedCerSeals { get; set; } = "";

    private List<string> BearSeals = new()
     {
        "Okay",
        "Replace Inner x1",
        "Replace Inner x2",
        "Replace Outer x1",
        "Replace Outer x2",
        "Replace"    };

    private List<string> selectedBearSeals = new List<string>();  // Use List<string>


    private List<string> materials = new()
    {
        "Stellite",
        "Carbide",
        "CPM",
        "D-2",
        "440C",
        "M-2"
    };

    private string selectedMaterial { get; set; } = "";



    private async Task OnMaterialChanged(string value)
    {
        selectedMaterial = value;

    }

    private async Task OnRotorStyleChanged(string value)
    {
        selectedRotorStyle = value;
    }

    private async Task OnTypeChanged(string value)
    {
        selectedType = value;
    }

    private async Task OnbearremoveChanged(string value)
    {
        selectedberrem = value;

    }

    private async Task OnbearChanged(string value)
    {
        selectedBearings = value;
    }

    //selectedBearSeals
    private async Task OnbearingselasChanged(string values)
    {
        // Split the string by comma to convert it to a string array
        selectedBearSeals = values.Split(',').ToList();  // If you want a List<string>
    }



    private async Task OnbearcerChanged(string value)
    {
        selectedCerSeals = value;

    }

    //OnddChanged

    private async Task OnddChanged(string value)
    {
        selecteddd = value;

    }

    private async Task OnddrcChanged(string value)
    {
        selectedddrc = value;

    }

    private async Task OnrlChanged(string value)
    {
        selectedRL = value;
    }

    private async Task OnlrChanged(string value)
    {
        selectedLR = value;
    }

    private async Task OnbasicsharpChanged(string value)
    {
        selectedbs = value;
    }

    private async Task OnpresentChanged(string value)
    {
        selectedpre = value;
    }

    private async Task OncgChanged(string value)
    {
        selectedctr = value;

    }

    //OnycgChanged
    private async Task OnycgChanged(string value)
    {
        selectedycg = value;

    }

    private async Task OnybasicsharpChanged(string value)
    {
        selectedybasicsharp = value;

    }

    private async Task OnalignChanged(string value)
    {
        selectedalign = value;
    }

    private async Task OnpsChanged(string value)
    {
        selectedps = value;
    }

    private async Task OnwelChanged(string value)
    {
        selectedwelding = value;
    }

    private async Task OnbkbChanged(string value)
    {
        selectebkid = value;
    }

    private async Task OnrpChanged(string value)
    {
        selectedrp = value;

    }

    private async Task OnsbChanged(string value)
    {
        selectedsb = value;
    }

    private async Task OnbtChanged(string value)
    {
        selectedbt = value;
    }

    private async Task OntbChanged(string value)
    {
        selectedtb = value;
    }

    private async void SubmitForm()
    {
        try
        {
            var userData = await localStorage.GetItemAsync<UserPagesAndRouter>("UserData");
            string useradd = userData?.UserName ?? "User";
            if (userData != null)
            {
                useradd = userData.UserName;

            }

            var userEmail = await localStorage.GetItemAsync<UserPagesAndRouter>("UserData");
            string useraddemail = userEmail?.UserEmail ?? "User";
            if (userEmail != null)
            {
                useraddemail = userEmail.UserEmail;
            }


            if (string.IsNullOrWhiteSpace(selectedddrc) || string.IsNullOrWhiteSpace(selecteddd))
            {
                Snackbar.Add("Please fill in the mandatory fields.", Severity.Warning);
                return;
            }


            // Assign scanned QR Code data if available
            if (!string.IsNullOrEmpty(qrCodeData))
            {
                var qrDetails = qrCodeData.Split(',');

                if (qrDetails.Length >= 3) // Ensure QR Code has expected fields
                {
                    inspection.SerialNumber = ExtractValue(qrDetails[0]);
                    inspection.Module = ExtractValue(qrDetails[1]);

                }
                else
                {

                    Snackbar.Add("No QR code scanned and no item selected. Please select an item.", Severity.Warning);
                    return;

                }
            }
            else if (selectedReceive != null)
            {
                // Fetch from selected Receive item instead
                inspection.SerialNumber = selectedReceive.SerialNumber;
                inspection.Module = selectedReceive.SelectedOption;

            }

            else
            {
                Snackbar.Add("No QR code scanned. Please scan a QR code before submitting.", Severity.Warning);
                return;
            }

            IncomingInspectionDTO IncomingDataDTO = new IncomingInspectionDTO()
                {
                    SalesOrderNumber = inspection.SalesOrderNumber,
                    WorkOrder = inspection.WorkOrder,
                    MatNumber = inspection.MatNumber,
                    Customer = inspection.Customer,
                    Location = inspection.Location,
                    Received = inspection.Received,
                    Inspected = inspection.Inspected,
                    RotorsNumber = inspection.RotorsNumber,
                    Initials = inspection.Initials,
                    Make = inspection.Make,
                    Dia = inspection.Dia,
                    Len = inspection.Dia,
                    Fits = inspection.Fits,
                    Materials = selectedMaterial,
                    Others = inspection.Others,
                    RotorsDia = inspection.RotorsDia,
                    RotorStyle = selectedRotorStyle,
                    Type = selectedType,
                    BearingRemoved = selectedberrem,
                    Bearing = selectedBearings,
                    BearingSeals = string.Join(", ", selectedBearSeals),
                    CeramicSeals = selectedCerSeals,
                    Right = selectedRL,
                    yRight = inspection.yRight,
                    Left = selectedLR,
                    yLeft = inspection.yLeft,
                    BasicSharpening = selectedbs,
                    IfYBasicSharpening = selectedybasicsharp,
                    WedgelockAlignmentMarks = selectedpre,
                    CenterGrinding = selectedctr,
                    IfYCenterGrinding = selectedType,
                    Aligned = selectedalign,
                    PlasticSleaves = selectedps,
                    Welding = selectedwelding,
                    WeldingNum = inspection.WeldingNum,
                    BedKnife = selectebkid,
                    BoxReceivedWithSaddles = inspection.BoxReceivedWithSaddles,
                    ReProfile = selectedrp,
                    SandBlasting = selectedsb,
                    ManualLabor = inspection.ManualLabor,
                    Bottom = selectedbt,
                    Top = selectedtb,
                    AddQty = inspection.AddQty,
                    TirLeftJournal = inspection.TirLeftJournal,
                    TirRightJournal = inspection.TirRightJournal,
                    SaddlePartNumber = inspection.SaddlePartNumber,
                    SerialNumber = inspection.SerialNumber,
                    Module = inspection.Module,
                    DateTime = DateTime.Today,
                    RotorCategorization = selectedddrc,
                    ComponentType = selecteddd,
                    Users = useradd

                };

            // var userResponse = await HttpClient.GetAsync("https://localhost:7172/api/Users/getuserlist?sales=true");


            var userResponse = await HttpClient.GetAsync($"{ApiConstants.GetsalesEmails}?sales=true");

            if (userResponse.IsSuccessStatusCode)
            {
                var allUserData = await userResponse.Content.ReadFromJsonAsync<List<AppUser>>();

                // Get only users where IsSalesUser is true
                var filteredUsers = allUserData.Where(u => u.IsSalesUser).ToList();

                // Extract their email IDs
                // var emailIds = filteredUsers.Select(u => u.Email).Where(email => !string.IsNullOrEmpty(email)).ToList();
                var emailIds = filteredUsers.Select(u => u.Email).Where(email => !string.IsNullOrEmpty(email)).ToList();
                IncomingDataDTO.SalesEmails = emailIds;

                var jsonPart = JsonConvert.SerializeObject(IncomingDataDTO);
                var content = new StringContent(jsonPart, Encoding.UTF8, "application/json");

                // var response = await HttpClient.PostAsync("https://localhost:7172/api/IncomingInspection/addincoming", content);
                var response = await HttpClient.PostAsync(ApiConstants.AddRotorIncoming, content);
                // var emailQuery = $"?userEmail={useraddemail}";
                //  var response = await HttpClient.PostAsync(ApiConstants.AddRotorIncoming + emailQuery, content);

                if (response.IsSuccessStatusCode)
                {

                    var ProjectImageData = await localStorage.GetItemAsync<IncomingInspectionImageDTO>("ProjectImageData");
                    var projectjsonData = JsonConvert.SerializeObject(ProjectImageData);
                    var projectimagecontent = new StringContent(projectjsonData, Encoding.UTF8, "application/json");

                    // var projectimageresponse = await HttpClient.PostAsync("https://localhost:7172/api/IncomingImages/addbi", projectimagecontent);
                    var projectimageresponse = await HttpClient.PostAsync(ApiConstants.AddImagesIncoming, projectimagecontent);

                    if (projectimageresponse.IsSuccessStatusCode)
                    {
                        await localStorage.RemoveItemAsync("IncomingImageData");
                        // Console.WriteLine("Images added successfully.");

                    }

                    Snackbar.Add("Incoming Inspection form submitted successfully!", Severity.Success);
                    Receivealldata.RemoveAll(x => x.SerialNumber == inspection.SerialNumber);

                    isSubmitted = true;
                    showContent = false;
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add("Error submitting form.", Severity.Error);
                }
            }


        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }


    private void OnQrCodeScan(string code)
    {
        qrCodeData = code;
        isScanning = false;
        isCancel = false;
        _qrCodeScannerJsInterop.StopRecording();


        var qrDetails = qrCodeData.Split(',');

        if (qrDetails.Length >= 3) // Ensure the QR code has at least 3 fields
        {
            inspection.Module = qrDetails[0].Trim();
            inspection.Users = qrDetails[1].Trim();
            inspection.SerialNumber = qrDetails[2].Trim();
        }

        showScanDetails = false; // Keep fields hidden initially
        StateHasChanged();
    }

    private bool isExistingSerial = false;

    private string ExtractValue(string data)
    {
        var parts = data.Split(':'); // Check if the data has a label like "SerialNumber: 12345"
        return parts.Length > 1 ? parts[1].Trim() : parts[0].Trim(); // Return value without label
    }
    private string qrCodeData;
    private bool isScanning;
    private bool isCancel = false;
    private bool cameraError = false;

    private string? lastScannedCode = null;

    private async Task StartScanning()
    {
        try
        {
            showContent = false;
            isScanning = true;
            qrCodeData = null;
            cameraError = false;
            lastScannedCode = null; // ✅ RESET this before scan starts

            _onQrCodeScanAction = async (code) =>
            {
                // ❌ Remove this check — it blocks rescan
                // if (code == lastScannedCode)
                //     return;

                lastScannedCode = code;
                qrCodeData = code;

                var qrDetails = qrCodeData.Split(',');

                if (qrDetails.Length >= 3) // Ensure QR Code has expected fields
                {
                    inspection.SerialNumber = ExtractValue(qrDetails[0]);
                    inspection.Module = ExtractValue(qrDetails[1]);

                }
                //  var Module = ExtractValue(code.Split(',')[1]);

                if (inspection.Module != "Rotor/Feed rolls")
                {
                    // Display message indicating QR code is not valid
                    Snackbar.Add("QR code is not valid.", Severity.Warning);
                    return;
                }

                var serialNumber = ExtractValue(code.Split(',')[0]);

                Snackbar.Clear();

                // var exists = await HttpClient.GetFromJsonAsync<bool>($"https://localhost:7172/api/IncomingInspection/CheckSerialExists/{serialNumber}");
                var exists = await HttpClient.GetFromJsonAsync<bool>($"{ApiConstants.CheckSerialNumber}/{serialNumber}");

                if (exists)
                {
                    Snackbar.Add($"Serial Number '{serialNumber}' already exists in the table.", Severity.Warning);
                    isExistingSerial = exists;
                    await StopScanning();
                    StateHasChanged();
                    return;
                }


                isExistingSerial = false;
                await StopScanning();
                showScanDetails = true;
                StateHasChanged();
            };

            _onCameraPermissionFailedAction = (error) => OnCameraPermissionFailed(error);

            _qrCodeScannerJsInterop = new QRCodeScannerJsInterop(JSRuntime);
            await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction, _onCameraPermissionFailedAction);

            isCancel = true;
        }
        catch (Exception ex)
        {
            cameraError = true;
        }

        StateHasChanged();
    }

    private async Task Stop()
    {
        isScanning = false;
        isCancel = false;


        StateHasChanged();
    }

    private async Task StopScanning()
    {
        isScanning = false;
        isCancel = false;

        if (_qrCodeScannerJsInterop != null)
        {
            await _qrCodeScannerJsInterop.StopRecording();
        }

        StateHasChanged();
    }

    private bool showScanDetails = false;

    private List<string> selectedImageList = new();

    private void OnCameraPermissionFailed(string error)
    {
        cameraError = true;
        isScanning = false;
        isCancel = false;
        StateHasChanged();
    }

    private async Task OpenPreviewDialogBox()
    {

        if (!string.IsNullOrEmpty(qrCodeData))
        {
            var qrDetails = qrCodeData.Split(',');

            if (qrDetails.Length >= 3) // Ensure QR Code has expected fields
            {
                inspection.SerialNumber = ExtractValue(qrDetails[0]);
                inspection.Module = ExtractValue(qrDetails[1]);

            }

            else
            {
                Snackbar.Add("Invalid QR Code format. Please scan again.", Severity.Warning);
                return;
            }
        }
        else if (selectedReceive != null)
        {
            // Fetch from selected Receive item instead
            inspection.SerialNumber = selectedReceive.SerialNumber;
            inspection.Module = selectedReceive.SelectedOption;

        }
        else
        {
            Snackbar.Add("No QR code scanned. Please scan a QR code before submitting.", Severity.Warning);
            return;
        }
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                CloseButton = true,
                DisableBackdropClick = true
            };

        var parameters = new DialogParameters
            {//selectedMaterial
                ["InspectionData"] = inspection,
                ["SelectedMaterial"] = selectedMaterial,
                ["SelectedRotorStyle"] = selectedRotorStyle,
                ["SelectedType"] = selectedType,
                ["Selectedberrem"] = selectedberrem,
                ["SelectedBearings"] = selectedBearings,
                ["SelectedBearSeals"] = string.Join(", ", selectedBearSeals),
            //  ["SelectedBearSeals"] = selectedBearSeals,
                ["SelectedCerSeals"] = selectedCerSeals,
                ["SelectedRL"] = selectedRL,
                ["SelectedLR"] = selectedLR,
                ["Selectedbs"] = selectedbs,
                ["Selectedybasicsharp"] = selectedybasicsharp,
                ["Selectedpre"] = selectedpre,
                ["Selectedctr"] = selectedctr,
                ["Selectedycg"] = selectedycg,
                ["Selectedalign"] = selectedalign,
                ["Selectedyps"] = selectedps,
                ["Selectedwelding"] = selectedwelding,
                ["Selectebkid"] = selectebkid,
                ["Selectedrp"] = selectedrp,
                ["Selectedsb"] = selectedsb,
                ["Selectedbt"] = selectedbt,
                ["Selectedtb"] = selectedtb,
                ["Selectedddrc"] = selectedddrc,
                ["Selecteddd"] = selecteddd,
                ["SelectedSerialNumber"] = inspection.SerialNumber,
                ["SelectedModule"] = inspection.Module,

            };

        var dialog = DialogService.Show<PreviewDialog>("INCOMING ROTOR INSPECTION", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            // handle result if needed
        }
    }

    async void Print()
    {
        await JSRuntime.InvokeVoidAsync("printFormDiv", "printForm-section");
    }


    private async Task AddProjectImagesAsync(ProjectImgDTO projectImagesDTO)
    {
        if (!string.IsNullOrEmpty(qrCodeData))
        {
            var qrDetails = qrCodeData.Split(',');

            if (qrDetails.Length >= 3) // Ensure QR Code has expected fields
            {
                inspection.Module = ExtractValue(qrDetails[2]);
                inspection.Users = ExtractValue(qrDetails[1]);
                inspection.SerialNumber = ExtractValue(qrDetails[0]); // This was missing!
            }
            else
            {
                Snackbar.Add("Invalid QR Code format. Please scan again.", Severity.Warning);
                return;
            }
        }
        else if (selectedReceive != null)
        {
            inspection.SerialNumber = selectedReceive.SerialNumber;
            inspection.Module = selectedReceive.SelectedOption;
            inspection.Users = selectedReceive.Customer;
            inspection.DateTime = selectedReceive.Date;
        }


        // Set SerialNumber in the DTO
        projectImagesDTO.SerialNumber = inspection.SerialNumber;

        var options = new DialogOptions { FullWidth = true };
        var parameters = new DialogParameters<ImageDisplayDialog>();
        // parameters.Add("ProjectImagesDTO", projectImagesDTO);
        parameters.Add("SerialNumber", inspection.SerialNumber);
        CompletionService.CompletionChanged += async (sender, args) =>
        {
            await UpdateProjectImageAsync();
        };

        DialogService.Show<AddIncomingImages>("PROJECTIMAGES", parameters, DialogSettings.DialogOptionsAddEditDelete);
    }


    private async Task UpdateProjectImageAsync()
    {
        ProjectimagesData = await localStorage.GetItemAsync<IncomingInspectionImageDTO>("ProjectImageData");

        selectedImagesFromSM.Clear(); // Clear old data if any

        if (ProjectimagesData?.Images != null && ProjectimagesData.Images.Any())
        {
            selectedImagesFromSM.Add(new IncomingImages
                {
                    SerialNumber = ProjectimagesData.SerialNumber?.Trim(),
                    Images = ProjectimagesData.Images.Select(img => new Imagedata
                    {
                    // Data = img.Data,
                    // ID = img.ITSImageID
                    }).ToList()
                });
        }

        StateHasChanged(); // ✅ This triggers UI refresh
    }

    public class ImageUploadDto
    {
        public string SerialNumber { get; set; }

        public List<ImageDataDto> Images { get; set; }
    }

    public class ImageDataDto
    {
        public byte[] Data { get; set; }
        public int IncomingInspectionID { get; set; }
    }

    public class ProjectImgDTO
    {
        public string SerialNumber { get; set; }

    }
}