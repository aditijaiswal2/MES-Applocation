@page "/rii"

@using MES.Client.Dialog.Rotors
@using MES.Client.Pages.Account;
@using MES.Client.Utitlity
@using MES.Shared.DTOs
@using MES.Shared.Entities
@using ReactorBlazorQRCodeScanner;
@using Microsoft.JSInterop;
@using MES.Shared.Models
@using MES.Shared.Models.Rotors;
@using MES.Shared.DTOs.MES.Shared.DTOs.Rotors
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@using System.Text.Json;
@using System.Text
@inject IHttpClientFactory _httpClient
@inject IJSRuntime JSRuntime
@using static MES.Client.Pages.LoginVC
@inject IDialogService DialogService
@inject IDialogCompletionService CompletionService
@inherits BaseAuthentication;
@using Newtonsoft.Json;
@using MudBlazor;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IDialogCompletionService CompletionService


<MudContainer Style="overflow:hidden" Class="mt-5">
    <MudGrid Class="d-flex justify-center">
        @*    <MudItem md="12" sm="12" xs="12" class="d-flex flex-column align-items-center justify-content-center mb-2" style="text-align: center;">
            <MudText Typo="Typo.h6" Style="font-size: 16px;">Incoming Inspection</MudText>
        </MudItem> *@
        <MudItem md="12" sm="12" xs="12" class="d-flex flex-column align-items-center justify-content-center mb-2" style="text-align: center;">
            <div style="gap: 10px;">
                <MudButton @onclick="StartScanning" Variant="Variant.Filled" Color="Color.Primary" Style="width: 100px;">
                    Scan QR
                </MudButton>

                @if (isCancel)
                {
                    <MudButton @onclick="StopScanning" Variant="Variant.Filled" Color="Color.Error" Style="width: 100px; margin-left:8px;">
                        Cancel
                    </MudButton>
                }

                <MudButton @onclick="OpenReceiverecord" Variant="Variant.Filled" Color="Color.Primary" Style="width: 300px; margin-left:8px;">
                    Incoming Inspection
                </MudButton>
            </div>
        </MudItem>

        @if (showContent)
        {
            <MudItem xs="12">
                <div class="d-flex justify-content-start mt-2">
                    <MudPaper Elevation="3" Class="pa-3" Style="width: 300px;">
                        @* You can adjust width *@
                        <MudList Dense="true">
                            @{
                                var filteredList = Receivealldata
                                .Where(i => i.SerialNumber?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true)
                                .ToList();
                            }

                            @if (filteredList.Any())
                            {
                                foreach (var item in filteredList)
                                {
                                    <MudListItem OnClick="() => SelectReceive(item)" Button="true"
                                    Class="@(hoveredReceive == item ? "hover-highlight" : null)"
                                    @onmouseover="() => hoveredReceive = item"
                                    @onmouseout="() => hoveredReceive = null">
                                        <MudText>@item.SerialNumber - @item.Customer - @item.SelectedOption</MudText>
                                    </MudListItem>
                                }
                            }
                            else
                            {
                                <MudText Class="pa-2 text-secondary">No records found.</MudText>
                            }
                        </MudList>
                    </MudPaper>
                </div>
            </MudItem>

        }


        <MudItem md="12" sm="12" xs="12" Class="d-flex justify-center align-center">
            @if (isScanning)
            {
                <div class="d-flex justify-center" style="width: 350px; height: 350px;">
                    <QRCodeScanner LoadingMessage="" />
                </div>
            }

        </MudItem>

        @if (showForm)
        {
            <MudItem md="12" sm="12" xs="12" Class="d-flex justify-center align-center" Style="margin-top:-20px">
                @if ((!string.IsNullOrEmpty(qrCodeData)) || (selectedReceive != null))
                {
                    <div>
                        <div class="border border-primary p-10 mt-2 d-flex flex-wrap qr-container">

                            @if (!string.IsNullOrEmpty(qrCodeData))
                            {
                                foreach (var item in qrCodeData.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                {
                                    <p class="qr-item">@item.Trim()</p>
                                }
                            }

                            else if (selectedReceive != null)
                            {
                                <p class="qr-item">Report Number: @selectedReceive.SerialNumber</p>
                                <p class="qr-item">Module: @selectedReceive.SelectedOption</p>
                                <p class="qr-item">Customer: @selectedReceive.Customer</p>
                                <p class="qr-item">Received Date: @selectedReceive.Date.ToString("dd-MM-yyyy HH:mm")</p>

                            }

                        </div>

                        @if (!isExistingSerial)
                        {
                            <!-- Display Form -->
                            <MudCard Class="mt-4 p-4 w-100" id="printForm-section">
                                <MudCardContent>
                                    <div class="d-flex justify-center">
                                        <MudText Typo="Typo.h6">INCOMING ROTOR INSPECTION</MudText>
                                    </div>  <MudForm Class="w-100">

                                        <MudGrid Style="margin-top:10px;">

                                            <MudGrid>

                                                <MudItem xs="12" md="3">
                                                    <MudTextField Label="Customer" @bind-Value="inspection.Customer" FullWidth="true" Variant="Variant.Outlined" Class="custom-textfield" Required="true" />
                                                </MudItem>
                                                <MudItem xs="12" md="3">
                                                    <MudTextField Label="Location" @bind-Value="inspection.Location" FullWidth="true" Variant="Variant.Outlined" Class="custom-textfield" Required="true" />
                                                </MudItem>
                                                <MudItem xs="12" md="3">
                                                    <MudTextField Label="Inspected Date" @bind-Value="inspection.Received" FullWidth="true" Variant="Variant.Outlined" Class="custom-textfield" Required="true" ReadOnly />
                                                </MudItem>
                                                <MudItem xs="12" md="3">
                                                    <MudTextField Label="Inspected by" @bind-Value="inspection.Inspected" FullWidth="true" Variant="Variant.Outlined" Class="custom-textfield" Required="true" ReadOnly />
                                                </MudItem>

                                            </MudGrid>
                                            <MudGrid>

                                                <MudItem xs="12" md="3">
                                                    <MudTextField Label="Rotors Serial Number" @bind-Value="inspection.RotorsNumber" FullWidth="true" Variant="Variant.Outlined" Class="custom-textfield" Required="true" />
                                                </MudItem>


                                                <MudItem xs="12" md="3">
                                                    <MudTextField Label="Dia" @bind-Value="inspection.Dia" FullWidth="true" Class="custom-textfield" Variant="Variant.Outlined" />
                                                </MudItem>

                                                <MudItem xs="12" md="3">
                                                    <MudTextField Label="Len" @bind-Value="inspection.Len" FullWidth="true" Class="custom-textfield" Variant="Variant.Outlined" />
                                                </MudItem>
                                                <MudItem xs="12" md="3">
                                                    <MudTextField Label="Flts" @bind-Value="inspection.Fits" FullWidth="true" Class="custom-textfield" Variant="Variant.Outlined" />
                                                </MudItem>


                                            </MudGrid>
                                            <MudGrid Justify="Justify.FlexStart" Spacing="2">

                                                <MudItem xs="12" md="3">

                                                    <MudSelect T="string" Label="Make" Value="@selectedMake" ValueChanged="OnMakeChanged" ValueExpression="() => selectedMake" Variant="Variant.Outlined" FullWidth="true" Class="custom-select">

                                                        @*  <MudSelect T="string" Label="Make" ValueChanged="OnMakeChanged" Variant="Variant.Outlined" @bind-SelectedValue="selectedMake" FullWidth="true" Class="custom-select">
                                                *@     @foreach (var ber in Make)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </MudItem>


                                                <MudItem xs="12" md="3">

                                                    <MudSelect Variant="Variant.Outlined" @bind-Value="SelectedMaterials"
                                                    AnchorOrigin="Origin.BottomCenter" ValueExpression="() => SelectedMaterials" Label="Material">
                                                        @if (MaterialData != null)
                                                        {
                                                            @foreach (var location in MaterialData.OrderBy(l => l.MaterialName))
                                                            {
                                                                <MudSelectItem Value="@location.MaterialName">@location.MaterialName</MudSelectItem>
                                                            }
                                                        }
                                                    </MudSelect>

                                                </MudItem>
                                                <MudItem xs="12" md="3">

                                                    <MudSelect Variant="Variant.Outlined" @bind-Value="SelectedOthers"
                                                    AnchorOrigin="Origin.BottomCenter" ValueExpression="() => SelectedMaterials" Label="Other">
                                                        @if (OtherData != null)
                                                        {
                                                            @foreach (var location in OtherData.OrderBy(l => l.OtherName))
                                                            {
                                                                <MudSelectItem Value="@location.OtherName">@location.OtherName</MudSelectItem>
                                                            }
                                                        }
                                                    </MudSelect>
                                                </MudItem>
                                                <MudItem xs="12" md="3">
                                                    <MudTextField Label="Rotor Dia."
                                                    @bind-Value="inspection.RotorsDia"
                                                    FullWidth="true"
                                                    Variant="Variant.Outlined"
                                                    InputClass="text-right" />
                                                </MudItem>

                                            </MudGrid>

                                            <MudGrid Spacing="2">


                                                <MudItem md="3" xs="12">
                                                    <MudSelect Variant="Variant.Outlined" @bind-Value="SelectedRotorsStyle"
                                                    AnchorOrigin="Origin.BottomCenter" ValueExpression="() => SelectedRotorsStyle" Label="Rotor Style">
                                                        @if (rotorsStyle != null)
                                                        {
                                                            @foreach (var location in rotorsStyle.OrderBy(l => l.RotorsStyleName))
                                                            {
                                                                <MudSelectItem Value="@location.RotorsStyleName">@location.RotorsStyleName</MudSelectItem>
                                                            }
                                                        }
                                                    </MudSelect>
                                                </MudItem>

                                                <MudItem xs="12" md="3">
                                                    <MudSelect Variant="Variant.Outlined" ValueExpression="() => SelectedType" @bind-Value="SelectedType"
                                                    AnchorOrigin="Origin.BottomCenter" Label="Type">
                                                        @if (typeData != null)
                                                        {
                                                            @foreach (var location in typeData.OrderBy(l => l.TypeName))
                                                            {
                                                                <MudSelectItem Value="@location.TypeName">@location.TypeName</MudSelectItem>
                                                            }
                                                        }
                                                    </MudSelect>
                                                </MudItem>

                                                <MudItem xs="12" md="3">


                                                    <MudSelect T="string" Label="Bearing Removed" Value="selectedberrem" ValueExpression="() => selectedberrem" Variant="Variant.Outlined" ValueChanged="OnbearremoveChanged" FullWidth="true">
                                                        @foreach (var ber in berrem)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </MudItem>

                                                <MudItem xs="12" md="3">
                                                    <MudSelect T="string" Label="Bearings" Value="selectedBearings" ValueExpression="() => selectedBearings" Variant="Variant.Outlined" ValueChanged="OnbearChanged" FullWidth="true">
                                                        @foreach (var bearing in Bearings)
                                                        {
                                                            <MudSelectItem Value="@bearing">@bearing</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </MudItem>
                                            </MudGrid>

                                            <MudGrid Justify="Justify.FlexStart" Spacing="3">


                                                <MudItem xs="12" md="3">
                                                    <MudSelect @ref="mudSelectMetal" T="string" ValueChanged="OnbearingselasChanged" Label="Bearing Seals" @bind-Values="selectedBearSeals" MultiSelection="true" Variant="Variant.Outlined" FullWidth="true">
                                                        @foreach (var bearseal in BearSeals)
                                                        {
                                                            <MudSelectItem Value="@bearseal"/>
                                                        }
                                                    </MudSelect>
                                                </MudItem>

                                                <MudItem xs="12" md="3">
                                                    <MudSelect @ref="mudSelect"  T="string" ValueChanged="OnbearcerChanged"
                                                    Label="Ceramic Seals"
                                                    @bind-Values="selectedCerSeals"
                                                    MultiSelection="true"
                                                    Variant="Variant.Outlined"
                                                    FullWidth="true">
                                                        @foreach (var cerseal in CerSeals)
                                                        {
                                                            <MudSelectItem Value="@cerseal" />
                                                        }
                                                    </MudSelect>
                                                </MudItem>

                                                <MudItem xs="12" md="3">
                                                    <MudSelect T="string" Label="Basic Sharpening" Value="selectedbs" ValueExpression="() => selectedbs" Variant="Variant.Outlined" ValueChanged="OnbasicsharpChanged" FullWidth="true">
                                                        @foreach (var ber in bs)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }
                                                    </MudSelect>

                                                </MudItem>
                                                <MudItem xs="12" md="3">
                                                    <MudSelect T="string" ValueExpression="() => selectedybasicsharp"
                                                    Value="selectedybasicsharp" Variant="Variant.Outlined"
                                                    ValueChanged="OnybasicsharpChanged"
                                                    FullWidth="true"
                                                    Class="custom-select">
                                                        @foreach (var ber in ybasicsharp)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </MudItem>

                                            </MudGrid>

                                            <MudGrid>

                                                <MudItem xs="12" md="3">
                                                    <MudSelect T="string" Label="Bearing Journal Dia (Left)" Value="selectedLR" ValueExpression="() => selectedLR" Variant="Variant.Outlined" ValueChanged="OnlrChanged" FullWidth="true">
                                                        @foreach (var rl in LR)
                                                        {
                                                            <MudSelectItem Value="@rl">@rl</MudSelectItem>
                                                        }
                                                    </MudSelect>


                                                    @*    <MudTextField Label="Bearing Journal Dia (Left Details)" @bind-Value="inspection.yLeft" Variant="Variant.Outlined" FullWidth="true" />
                                           *@  </MudItem>
                                                <MudItem xs="12" md="3">
                                                    <MudTextField @bind-Value="inspection.yLeft" Variant="Variant.Outlined" FullWidth="true" />
                                                </MudItem>

                                                <MudItem xs="12" md="3">
                                                    <MudSelect T="string" Label="Bearing Journal Dia (Right)" Value="selectedRL" ValueExpression="() => selectedRL" Variant="Variant.Outlined" ValueChanged="OnrlChanged" FullWidth="true">
                                                        @foreach (var rl in RL)
                                                        {
                                                            <MudSelectItem Value="@rl">@rl</MudSelectItem>
                                                        }
                                                    </MudSelect>

                                                </MudItem>

                                                <MudItem xs="12" md="3">
                                                    <MudTextField @bind-Value="inspection.yRight" Variant="Variant.Outlined" FullWidth="true" />
                                                </MudItem>



                                            </MudGrid>

                                            <MudGrid Spacing="2">


                                                <MudItem xs="12" md="3">
                                                    <MudSelect T="string" Label="Wedgelock Alignment Marks; Present" Variant="Variant.Outlined" Value="selectedpre" ValueExpression="() => selectedpre" ValueChanged="OnpresentChanged" FullWidth="true">
                                                        @foreach (var ber in pre)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </MudItem>
                                                <MudItem xs="12" md="3">
                                                    <MudSelect T="string" Label="Aligned" Variant="Variant.Outlined" Value="selectedalign" ValueExpression="() => selectedalign" ValueChanged="OnalignChanged" FullWidth="true">
                                                        @foreach (var ber in align)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </MudItem>

                                                <MudItem xs="12" md="3">
                                                    <MudSelect T="string" Label="Center Grinding" Variant="Variant.Outlined" Value="selectedctr" ValueExpression="() => selectedctr" ValueChanged="OncgChanged" FullWidth="true">
                                                        @foreach (var ber in ctr)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }
                                                    </MudSelect>


                                                </MudItem>


                                                @if (selectedctr == "Yes")
                                                {
                                                    <MudItem xs="12" md="3">
                                                        <MudSelect T="string"
                                                        Value="selectedycg" Label="Center Grinding Detail"
                                                        ValueChanged="OnycgChanged" ValueExpression="() => selectedycg"
                                                        FullWidth="true" Variant="Variant.Outlined"
                                                        Class="custom-select">
                                                            @foreach (var ber in ycg)
                                                            {
                                                                <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                            }
                                                        </MudSelect>
                                                    </MudItem>
                                                }

                                            </MudGrid>
                                            <MudGrid Spacing="2">

                                                <MudItem xs="12" md="3">
                                                    <MudSelect T="string" Label="Plastic Sleeves" Variant="Variant.Outlined" Value="selectedps" ValueExpression="() => selectedps" ValueChanged="OnpsChanged" FullWidth="true">
                                                        @foreach (var ber in ps)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </MudItem>

                                                <MudItem xs="12" md="3">
                                                    <MudSelect T="string" Label="Welding" Variant="Variant.Outlined" Value="selectedwelding" ValueExpression="() => selectedwelding" ValueChanged="OnwelChanged" FullWidth="true">
                                                        @foreach (var ber in welding)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }
                                                    </MudSelect>

                                                </MudItem>


                                                @if (selectedwelding == "Yes")
                                                {
                                                    <MudItem xs="12" md="3">
                                                        <MudNumericField Label="No. Of Welding" @bind-Value="inspection.WeldingNum" Variant="Variant.Outlined" FullWidth="true" />

                                                    </MudItem>

                                                    <MudItem xs="12" md="3">
                                                        <MudTextField Label="Welding Comments"
                                                        @bind-Value="inspection.Initials"
                                                        FullWidth="true"
                                                        Variant="Variant.Outlined"
                                                        InputClass="text-right" />
                                                    </MudItem>
                                                }
                                                <MudItem xs="12" md="3">
                                                    <MudSelect T="string" Label="Bed Knife in Box" Value="selectebkid" ValueExpression="() => selectebkid" Variant="Variant.Outlined" ValueChanged="OnbkbChanged" FullWidth="true">
                                                        @foreach (var ber in bkid)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </MudItem>


                                            </MudGrid>

                                            <MudGrid Spacing="2">

                                                <MudItem xs="12" md="3">
                                                    <MudSelect T="string" Label="Re-Profile" ValueChanged="OnrpChanged" Variant="Variant.Outlined" Value="selectedrp" ValueExpression="() => selectedrp" FullWidth="true" Class="custom-select">
                                                        @foreach (var ber in rp)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </MudItem>

                                                <MudItem xs="12" md="3">

                                                    <MudSelect T="string" Label="Manual Labor" ValueChanged="OnManualLabourhanged" Variant="Variant.Outlined" Value="selectedManualLabour" ValueExpression="() => selectedManualLabour" FullWidth="true" Class="custom-select">
                                                        @foreach (var ber in ManualLabour)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </MudItem>

                                                <!-- Third Column -->
                                                <MudItem xs="12" md="3">

                                                    <MudSelect T="string" Label="Replace Blades" ValueChanged="OnRBChanged" Variant="Variant.Outlined" Value="selectedRB" ValueExpression="() => selectedRB" FullWidth="true" Class="custom-select">
                                                        @foreach (var ber in RB)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }

                                                    </MudSelect>
                                                </MudItem>


                                                @if (selectedRB == "Yes")
                                                {
                                                    <MudItem xs="12" md="3">
                                                        <MudNumericField Label="QTY" @bind-Value="inspection.ADDQTYdata" Variant="Variant.Outlined" FullWidth="true" />
                                                    </MudItem>
                                                }


                                            </MudGrid>


                                            <MudGrid>
                                                <!-- First Row -->
                                                <MudItem xs="12" md="3">
                                                    <MudSelect T="string" Label="Box Received with Saddles (Bottom)" Variant="Variant.Outlined" ValueChanged="OnbtChanged" Value="selectedbt" ValueExpression="() => selectedbt" FullWidth="true">
                                                        @foreach (var ber in bt)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </MudItem>

                                                <MudItem xs="12" md="3">
                                                    <MudSelect T="string" Label="Box Received with Saddles (Top)" Variant="Variant.Outlined" Value="selectedtb" ValueExpression="() => selectedtb" FullWidth="true" ValueChanged="OntbChanged">
                                                        @foreach (var ber in tb)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </MudItem>

                                                <!-- Second Row -->
                                                <MudItem xs="12" md="3">
                                                    <MudNumericField Label="Add QTY" @bind-Value="inspection.AddQty" Variant="Variant.Outlined" FullWidth="true" />
                                                </MudItem>

                                                <MudItem xs="12" md="3">

                                                    <MudSelect Variant="Variant.Outlined" @bind-value="SelectedSaddlePartNumber"
                                                    AnchorOrigin="Origin.BottomCenter" ValueExpression="() => SelectedSaddlePartNumber" Label="Saddle Part Number">
                                                        @if (SaddleData != null)
                                                        {
                                                            @foreach (var location in SaddleData.OrderBy(l => l.SaddlePartNumberName))
                                                            {
                                                                <MudSelectItem Value="@location.SaddlePartNumberName">@location.SaddlePartNumberName</MudSelectItem>
                                                            }
                                                        }
                                                    </MudSelect>
                                                </MudItem>



                                            </MudGrid>


                                            <MudGrid>



                                                <MudItem xs="12" md="3">
                                                    <MudSelect T="string" Label=" Rotor Categorize " ValueChanged="OnddrcChanged" Variant="Variant.Outlined" Value="selectedddrc" ValueExpression="() => selectedddrc" FullWidth="true" Class="custom-select" Required="true">
                                                        @foreach (var ber in ddrc)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </MudItem>


                                                <MudItem xs="12" md="3">
                                                    <MudSelect T="string" Label="Sub Module" Value="selecteddd" ValueExpression="() => selecteddd" Variant="Variant.Outlined" FullWidth="true" ValueChanged="OnddChanged" Class="custom-select" Required="true">
                                                        @foreach (var ber in dd)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </MudItem>

                                                <!-- Third Column -->
                                                <MudItem xs="12" md="3">

                                                    <MudSelect T="string" Label="New Box Required" ValueChanged="OnNewBoxChanged" Variant="Variant.Outlined" Value="selectedNewBoxRequiredBox" ValueExpression="() => selectedNewBoxRequiredBox" FullWidth="true" Class="custom-select">
                                                        @foreach (var ber in NewBoxRequiredBox)
                                                        {
                                                            <MudSelectItem Value="@ber">@ber</MudSelectItem>
                                                        }

                                                    </MudSelect>
                                                </MudItem>


                                                @if (selectedNewBoxRequiredBox == "Yes")
                                                {
                                                    @*   <MudItem xs="12" md="3">
                                                    <MudNumericField Label="New Box Required Number" @bind-Value="inspection.NewBoxRequiredBox" Variant="Variant.Outlined" FullWidth="true" />
                                                </MudItem> *@

                                                    <MudItem xs="12" md="3">

                                                        <MudSelect Variant="Variant.Outlined" @bind-value="SelectedNewBoxRequiredNumberData"
                                                        AnchorOrigin="Origin.BottomCenter" ValueExpression="() => SelectedNewBoxRequiredNumberData" Label="New Box Required Number">
                                                            @if (NewBoxRequiredNumberData != null)
                                                            {
                                                                @foreach (var location in NewBoxRequiredNumberData.OrderBy(l => l.NewBoxRequiredNumberName))
                                                                {
                                                                    <MudSelectItem Value="@location.NewBoxRequiredNumberName">@location.NewBoxRequiredNumberName</MudSelectItem>
                                                                }
                                                            }
                                                        </MudSelect>
                                                    </MudItem>

                                                }

                                            </MudGrid>

                                            <!-- 📷 Image Attachment Section -->
                                            <MudGrid Class="full-width-grid">
                                                <MudItem xs="12" style="text-align: center; width: 100%;">
                                                    <MudItem md="12" sm="12" xs="12" Class="d-flex justify-center">
                                                        <div style="border: 2px dotted gray; padding: 10px; text-align: center; width: 250px; height: auto">
                                                            <p>Add images</p>

                                                            <!-- Add Button -->
                                                            <MudItem>
                                                                <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(async () => await AddProjectImagesAsync(new ProjectImgDTO {
                        SerialNumber = SelectedProject
                    }))">
                                                                    Add
                                                                </MudButton>
                                                            </MudItem>

                                                            <!-- Image Preview -->
                                                            @if (selectedImagesFromSM.Any())
                                                            {
                                                                <div style="margin-top:10px;">
                                                                    <p><b>Total Images:</b> @selectedImagesFromSM.SelectMany(x => x.Images).Count()</p>
                                                                    <!-- You can show the images here too -->
                                                                </div>
                                                            }


                                                        </div>
                                                    </MudItem>


                                                </MudItem>
                                            </MudGrid>

                                            <MudItem xs="12" Class="d-flex justify-center mt-4" style=" gap: 10px;">
                                                <MudButton Class="mr-2" OnClick="OpenPreviewDialogBox" Size="Size.Small" Color="Color.Secondary" Variant="Variant.Filled">Preview</MudButton>
                                                <MudButton Class="mr-2" Variant="Variant.Filled" Size="Size.Small" Color="Color.Error" OnClick="ClearAll">Clear</MudButton>
                                                <MudButton Class="mr-2" Variant="Variant.Filled" Size="Size.Small" Color="Color.Tertiary" OnClick="Save">SAVE</MudButton>
                                                <MudButton Class="mr-2" OnClick="SubmitForm" Color="Color.Primary" Size="Size.Small" Variant="Variant.Filled">Submit</MudButton>
                                            </MudItem>
                                        </MudGrid>

                                    </MudForm>
                                </MudCardContent>
                            </MudCard>
                        }
                        else
                        {

                            <MudText Typo="Typo.h6" Color="Color.Error">This serial number already exists. Please check in Sales.</MudText>

                        }

                    </div>
                }
                else if (cameraError)
                {
                    <MudText Color="Color.Error">Camera access was blocked. Please allow camera access to scan QR codes.</MudText>
                }
            </MudItem>

        }
    </MudGrid>
</MudContainer>

<style>
    .bordered-container {
    width: 100%;
    max-width: 100%;
    border: 2px solid #ccc;
    border-radius: 8px;
    padding: 30px;
    margin-bottom: 16px;
    box-sizing: border-box;
    }

    .no-checkbox .mud-selected-item-checkbox {
    display: none !important;
    }

    .qr-item {
    margin: 1rem;
    font-size: 16px;
    white-space: nowrap;
    }

    .qr-container {
    justify-content: center;
    text-align: center;
    padding: 1rem;
    }


    .full-width-grid {
    width: 100%;
    margin: 0;
    }

    .spaced-select .mud-input-label {
    margin-bottom: 6px; /* Adjust as needed */
    }

</style>

@code {
    private QRCodeScannerJsInterop? _qrCodeScannerJsInterop;
    private Action<string>? _onQrCodeScanAction;
    private Action<string>? _onCameraPermissionFailedAction;
    private QRCodeScanner qrCodeScanner;
    private Receiving selectedReceive;
    private bool isSubmitted = false;
    private IncomingInspection inspection { get; set; } = new IncomingInspection();
    private string? SelectedProject { get; set; }
    //private List<IncomingInspection> selectedImagesFromSM = new();
    private List<IncomingImages> selectedImagesFromSM = new List<IncomingImages>();
    // private List<Receiving> Receive = new ();
    private IEnumerable<Receiving> Receive { get; set; } = new List<Receiving>();
    private List<Receiving> Receivealldata = new();
    private List<RotorsStyle>? rotorsStyle { get; set; } = new List<RotorsStyle>();
    private List<Typesdetails>? typeData { get; set; } = new List<Typesdetails>();
    private List<NewBoxRequiredNumber>? NewBoxRequiredNumberData { get; set; } = new List<NewBoxRequiredNumber>();
    private List<Materials>? MaterialData { get; set; } = new List<Materials>();
    private List<Other>? OtherData { get; set; } = new List<Other>();
    private List<SaddlepartNumber>? SaddleData { get; set; } = new List<SaddlepartNumber>();
    private string? SelectedRotorsStyle { get; set; }
    private string? SelectedType { get; set; }
    private MudSelect<string> mudSelect;
    private MudSelect<string> mudSelectMetal;
    private string? SelectedMaterials { get; set; }
    private string? SelectedOthers { get; set; }
    private string? SelectedSaddlePartNumber { get; set; }
    private string? SelectedNewBoxRequiredNumberData { get; set; }
    private string currentuser;
    private Receiving? hoveredReceive;
    private bool showContent = false;
    private string errorMessage = "";
    public IncomingInspectionImageDTO? ProjectimagesData { get; set; }

    private IncomingInspectionSubmit tempSubmission = new();
    private string searchTerm = "";
    bool isFormOpen = false;
    private bool showForm = true;
    string SelectedSerialNumber;
    string SelectedModuleName;

    private List<RotorIncominInspectionSavedData> rotorIncomingSavedDatas = new();
    private DateTime currentDateTime = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        var userData = await localStorage.GetItemAsync<UserPagesAndRouter>("UserData");

        // Assign user name or default to "User" if userData is null
        string currentuser = userData?.UserName ?? "User";
        inspection.Inspected = currentuser;
        inspection.Received = currentDateTime.ToString();

        HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
        var workcenterResponse = await HttpClient.GetAsync(ApiConstants.GetRotorsStyle);

        if (workcenterResponse.IsSuccessStatusCode)
        {
            var locationResult = await workcenterResponse.Content.ReadFromJsonAsync<List<RotorsStyle>>();

            if (locationResult != null)
            {
                rotorsStyle = locationResult.OrderByDescending(l => l.Id).ToList();
            }

        }

        var TypeResponse = await HttpClient.GetAsync(ApiConstants.GetType);

        if (TypeResponse.IsSuccessStatusCode)
        {
            var locationResult = await TypeResponse.Content.ReadFromJsonAsync<List<Typesdetails>>();

            if (locationResult != null)
            {
                typeData = locationResult.OrderByDescending(l => l.Id).ToList();
            }

        }

        var NewBoxRequiredNumberResponse = await HttpClient.GetAsync(ApiConstants.GetNewBoxRequiredNumber);

        if (NewBoxRequiredNumberResponse.IsSuccessStatusCode)
        {
            var locationResult = await NewBoxRequiredNumberResponse.Content.ReadFromJsonAsync<List<NewBoxRequiredNumber>>();

            if (locationResult != null)
            {
                NewBoxRequiredNumberData = locationResult.OrderByDescending(l => l.Id).ToList();
            }

        }

        var MaterialResponse = await HttpClient.GetAsync(ApiConstants.GetMaterial);

        if (MaterialResponse.IsSuccessStatusCode)
        {
            var locationResult = await MaterialResponse.Content.ReadFromJsonAsync<List<Materials>>();

            if (locationResult != null)
            {
                MaterialData = locationResult.OrderByDescending(l => l.Id).ToList();
            }

        }

        var OtherResponse = await HttpClient.GetAsync(ApiConstants.GetOther);

        if (OtherResponse.IsSuccessStatusCode)
        {
            var locationResult = await OtherResponse.Content.ReadFromJsonAsync<List<Other>>();

            if (locationResult != null)
            {
                OtherData = locationResult.OrderByDescending(l => l.Id).ToList();
            }

        }

        var SaddleResponse = await HttpClient.GetAsync(ApiConstants.GetSPN);

        if (SaddleResponse.IsSuccessStatusCode)
        {
            var locationResult = await SaddleResponse.Content.ReadFromJsonAsync<List<SaddlepartNumber>>();

            if (locationResult != null)
            {
                SaddleData = locationResult.OrderByDescending(l => l.Id).ToList();
            }

        }
    }

    public async Task SelectReceive(Receiving item)
    {
        selectedReceive = item;

        SelectedSerialNumber = item.SerialNumber;
        SelectedModuleName = item.SelectedOption;

        qrCodeData = null;
        showContent = false;

        // Call API to check if data is already saved
        try
        {
            var response = await HttpClient.GetFromJsonAsync<RotorIncominInspectionSavedData>(
                $"{ApiConstants.GetAllIIsavedData}?serialNumber={SelectedSerialNumber}&module={SelectedModuleName}");
            //   var rotorSalesDatasresponse = await HttpClient.GetAsync(
            // $"{ApiConstants.GetAllSalessavedData}?serialNumber={inspection.SerialNumber}&module={inspection.Module}&rotorsNumber={inspection.RotorsNumber}");

            if (response != null)
            {

                // Also assign to `inspection`

                inspection.Customer = response.Customer;
                inspection.Location = response.Location;
                inspection.RotorsNumber = response.RotorsNumber;
                selectedMake = response.Make;
                inspection.Dia = response.Dia;
                inspection.Len = response.Len;
                inspection.Fits = response.Fits;
                SelectedMaterials = response.Materials;
                SelectedOthers = response.Others;
                inspection.RotorsDia = response.RotorsDia;
                SelectedRotorsStyle = response.RotorStyle;
                SelectedType = response.Type;
                selectedberrem = response.BearingRemoved;
                selectedBearings = response.Bearing;
                // selectedBearSeals = response.BearingSeals?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                //selectedCerSeals = response.CeramicSeals?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                var validBearSeals = BearSeals.Select(s => s.Trim().ToLower()).ToList();
                selectedBearSeals = response.BearingSeals?.Split(',').Select(s => s.Trim().ToLower()).Where(s => validBearSeals.Contains(s)).ToList() ?? new List<string>();

                var validCerSeals = CerSeals.Select(s => s.Trim().ToLower()).ToList();
                selectedCerSeals = response.CeramicSeals?.Split(',').Select(s => s.Trim().ToLower()).Where(s => validCerSeals.Contains(s)).ToList() ?? new List<string>();
                selectedLR = response.Left;
                inspection.yLeft = response.yLeft;
                selectedRL = response.Right;
                inspection.yRight = response.yLeft;
                selectedbs = response.BasicSharpening;
                selectedybasicsharp = response.IfYBasicSharpening;
                selectedpre = response.WedgelockAlignmentMarks;
                selectedctr = response.CenterGrinding;
                selectedycg = response.IfYCenterGrinding;
                selectedalign = response.Aligned;
                selectedps = response.PlasticSleaves;
                selectedwelding = response.Welding;
                inspection.WeldingNum = response.WeldingNum;
                selectebkid = response.BedKnife;
                selectedRB = response.BoxReceivedWithSaddles;
                inspection.ADDQTYdata = response.ADDQTYdata;
                selectedrp = response.ReProfile;
                selectedManualLabour = response.ManualLabor;
                selectedNewBoxRequiredBox = response.NewBoxRequired;
                inspection.NewBoxRequiredBox = response.NewBoxRequiredBox;
                selectedtb = response.Top;
                selectedbt = response.Bottom;
                inspection.AddQty = response.AddQty;
                SelectedSaddlePartNumber = response.SaddlePartNumber;
                selectedddrc = response.RotorCategorization;
                selecteddd = response.ComponentType;
                showForm = true;

                ProjectimagesData = await localStorage.GetItemAsync<IncomingInspectionImageDTO>("ProjectImageData");

                selectedImagesFromSM.Clear(); // Clear old data

                if (ProjectimagesData?.Images != null &&
                    ProjectimagesData.SerialNumber?.Trim() == SelectedSerialNumber &&
                    ProjectimagesData.Images.Any())
                {
                    selectedImagesFromSM.Add(new IncomingImages
                        {
                            SerialNumber = ProjectimagesData.SerialNumber?.Trim(),
                            Images = ProjectimagesData.Images.Select(img => new Imagedata
                            {
                                Data = img.Data,
                                ID = img.IncomingImageId
                            }).ToList()
                        });
                }
            }
        }
        catch (HttpRequestException ex)
        {
            // Log or handle if no data found
            //  Console.WriteLine("No matching data found: " + ex.Message);
            showContent = false; // Still show content if you want to allow fresh input
            showForm = true;
            ClearAll();
        }

        StateHasChanged();
    }

    private async Task OpenReceiverecord()
    {
        await StopScanning();

        showContent = true;

        try
        {
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");

            var response = await HttpClient.GetAsync(ApiConstants.GetAllInspectionData);
            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadAsStringAsync();
                var allInspections = System.Text.Json.JsonSerializer.Deserialize<List<Receiving>>(data,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<Receiving>();

                // Now filter the list by checking each Serial Number
                var filteredList = new List<Receiving>();

                foreach (var item in allInspections)
                {
                    // Check if Serial Number exists (Call API for each Serial)
                    var exists = await HttpClient.GetFromJsonAsync<bool>($"{ApiConstants.CheckSerialNumber}/{item.SerialNumber}");

                    if (!exists)
                    {
                        // Only add if Serial does not exist
                        filteredList.Add(item);
                    }
                }

                Receivealldata = filteredList; // Only non-existing serial numbers will be shown now
            }
            else
            {
                errorMessage = $"Error: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception: {ex.Message}";
        }
        finally
        {
            // isLoading = false;
        }
    }


    // private List<string> Type = new()
    // {
    //     "Wedgelock",
    //     "Solid",
    //     "shell/shaft",
    //     "Bolt-on",
    //     "Copperbar",
    //     "Inlay",
    //     "Meister",
    //     "Shell Only"
    // };

    // private string selectedType { get; set; } = "";

    private List<string> ddrc = new()
    {
        "Simple",
        "Advance",
        "Scrap"

    };

    private string selectedddrc { get; set; } = "";


    private List<string> Make = new()
    {
        "MAAG",
        "Other",
        ""
    };

    private string selectedMake { get; set; } = "";

    private List<string> ManualLabour = new()
    {
        "1 hr",
        "2 hr",
        ""
    };

    private string selectedManualLabour { get; set; } = "";

    private List<string> dd = new()
    {

        "Rotor",
        "Feed Rolls"
    };

    private string selecteddd { get; set; } = "";

    private List<string> ybasicsharp = new()
    {
        "Extra",
        "Match",
        ""

    };

    private string selectedybasicsharp { get; set; } = "";

    // private List<string> RotorStyle = new()
    // {
    //     "Automatik",
    //     "Conair",
    //     "Cumberland",
    //     "Scheer",
    //     "Accapak",
    //     "Rieter"
    // };

    // private string selectedRotorStyle { get; set; } = "";

    private List<string> berrem = new()
    {
        "Yes",
        "No",
        ""

    };

    private string selectedberrem { get; set; } = "";


    private List<string> bs = new()
    {
        "Yes",
        "No",
        ""

    };

    private string selectedbs { get; set; } = "";

    private List<string> NewBoxRequiredBox = new()
    {
        "Yes",
        "No",
        ""

    };

    private string selectedNewBoxRequiredBox { get; set; } = "";

    private List<string> pre = new()
    {
        "Yes",
        "No",
        ""

    };

    private string selectedpre { get; set; } = "";

    private List<string> ctr = new()
    {
        "Yes",
        "No",
        ""

    };

    private string selectedctr { get; set; } = "";

    private List<string> ycg = new()
    {
        "Left",
        "Right",
        "Both",
        ""

    };

    private string selectedycg { get; set; } = "";

    private List<string> rp = new()
    {
        "Yes",
        "No",
        ""

    };

    private string selectedrp { get; set; } = "";

    private List<string> sb = new()
    {
        "Yes",
        "No",
        ""

    };

    private string selectedsb { get; set; } = "";

    private List<string> align = new()
    {
        "Yes",
        "No",
        ""

    };

    private string selectedalign { get; set; } = "";

    private List<string> ps = new()
    {
        "Yes",
        "No",
        ""

    };

    private string selectedps { get; set; } = "";

    private List<string> welding = new()
    {
        "Yes",
        "No",
        ""

    };

    private string selectedwelding { get; set; } = "";

    private List<string> bkid = new()
    {
        "Yes",
        "No",
        ""

    };

    private string selectebkid { get; set; } = "";

    private List<string> RB = new()
    {
        "Yes",
        "No",
        ""

    };

    private string selectedRB { get; set; } = "";

    private List<string> bt = new()
    {
        "Yes",
        "No",
        "N/A",
        ""

    };

    private string selectedbt { get; set; } = "";

    private List<string> tb = new()
    {
        "Yes",
        "No",
        "N/A",
        ""

    };

    private string selectedtb { get; set; } = "";

    private List<string> Bearings = new()
    {
        "Replace",
        "No",
        ""

    };

    private string selectedBearings { get; set; } = "";

    private List<string> RL = new()
    {
        "Okay",
        "Repair",
        ""

    };

    private string selectedRL { get; set; } = "";

    private List<string> LR = new()
    {
        "Okay",
        "Repair",
        ""

    };

    private string selectedLR { get; set; } = "";

    //selectedCerSeals
    private List<string> CerSeals = new()
    {
        "Okay",
        "Replace Inner x1",
        "Replace Inner x2",
        "Replace Outer x1",
        "Replace Outer x2",


    };

    private List<string> selectedCerSeals = new List<string>();
    // private List<string> selectedCerSeals = new();

    private List<string> BearSeals = new()
     {
        "Okay",
        "Replace Inner x1",
        "Replace Inner x2",
        "Replace Outer x1",
        "Replace Outer x2",
        "Replace"    };

    private List<string> selectedBearSeals = new List<string>();  // Use List<string>

    // private List<string> materials = new()
    // {
    //     "Stellite",
    //     "Carbide",
    //     "CPM",
    //     "D-2",
    //     "440C",
    //     "M-2"
    // };

    //  private string selectedMaterial { get; set; } = "";



    // private async Task OnMaterialChanged(string value)
    // {
    //     selectedMaterial = value;

    // }

    // private async Task OnRotorStyleChanged(string value)
    // {
    //     selectedRotorStyle = value;
    // }

    // private async Task OnTypeChanged(string value)
    // {
    //     selectedType = value;
    // }

    private async Task OnbearremoveChanged(string value)
    {
        selectedberrem = value;

    }

    private async Task OnbearChanged(string value)
    {
        selectedBearings = value;
    }

    private async Task OnRBChanged(string value)
    {
        selectedRB = value;
    }

    private Task OnMakeChanged(string value)
    {
        selectedMake = value;
        return Task.CompletedTask;
    }


    private async Task OnNewBoxChanged(string value)
    {
        selectedNewBoxRequiredBox = value;
    }

    //selectedBearSeals
    private async Task OnbearingselasChanged(string values)
    {
        // Split the string by comma to convert it to a string array
        selectedBearSeals = values.Split(',').ToList();  // If you want a List<string>
    }


    //  private void OnCerSealsChanged(List<string> values)
    private async Task OnbearcerChanged(string values)
    {
        selectedCerSeals = values.Split(',').ToList();      
    }

    // private Task OnCerSealsChanged(IEnumerable<string> values)
    // {
    //     selectedCerSeals = values.ToList();
    //     return Task.CompletedTask;
    // }
    //OnddChanged

    private async Task OnddChanged(string value)
    {
        selecteddd = value;

    }

    private async Task OnddrcChanged(string value)
    {
        selectedddrc = value;

    }

    private async Task OnrlChanged(string value)
    {
        selectedRL = value;
    }


    private async Task OnManualLabourhanged(string value)
    {
        selectedManualLabour = value;
    }
    private async Task OnlrChanged(string value)
    {
        selectedLR = value;
    }

    private async Task OnbasicsharpChanged(string value)
    {
        selectedbs = value;
    }

    private async Task OnpresentChanged(string value)
    {
        selectedpre = value;
    }

    private async Task OncgChanged(string value)
    {
        selectedctr = value;

    }

    //OnycgChanged
    private async Task OnycgChanged(string value)
    {
        selectedycg = value;

    }

    private async Task OnybasicsharpChanged(string value)
    {
        selectedybasicsharp = value;

    }

    private async Task OnalignChanged(string value)
    {
        selectedalign = value;
    }

    private async Task OnpsChanged(string value)
    {
        selectedps = value;
    }

    private async Task OnwelChanged(string value)
    {
        selectedwelding = value;
    }

    private async Task OnbkbChanged(string value)
    {
        selectebkid = value;
    }

    private async Task OnrpChanged(string value)
    {
        selectedrp = value;

    }

    private async Task OnsbChanged(string value)
    {
        selectedsb = value;
    }

    private async Task OnbtChanged(string value)
    {
        selectedbt = value;
    }

    private async Task OntbChanged(string value)
    {
        selectedtb = value;
    }


    private async void SubmitForm()
    {
        try
        {
            var userData = await localStorage.GetItemAsync<UserPagesAndRouter>("UserData");
            string useradd = userData?.UserName ?? "User";
            if (userData != null)
            {
                useradd = userData.UserName;

            }

            var userEmail = await localStorage.GetItemAsync<UserPagesAndRouter>("UserData");
            string useraddemail = userEmail?.UserEmail ?? "User";
            if (userEmail != null)
            {
                useraddemail = userEmail.UserEmail;
            }


            if (string.IsNullOrWhiteSpace(selectedddrc) || string.IsNullOrWhiteSpace(selecteddd))
            {
                Snackbar.Add("Please fill in the mandatory fields.", Severity.Warning);
                return;
            }


            // Assign scanned QR Code data if available
            if (!string.IsNullOrEmpty(qrCodeData))
            {
                var qrDetails = qrCodeData.Split(',');

                if (qrDetails.Length >= 3) // Ensure QR Code has expected fields
                {
                    inspection.SerialNumber = ExtractValue(qrDetails[0]);
                    inspection.Module = ExtractValue(qrDetails[1]);

                }
                else
                {

                    Snackbar.Add("No QR code scanned and no item selected. Please select an item.", Severity.Warning);
                    return;

                }
            }
            else if (selectedReceive != null)
            {
                // Fetch from selected Receive item instead
                inspection.SerialNumber = selectedReceive.SerialNumber;
                inspection.Module = selectedReceive.SelectedOption;

            }

            else
            {
                Snackbar.Add("No QR code scanned. Please scan a QR code before submitting.", Severity.Warning);
                return;
            }

            IncomingInspectionDTO IncomingDataDTO = new IncomingInspectionDTO()
                {

                    Customer = inspection.Customer,
                    Location = inspection.Location,
                    Received = inspection.Received,
                    Inspected = inspection.Inspected,
                    RotorsNumber = inspection.RotorsNumber,
                    Initials = inspection.Initials,
                    Make = selectedMake,
                    Dia = inspection.Dia,
                    Len = inspection.Dia,
                    Fits = inspection.Fits,
                    Materials = SelectedMaterials,
                    SalesOrderNumber=inspection.SalesOrderNumber,
                    Others = SelectedOthers,
                    RotorsDia = inspection.RotorsDia,
                //  RotorStyle = selectedRotorStyle,
                    RotorStyle = SelectedRotorsStyle,
                    Type = SelectedType,
                //Type = selectedType,
                    BearingRemoved = selectedberrem,
                    Bearing = selectedBearings,
                // BearingSeals = string.Join(", ", selectedBearSeals ?? new List<string>()),
                //   CeramicSeals = string.Join(", ", selectedCerSeals ?? new List<string>()),
                 BearingSeals=  string.Join(", ", selectedBearSeals),               
                    CeramicSeals = string.Join(",", selectedCerSeals),
                    Right = selectedRL,
                    yRight = inspection.yRight,
                    Left = selectedLR,
                    yLeft = inspection.yLeft,
                    BasicSharpening = selectedbs,
                    IfYBasicSharpening = selectedybasicsharp,
                    WedgelockAlignmentMarks = selectedpre,
                    CenterGrinding = selectedctr,
                    IfYCenterGrinding = selectedycg,
                    ADDQTYdata = inspection.ADDQTYdata,
                    NewBoxRequiredBox = SelectedNewBoxRequiredNumberData,
                    NewBoxRequired = selectedNewBoxRequiredBox,

                    Aligned = selectedalign,
                    PlasticSleaves = selectedps,
                    Welding = selectedwelding,
                    WeldingNum = inspection.WeldingNum,
                    BedKnife = selectebkid,
                    BoxReceivedWithSaddles = selectedRB,
                    ReProfile = selectedrp,
                    SandBlasting = selectedsb,
                    ManualLabor = selectedManualLabour,
                    Bottom = selectedbt,
                    Top = selectedtb,
                    AddQty = inspection.AddQty,
                    TirLeftJournal = inspection.TirLeftJournal,
                    TirRightJournal = inspection.TirRightJournal,
                    SaddlePartNumber = SelectedSaddlePartNumber,
                    SerialNumber = inspection.SerialNumber,
                    Module = inspection.Module,
                    DateTime = DateTime.Today,
                    RotorCategorization = selectedddrc,
                    ComponentType = selecteddd,
                    Users = useradd,


                };

            // var userResponse = await HttpClient.GetAsync("https://localhost:7172/api/Users/getuserlist?sales=true");


            var userResponse = await HttpClient.GetAsync($"{ApiConstants.GetsalesEmails}?sales=true");

            if (userResponse.IsSuccessStatusCode)
            {
                var allUserData = await userResponse.Content.ReadFromJsonAsync<List<AppUser>>();

                // Get only users where IsSalesUser is true
                var filteredUsers = allUserData.Where(u => u.IsSalesUser).ToList();

                // Extract their email IDs
                // var emailIds = filteredUsers.Select(u => u.Email).Where(email => !string.IsNullOrEmpty(email)).ToList();
                var emailIds = filteredUsers.Select(u => u.Email).Where(email => !string.IsNullOrEmpty(email)).ToList();
                IncomingDataDTO.SalesEmails = emailIds;

                var jsonPart = JsonConvert.SerializeObject(IncomingDataDTO);
                var content = new StringContent(jsonPart, Encoding.UTF8, "application/json");

                // var response = await HttpClient.PostAsync("https://localhost:7172/api/IncomingInspection/addincoming", content);
                var response = await HttpClient.PostAsync(ApiConstants.AddRotorIncoming, content);
                // var emailQuery = $"?userEmail={useraddemail}";
                //  var response = await HttpClient.PostAsync(ApiConstants.AddRotorIncoming + emailQuery, content);

                if (response.IsSuccessStatusCode)
                {

                    var ProjectImageData = await localStorage.GetItemAsync<IncomingInspectionImageDTO>("ProjectImageData");
                    var projectjsonData = JsonConvert.SerializeObject(ProjectImageData);
                    var projectimagecontent = new StringContent(projectjsonData, Encoding.UTF8, "application/json");

                    // var projectimageresponse = await HttpClient.PostAsync("https://localhost:7172/api/IncomingImages/addbi", projectimagecontent);
                    var projectimageresponse = await HttpClient.PostAsync(ApiConstants.AddImagesIncoming, projectimagecontent);

                    if (projectimageresponse.IsSuccessStatusCode)
                    {
                        await localStorage.RemoveItemAsync("IncomingImageData");
                        // Console.WriteLine("Images added successfully.");

                    }

                    Snackbar.Add("Incoming Inspection form submitted successfully!", Severity.Success);
                    Receivealldata.RemoveAll(x => x.SerialNumber == inspection.SerialNumber);
                    showForm = false;
                    ClearAll();
                    showContent = false;
                    await OnInitializedAsync();

                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add("Error submitting form.", Severity.Error);
                }
            }


        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task Save()
    {
        var userData = await localStorage.GetItemAsync<UserPagesAndRouter>("UserData");
        string useradd = userData?.UserName ?? "User";
        string useraddemail = userData?.UserEmail ?? "User";

        if (string.IsNullOrWhiteSpace(selectedddrc) || string.IsNullOrWhiteSpace(selecteddd))
        {
            Snackbar.Add("Please fill in the mandatory fields.", Severity.Warning);
            return;
        }

        // Assign scanned QR Code data if available
        if (!string.IsNullOrEmpty(qrCodeData))
        {
            var qrDetails = qrCodeData.Split(',');

            if (qrDetails.Length >= 3)
            {
                inspection.SerialNumber = ExtractValue(qrDetails[0]);
                inspection.Module = ExtractValue(qrDetails[1]);
            }
            else
            {
                Snackbar.Add("No QR code scanned and no item selected. Please select an item.", Severity.Warning);
                return;
            }
        }
        else if (selectedReceive != null)
        {
            inspection.SerialNumber = selectedReceive.SerialNumber;
            inspection.Module = selectedReceive.SelectedOption;
        }
        else
        {
            Snackbar.Add("No QR code scanned. Please scan a QR code before submitting.", Severity.Warning);
            return;
        }

        tempSubmission = new IncomingInspectionSubmit
            {
                Customer = inspection.Customer,
                Location = inspection.Location,
                Received = inspection.Received,
                Inspected = inspection.Inspected,
                RotorsNumber = inspection.RotorsNumber,
                Initials = inspection.Initials,
                Make = selectedMake,
                Dia = inspection.Dia,
                Len = inspection.Dia,
                Fits = inspection.Fits,
                Materials = SelectedMaterials,
                Others = SelectedOthers,
                RotorsDia = inspection.RotorsDia,
                RotorStyle = SelectedRotorsStyle,
                Type = SelectedType,
                BearingRemoved = selectedberrem,
                Bearing = selectedBearings,
            //  BearingSeals = string.Join(", ", selectedBearSeals ?? new List<string>()),
            //CeramicSeals = string.Join(", ", selectedCerSeals ?? new List<string>()),
                BearingSeals = string.Join(", ", selectedBearSeals),
                CeramicSeals = string.Join(",", selectedCerSeals),
                Right = selectedRL,
                yRight = inspection.yRight,
                Left = selectedLR,
                yLeft = inspection.yLeft,
                BasicSharpening = selectedbs,
                IfYBasicSharpening = selectedybasicsharp,
                WedgelockAlignmentMarks = selectedpre,
                CenterGrinding = selectedctr,
                IfYCenterGrinding = selectedycg,
                ADDQTYdata = inspection.ADDQTYdata,
                NewBoxRequiredBox = SelectedNewBoxRequiredNumberData,
                NewBoxRequired = selectedNewBoxRequiredBox,
                Aligned = selectedalign,
                PlasticSleaves = selectedps,
                Welding = selectedwelding,
                WeldingNum = inspection.WeldingNum,
                BedKnife = selectebkid,
                BoxReceivedWithSaddles = selectedRB,
                ReProfile = selectedrp,
                SandBlasting = selectedsb,
                ManualLabor = selectedManualLabour,
                Bottom = selectedbt,
                Top = selectedtb,
                AddQty = inspection.AddQty,
                TirLeftJournal = inspection.TirLeftJournal,
                TirRightJournal = inspection.TirRightJournal,
                SaddlePartNumber = SelectedSaddlePartNumber,
                SerialNumber = inspection.SerialNumber,
                Module = inspection.Module,
                DateTime = DateTime.Today,
                RotorCategorization = selectedddrc,
                ComponentType = selecteddd,
                Users = useradd,
            };

        try
        {
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");

            // Check if data already exists
            var checkUrl = $"{ApiConstants.CheckIfRotorExists}?serialNumber={inspection.SerialNumber}&module={inspection.Module}";
            var checkResponse = await HttpClient.GetAsync(checkUrl);

            if (checkResponse.IsSuccessStatusCode)
            {
                var exists = bool.Parse(await checkResponse.Content.ReadAsStringAsync());

                var jsonPart = Newtonsoft.Json.JsonConvert.SerializeObject(tempSubmission);
                var content = new StringContent(jsonPart, Encoding.UTF8, "application/json");

                HttpResponseMessage response;

                if (exists)
                {
                    // Update existing
                    response = await HttpClient.PutAsync(ApiConstants.UpdateRotorIISavedData, content);
                }
                else
                {
                    // Create new
                    response = await HttpClient.PostAsync(ApiConstants.AddRotorIISavedData, content);
                }

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Incoming Inspection Data saved successfully!", Severity.Success);
                    showForm = false;
                    ClearAll();
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add($"Failed to save/update data! Status code: {response.StatusCode}", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Error checking for existing record.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error while saving data: {ex.Message}", Severity.Error);
        }
    }

    private void OnQrCodeScan(string code)
    {
        qrCodeData = code;
        isScanning = false;
        isCancel = false;
        _qrCodeScannerJsInterop.StopRecording();


        var qrDetails = qrCodeData.Split(',');

        if (qrDetails.Length >= 3) // Ensure the QR code has at least 3 fields
        {
            inspection.Module = qrDetails[0].Trim();
            inspection.Users = qrDetails[1].Trim();
            inspection.SerialNumber = qrDetails[2].Trim();
        }

        showScanDetails = false; // Keep fields hidden initially
        StateHasChanged();
    }

    private bool isExistingSerial = false;

    private string ExtractValue(string data)
    {
        var parts = data.Split(':'); // Check if the data has a label like "SerialNumber: 12345"
        return parts.Length > 1 ? parts[1].Trim() : parts[0].Trim(); // Return value without label
    }
    private string qrCodeData;
    private bool isScanning;
    private bool isCancel = false;
    private bool cameraError = false;

    private string? lastScannedCode = null;

    private async Task StartScanning()
    {
        try
        {
            showContent = false;
            isScanning = true;
            qrCodeData = null;
            cameraError = false;
            lastScannedCode = null; // ✅ RESET this before scan starts

            _onQrCodeScanAction = async (code) =>
            {
                // ❌ Remove this check — it blocks rescan
                // if (code == lastScannedCode)
                //     return;

                lastScannedCode = code;
                qrCodeData = code;

                var qrDetails = qrCodeData.Split(',');

                if (qrDetails.Length >= 3) // Ensure QR Code has expected fields
                {
                    inspection.SerialNumber = ExtractValue(qrDetails[0]);
                    inspection.Module = ExtractValue(qrDetails[1]);
                    // inspection.Customer = ExtractValue(qrDetails[2]);
                }
                //  var Module = ExtractValue(code.Split(',')[1]);

                if (inspection.Module != "Rotor/Feed rolls")
                {
                    // Display message indicating QR code is not valid
                    Snackbar.Add("QR code is not valid.", Severity.Warning);
                    return;
                }

                var serialNumber = ExtractValue(code.Split(',')[0]);
                var ModuleName = ExtractValue(code.Split(',')[1]);

                Snackbar.Clear();

                // var exists = await HttpClient.GetFromJsonAsync<bool>($"https://localhost:7172/api/IncomingInspection/CheckSerialExists/{serialNumber}");
                var exists = await HttpClient.GetFromJsonAsync<bool>($"{ApiConstants.CheckSerialNumber}/{serialNumber}");

                if (exists)
                {
                    Snackbar.Add($"Serial Number '{serialNumber}' already exists in the table.", Severity.Warning);
                    isExistingSerial = exists;
                    await StopScanning();
                    StateHasChanged();
                    return;
                }

                try
                {
                    var response = await HttpClient.GetFromJsonAsync<RotorIncominInspectionSavedData>(
                    $"{ApiConstants.GetAllIIsavedData}?serialNumber={serialNumber}&module={ModuleName}");
                    //   var rotorSalesDatasresponse = await HttpClient.GetAsync(
                    // $"{ApiConstants.GetAllSalessavedData}?serialNumber={inspection.SerialNumber}&module={inspection.Module}&rotorsNumber={inspection.RotorsNumber}");

                    if (response != null)
                    {
                        await StopScanning();
                        // Also assign to `inspection`

                        inspection.Customer = response.Customer;
                        inspection.Location = response.Location;
                        inspection.RotorsNumber = response.RotorsNumber;
                        selectedMake = response.Make;
                        inspection.Dia = response.Dia;
                        inspection.Len = response.Len;
                        inspection.Fits = response.Fits;
                        SelectedMaterials = response.Materials;
                        SelectedOthers = response.Others;
                        inspection.RotorsDia = response.RotorsDia;
                        SelectedRotorsStyle = response.RotorStyle;
                        SelectedType = response.Type;
                        selectedberrem = response.BearingRemoved;
                        selectedBearings = response.Bearing;
                        // selectedBearSeals = response.BearingSeals?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                        //selectedCerSeals = response.CeramicSeals?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                        var validBearSeals = BearSeals.Select(s => s.Trim().ToLower()).ToList();
                        selectedBearSeals = response.BearingSeals?.Split(',').Select(s => s.Trim().ToLower()).Where(s => validBearSeals.Contains(s)).ToList() ?? new List<string>();

                        var validCerSeals = CerSeals.Select(s => s.Trim().ToLower()).ToList();
                        selectedCerSeals = response.CeramicSeals?.Split(',').Select(s => s.Trim().ToLower()).Where(s => validCerSeals.Contains(s)).ToList() ?? new List<string>();
                        selectedLR = response.Left;
                        inspection.yLeft = response.yLeft;
                        selectedRL = response.Right;
                        inspection.yRight = response.yLeft;
                        selectedbs = response.BasicSharpening;
                        SelectedNewBoxRequiredNumberData = response.NewBoxRequiredBox;
                        selectedybasicsharp = response.IfYBasicSharpening;
                        selectedpre = response.WedgelockAlignmentMarks;
                        selectedctr = response.CenterGrinding;
                        selectedycg = response.IfYCenterGrinding;
                        selectedalign = response.Aligned;
                        selectedps = response.PlasticSleaves;
                        selectedwelding = response.Welding;
                        inspection.WeldingNum = response.WeldingNum;
                        selectebkid = response.BedKnife;
                        selectedRB = response.BoxReceivedWithSaddles;
                        inspection.ADDQTYdata = response.ADDQTYdata;
                        selectedrp = response.ReProfile;
                        selectedManualLabour = response.ManualLabor;
                        selectedNewBoxRequiredBox = response.NewBoxRequired;
                        inspection.NewBoxRequiredBox = response.NewBoxRequiredBox;
                        selectedtb = response.Top;
                        selectedbt = response.Bottom;
                        inspection.AddQty = response.AddQty;
                        SelectedSaddlePartNumber = response.SaddlePartNumber;
                        selectedddrc = response.RotorCategorization;
                        selecteddd = response.ComponentType;
                        showForm = true;

                        ProjectimagesData = await localStorage.GetItemAsync<IncomingInspectionImageDTO>("ProjectImageData");

                        selectedImagesFromSM.Clear(); // Clear old data

                        if (ProjectimagesData?.Images != null &&
                        ProjectimagesData.SerialNumber?.Trim() == SelectedSerialNumber &&
                        ProjectimagesData.Images.Any())
                        {
                            selectedImagesFromSM.Add(new IncomingImages
                                {
                                    SerialNumber = ProjectimagesData.SerialNumber?.Trim(),
                                    Images = ProjectimagesData.Images.Select(img => new Imagedata
                                    {
                                        Data = img.Data,
                                        ID = img.IncomingImageId
                                    }).ToList()
                                });
                        }
                    }
                }
                catch (HttpRequestException ex)
                {
                    isExistingSerial = false;
                    await StopScanning();
                    showScanDetails = true;
                    showForm = true;
                    StateHasChanged();
                }


            
            };

            _onCameraPermissionFailedAction = (error) => OnCameraPermissionFailed(error);

            _qrCodeScannerJsInterop = new QRCodeScannerJsInterop(JSRuntime);
            await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction, _onCameraPermissionFailedAction);

            isCancel = true;
        }
        catch (Exception ex)
        {
            cameraError = true;
        }

        StateHasChanged();
    }

    private async Task Stop()
    {
        isScanning = false;
        isCancel = false;


        StateHasChanged();
    }

    private async Task StopScanning()
    {
        isScanning = false;
        isCancel = false;

        if (_qrCodeScannerJsInterop != null)
        {
            await _qrCodeScannerJsInterop.StopRecording();
        }

        StateHasChanged();
    }

    private bool showScanDetails = false;

    private List<string> selectedImageList = new();

    private void OnCameraPermissionFailed(string error)
    {
        cameraError = true;
        isScanning = false;
        isCancel = false;
        StateHasChanged();
    }

    private async Task OpenPreviewDialogBox()
    {

        if (!string.IsNullOrEmpty(qrCodeData))
        {
            var qrDetails = qrCodeData.Split(',');

            if (qrDetails.Length >= 3) // Ensure QR Code has expected fields
            {
                inspection.SerialNumber = ExtractValue(qrDetails[0]);
                inspection.Module = ExtractValue(qrDetails[1]);

            }

            else
            {
                Snackbar.Add("Invalid QR Code format. Please scan again.", Severity.Warning);
                return;
            }
        }
        else if (selectedReceive != null)
        {
            // Fetch from selected Receive item instead
            inspection.SerialNumber = selectedReceive.SerialNumber;
            inspection.Module = selectedReceive.SelectedOption;

        }
        else
        {
            Snackbar.Add("No QR code scanned. Please scan a QR code before submitting.", Severity.Warning);
            return;
        }
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                CloseButton = true,
                DisableBackdropClick = true
            };

        var parameters = new DialogParameters
            {//selectedMaterial
                ["InspectionData"] = inspection,
                ["SelectedMaterial"] = SelectedMaterials,
                ["SelectedRotorStyle"] = SelectedRotorsStyle,
                ["SelectedType"] = SelectedType,
                ["Selectedberrem"] = selectedberrem,
                ["SelectedBearings"] = selectedBearings,
                ["selectedManualLabour"] = selectedManualLabour,
                ["selectedMake"] = selectedMake,
                ["SelectedBearSeals"] = string.Join(", ", selectedBearSeals ?? new List<string>()),
              ["SelectedNewBoxRequiredNumberData"] = SelectedNewBoxRequiredNumberData,
                ["SelectedCerSeals"] = string.Join(", ", selectedCerSeals ?? new List<string>()),
                ["SelectedRL"] = selectedRL,
                ["SelectedLR"] = selectedLR,
                ["Selectedbs"] = selectedbs,
                ["Selectedybasicsharp"] = selectedybasicsharp,
                ["Selectedpre"] = selectedpre,
                ["Selectedctr"] = selectedctr,
                ["Selectedycg"] = selectedycg,
                ["Selectedalign"] = selectedalign,
                ["Selectedyps"] = selectedps,
                ["Selectedwelding"] = selectedwelding,
                ["selectedRB"] = selectedRB,
                ["Selectebkid"] = selectebkid,
                ["Selectedrp"] = selectedrp,
                ["Selectedsb"] = selectedsb,
                ["Selectedbt"] = selectedbt,
                ["selectedNewBoxRequiredBox"] = selectedNewBoxRequiredBox,
                ["Selectedtb"] = selectedtb,
                ["Selectedddrc"] = selectedddrc,
                ["Selecteddd"] = selecteddd,
                ["SelectedOthers"] = SelectedOthers,
                ["SelectedSaddlePartNumber"] = SelectedSaddlePartNumber,
                ["SelectedSerialNumber"] = inspection.SerialNumber,
                ["SelectedModule"] = inspection.Module,

            };

        var dialog = DialogService.Show<PreviewDialog>("INCOMING ROTOR INSPECTION", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            // handle result if needed
        }
    }

    async void Print()
    {
        await JSRuntime.InvokeVoidAsync("printFormDiv", "printForm-section");
    }


    private async Task AddProjectImagesAsync(ProjectImgDTO projectImagesDTO)
    {
        if (!string.IsNullOrEmpty(qrCodeData))
        {
            var qrDetails = qrCodeData.Split(',');

            if (qrDetails.Length >= 3) // Ensure QR Code has expected fields
            {
                inspection.Module = ExtractValue(qrDetails[2]);
                inspection.Users = ExtractValue(qrDetails[1]);
                inspection.SerialNumber = ExtractValue(qrDetails[0]); // This was missing!
            }
            else
            {
                Snackbar.Add("Invalid QR Code format. Please scan again.", Severity.Warning);
                return;
            }
        }
        else if (selectedReceive != null)
        {
            inspection.SerialNumber = selectedReceive.SerialNumber;
            inspection.Module = selectedReceive.SelectedOption;
            inspection.Users = selectedReceive.Customer;
            inspection.DateTime = selectedReceive.Date;
        }


        // Set SerialNumber in the DTO
        projectImagesDTO.SerialNumber = inspection.SerialNumber;

        var options = new DialogOptions { FullWidth = true };
        var parameters = new DialogParameters<ImageDisplayDialog>();
        // parameters.Add("ProjectImagesDTO", projectImagesDTO);
        parameters.Add("SerialNumber", inspection.SerialNumber);
        CompletionService.CompletionChanged += async (sender, args) =>
        {
            await UpdateProjectImageAsync();
        };

        DialogService.Show<AddIncomingImages>("PROJECTIMAGES", parameters, DialogSettings.DialogOptionsAddEditDelete);
    }


    private async Task UpdateProjectImageAsync()
    {
        ProjectimagesData = await localStorage.GetItemAsync<IncomingInspectionImageDTO>("ProjectImageData");

        selectedImagesFromSM.Clear(); // Clear old data if any

        if (ProjectimagesData?.Images != null && ProjectimagesData.Images.Any())
        {
            selectedImagesFromSM.Add(new IncomingImages
                {
                    SerialNumber = ProjectimagesData.SerialNumber?.Trim(),
                    Images = ProjectimagesData.Images.Select(img => new Imagedata
                    {
                    // Data = img.Data,
                    // ID = img.ITSImageID
                    }).ToList()
                });
        }

        StateHasChanged(); // ✅ This triggers UI refresh
    }


    private async Task ClearAll()
    {
        //  inspection = new IncomingInspection();
   
        //  selectedCerSeals = new();
        selectedBearSeals.Clear();
        mudSelectMetal?.Reset();
        //   selectedBearSeals = new();
        //   selectedBearSeals = new List<string>();
        //  selectedCerSeals = new List<string>();
        //OnCerSealsChanged(selectedCerSeals);
          selectedCerSeals.Clear();

        mudSelect?.Reset();
    //    selectedCerSeals = new List<string>();
        inspection.Customer = null;
        inspection.Location = null;
        inspection.SerialNumber = null;
        inspection.Customer = null;
        inspection.RotorsNumber = null;
        selectedMake = null;
        inspection.Len = null;
        inspection.Dia = null;
        inspection.Fits = null;
        SelectedMaterials = null;
        SelectedOthers = null;
        inspection.RotorsDia = null;
        SelectedRotorsStyle = null;
        SelectedType = null;
        selectedBearings = null;
        selectedberrem = null;
     
        selectedRL = null;
        inspection.yLeft = null;
        inspection.yRight = null;
        selectedLR = null;
        selectedbs = null;
        selectedybasicsharp = null;
        selectedpre = null;
        selectedctr = null;
        selectedycg = null;
        selectedalign = null;
      
        qrCodeData = string.Empty;
        SelectedProject = null;
        ProjectimagesData = null;
        selectedImagesFromSM.Clear();
        selectedps = null;
        selectedwelding = null;
        inspection.WeldingNum = null;
        selectebkid = null;
        selectedRB = null;
        selectedtb = null;
        selectedbt = null;
        selectedBearSeals.Clear();
        inspection.ADDQTYdata = null;
        selectedrp = null;
        selectedManualLabour = null;
        selectedNewBoxRequiredBox = null;
        inspection.NewBoxRequiredBox = null;
        SelectedSaddlePartNumber = null;
        inspection.AddQty = null;
        selectedddrc = null;
        selecteddd = null;
        // Reset serial number/module selections
        SelectedSerialNumber = null;
        SelectedModuleName = null;

        StateHasChanged();

    }

    public class ImageUploadDto
    {
        public string SerialNumber { get; set; }

        public List<ImageDataDto> Images { get; set; }
    }

    public class IncomingInspectionSubmit
    {
        public int Id { get; set; }
        public string? SalesOrderNumber { get; set; }
        public string? WorkOrder { get; set; }

        public string? ADDQTYdata { get; set; }
        public string? NewBoxRequired { get; set; }
        public string? NewBoxRequiredBox { get; set; }
        public string? MatNumber { get; set; }
        public string Customer { get; set; }
        public string Location { get; set; }
        public string Received { get; set; }
        public string Inspected { get; set; }
        public string RotorsNumber { get; set; }
        public string? Initials { get; set; }
        public string? Make { get; set; }
        public string? Dia { get; set; }
        public string? Len { get; set; }
        public string? Fits { get; set; }
        public string? Materials { get; set; }
        public string? Others { get; set; }
        public string? RotorsDia { get; set; }
        public string? RotorStyle { get; set; }
        public string? Type { get; set; }
        public string? BearingRemoved { get; set; }
        public string? Bearing { get; set; }
        public string? BearingSeals { get; set; }
        public string? CeramicSeals { get; set; }
        public string? Right { get; set; }
        public string? yRight { get; set; }
        public string? Left { get; set; }
        public string? yLeft { get; set; }
        public string? BasicSharpening { get; set; }
        public string? IfYBasicSharpening { get; set; }
        public string? WedgelockAlignmentMarks { get; set; }
        public string? CenterGrinding { get; set; }
        public string? IfYCenterGrinding { get; set; }
        public string? Aligned { get; set; }
        public string? PlasticSleaves { get; set; }
        public string? Welding { get; set; }
        public string? WeldingNum { get; set; }
        public string? BedKnife { get; set; }
        public string? BoxReceivedWithSaddles { get; set; }
        public string? ReProfile { get; set; }
        public string? SandBlasting { get; set; }
        public string? ManualLabor { get; set; }
        public string? Bottom { get; set; }
        public string? Top { get; set; }
        public int? AddQty { get; set; }
        public string? TirLeftJournal { get; set; }
        public string? TirRightJournal { get; set; }
        public string? SaddlePartNumber { get; set; }
        public string SerialNumber { get; set; }
        public string Module { get; set; }
        public DateTime? DateTime { get; set; }
        public string RotorCategorization { get; set; }
        public string ComponentType { get; set; }
        public string Users { get; set; }
    }


    public class ImageDataDto
    {
        public byte[] Data { get; set; }
        public int IncomingInspectionID { get; set; }
    }

    public class ProjectImgDTO
    {
        public string SerialNumber { get; set; }

    }
}