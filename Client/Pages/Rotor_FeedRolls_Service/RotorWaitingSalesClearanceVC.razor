@page "/rwsc"

@using MES.Client.Dialog
@using MES.Client.Utitlity
@using MES.Shared.Models
@using MES.Shared.Models.Rotors
@using ReactorBlazorQRCodeScanner
@using System.Text


@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogCompletionService CompletionService
@inject IHttpClientFactory _httpClient
@inject IJSRuntime JS;

<MudGrid Spacing="3">
    <!-- Left Panel: Search & List -->
    <MudItem xs="12" md="4">
        <MudPaper Elevation="3" Class="pa-3">
            <MudTextField @bind-Value="searchTerm" Placeholder="Search..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" FullWidth="true" />
            <MudList Dense="true">
                @foreach (var item in inspections.Where(i => i.SerialNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
                {
                    <MudListItem Button="true" OnClick="() => SelectInspection(item)" Class="@(hoveredInspection == item ? "hover-highlight" : null)"
                                 @onmouseover="() => hoveredInspection = item"
                                 @onmouseout="() => hoveredInspection = null">
                        <MudText>@item.SerialNumber - @item.Customer - @item.RotorsNumber</MudText>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    </MudItem>

    @if (selectedInspection != null)
    {
        <MudItem xs="12" md="8">
            <MudPaper Elevation="3" Class="pa-3" Style="overflow: visible;">
                @if (selectedInspection != null)
                {
                    <MudGrid>

                        <MudItem xs="4">
                            <MudTextField Label="Customer" @bind-Value="selectedInspection.Customer" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField Label="Location" @bind-Value="selectedInspection.Location" FullWidth="true" Variant="Variant.Outlined" ReadOnly />
                        </MudItem>


                    </MudGrid>



                }

            </MudPaper>
        </MudItem>
    }

</MudGrid>


<style>

    .hover-highlight {
        background-color: #c4c4c4;
        cursor: pointer;
    }

    .overflow-visible {
        overflow: visible !important;
    }

</style>





@code {
    [Inject] private IDialogService DialogService { get; set; } = default!;
    private List<RotorsFinalInspection> inspections = new();
    private bool isLoading = false;
    private string errorMessage = "";
    private RotorsFinalInspection selectedInspection;
    private string searchTerm = "";
    private RotorsFinalInspection? hoveredInspection;





    protected override async Task OnInitializedAsync()
    {


        await FetchAllInspections();
    }

    private async Task FetchAllInspections()
    {
        try
        {


            isLoading = true;
            // Fetch Rotors FinalInspection data
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var response = await HttpClient.GetAsync(ApiConstants.GetAllFinalInspectionData);
            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadAsStringAsync();
                var allInspections = JsonSerializer.Deserialize<List<RotorsFinalInspection>>(data,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorsFinalInspection>();


                inspections = allInspections
                    .ToList();

            }
            else
            {
                errorMessage = $"Error: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SelectInspection(RotorsFinalInspection inspection)
    {
        selectedInspection = inspection;


    }


}
