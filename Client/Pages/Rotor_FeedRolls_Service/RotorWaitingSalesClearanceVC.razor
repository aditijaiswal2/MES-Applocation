@page "/rwsc"

@using MES.Client.Dialog
@using MES.Client.Utitlity
@using MES.Shared.Models
@using MES.Shared.Models.Rotors
@using ReactorBlazorQRCodeScanner
@using System.Text
@using static MES.Client.Pages.LoginVC


@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject IDialogCompletionService CompletionService
@inject IHttpClientFactory _httpClient
@inject IJSRuntime JS;

<MudGrid Spacing="3">
    <!-- Left Panel: Search & List -->
    <MudItem xs="12" md="4">
        <MudPaper Elevation="3" Class="pa-3">
            <MudTextField @bind-Value="searchTerm" Placeholder="Search..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" FullWidth="true" />
            <MudList Dense="true">
                @foreach (var item in inspections.Where(i => i.SerialNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
                {
                    <MudListItem Button="true" OnClick="() => SelectInspection(item)" Class="@(hoveredInspection == item ? "hover-highlight" : null)"
                                 @onmouseover="() => hoveredInspection = item"
                                 @onmouseout="() => hoveredInspection = null">
                        <MudText>@item.SerialNumber - @item.Customer - @item.RotorsNumber</MudText>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    </MudItem>

    @if (selectedInspection != null)
    {
        <MudItem xs="12" md="8">
            <MudPaper Elevation="3" Class="pa-3" Style="overflow: visible;">
                @if (selectedInspection != null)
                {
                    <MudGrid>

                        <MudItem md="12" sm="12" xs="12">
                            <MudTextField Label="Additional Comments"
                                          @bind-Value="AdditionalComments"
                                          Variant="Variant.Outlined"
                                          FullWidth="true" />
                        </MudItem>
                    </MudGrid>

                    <br />

                    <MudItem Class="d-flex justify-end " md="12" sm="12" xs="12">

                       
                        <MudButton Class="mr-2" Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" OnClick="Submit">SUBMIT</MudButton>                       
                        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Error" OnClick="ClearAll">Clear</MudButton>

                    </MudItem>
                   



                }

            </MudPaper>
        </MudItem>
    }

</MudGrid>


<style>

    .hover-highlight {
        background-color: #c4c4c4;
        cursor: pointer;
    }

    .overflow-visible {
        overflow: visible !important;
    }

</style>





@code {
    [Inject] private IDialogService DialogService { get; set; } = default!;
    private List<RotorsFinalInspection> inspections = new();
    private bool isLoading = false;
    private string errorMessage = "";
    private RotorsFinalInspection selectedInspection;
    private string searchTerm = "";
    private RotorsFinalInspection? hoveredInspection;
    private string? AdditionalComments { get; set; }
    private List<RotorSalesClearance> rotorSalesClearanceDatas = new();
    


    protected override async Task OnInitializedAsync()
    {


        await FetchAllInspections();
    }

    private async Task FetchAllInspections()
    {
        try
        {
            // Fetch rotor sales CLEARENCE DATA data
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var rotorSalesDatasresponse = await HttpClient.GetAsync(ApiConstants.GetAllSalesClearanceData);
            if (rotorSalesDatasresponse.IsSuccessStatusCode)
            {
                var data = await rotorSalesDatasresponse.Content.ReadAsStringAsync();
                rotorSalesClearanceDatas = JsonSerializer.Deserialize<List<RotorSalesClearance>>(data,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorSalesClearance>();
            }

            isLoading = true;
            // Fetch Rotors FinalInspection data
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var response = await HttpClient.GetAsync(ApiConstants.GetAllFinalInspectionData);
            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadAsStringAsync();
                var allInspections = JsonSerializer.Deserialize<List<RotorsFinalInspection>>(data,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<RotorsFinalInspection>();


                // Exclude inspections that already exist in rotorSales clearence Datas (based on SerialNumber)
                inspections = allInspections
                    .Where(i => !rotorSalesClearanceDatas.Any(r =>
                        string.Equals(r.SerialNumber, i.SerialNumber, StringComparison.OrdinalIgnoreCase)))
                    .ToList();

            }
            else
            {
                errorMessage = $"Error: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SelectInspection(RotorsFinalInspection inspection)
    {
        selectedInspection = inspection;


    }

    private async Task Submit()
    {
       
        var userData = await localStorage.GetItemAsync<UserPagesAndRouter>("UserData");
        string useradd = userData?.UserName ?? "User";
        if (userData != null)
        {
            useradd = userData.UserName;
        }       

        var submissionData = new SalesClearenceSubmission
            {
                SelectedInspection = selectedInspection,               
            AdditionalComments = string.IsNullOrWhiteSpace(AdditionalComments) ? "N/A" : AdditionalComments,
                SubmitedBy = useradd,
                SubmitDate = DateTime.Now
            };

        try
        {
            var jsonPart = Newtonsoft.Json.JsonConvert.SerializeObject(submissionData);
            var content = new StringContent(jsonPart, Encoding.UTF8, "application/json");
            HttpClient = _httpClient.CreateClient("ITS.ServerAPI");
            var response = await HttpClient.PostAsync(ApiConstants.AddRotorSalesClearanceData, content);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Sales Clearance Data submitted successfully!", Severity.Success);
                ClearAll();
                await FetchAllInspections();
                StateHasChanged();
            }
            else
            {
                Snackbar.Add($"Failed to submit the sales clearance data,Try again ! Status code: {response.StatusCode}", Severity.Error);

            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error submitting sales clearance data: {ex.Message}", Severity.Error);
        }
    }

    private async Task ClearAll()
    {
        selectedInspection = null;
        AdditionalComments = string.Empty;
        errorMessage = string.Empty;
        isLoading = false;
       

        StateHasChanged();
    }

    public class SalesClearenceSubmission
    {
        public RotorsFinalInspection SelectedInspection { get; set; }      
        public string AdditionalComments { get; set; }
        public DateTime? SubmitDate { get; set; }
        public string SubmitedBy { get; set; }
    }


}
